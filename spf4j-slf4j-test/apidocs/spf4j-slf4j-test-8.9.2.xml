<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Thu Nov 11 08:29:27 EST 2021 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="spf4j-slf4j-test-8.9.2"
  jdversion="1.0.9">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /Users/zoly/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/Users/zoly/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/Users/zoly/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/Users/zoly/.m2/repository/jdiff/jdiff/1.0.9/jdiff-1.0.9.jar -doclet jdiff.JDiff -docletpath /Users/zoly/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/Users/zoly/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/Users/zoly/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/Users/zoly/.m2/repository/jdiff/jdiff/1.0.9/jdiff-1.0.9.jar -apiname spf4j-slf4j-test-8.9.2 -apidir /Users/zoly/NetBeansProjects/spf4j/spf4j-slf4j-test/target/site/apidocs -classpath /Users/zoly/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/Users/zoly/.m2/repository/net/java/dev/jna/jna/4.5.0/jna-4.5.0.jar:/Users/zoly/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/zoly/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/zoly/.m2/repository/org/threeten/threeten-extra/1.5.0/threeten-extra-1.5.0.jar:/Users/zoly/.m2/repository/com/google/guava/guava/30.0-jre/guava-30.0-jre.jar:/Users/zoly/.m2/repository/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.jar:/Users/zoly/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/zoly/.m2/repository/org/spf4j/spf4j-slf4j-test/8.9.2/spf4j-slf4j-test-8.9.2.jar:/Users/zoly/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.11.3/jackson-databind-2.11.3.jar:/Users/zoly/.m2/repository/org/spf4j/avro-logical-types-fork/1.1/avro-logical-types-fork-1.1.jar:/Users/zoly/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.11.3/jackson-annotations-2.11.3.jar:/Users/zoly/.m2/repository/org/hamcrest/hamcrest-library/1.3/hamcrest-library-1.3.jar:/Users/zoly/.m2/repository/com/google/code/findbugs/findbugs-annotations/3.0.1/findbugs-annotations-3.0.1.jar:/Users/zoly/.m2/repository/net/java/dev/jna/jna-platform/4.5.0/jna-platform-4.5.0.jar:/Users/zoly/.m2/repository/org/spf4j/avro/core-schema/1.0.6/core-schema-1.0.6.jar:/Users/zoly/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.4/error_prone_annotations-2.3.4.jar:/Users/zoly/.m2/repository/org/apache/avro/avro/1.10.2/avro-1.10.2.jar:/Users/zoly/.m2/repository/net/sf/trove4j/trove4j/3.0.3/trove4j-3.0.3.jar:/Users/zoly/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/Users/zoly/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.11.3/jackson-core-2.11.3.jar:/Users/zoly/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/zoly/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.30/jcl-over-slf4j-1.7.30.jar:/Users/zoly/.m2/repository/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.jar -sourcepath /var/folders/xj/26t4l20j05740l2k5ng_4v3h0000gp/T/jdiff8381858953013750910/spf4j-slf4j-test/8.9.2/sources -->
<package name="org.spf4j.test.matchers">
  <!-- start class org.spf4j.test.matchers.LogMatchers -->
  <class name="LogMatchers" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="hasMatchingFormat" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tMatcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasFormat" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
    </method>
    <method name="hasFormatWithPattern" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="formatPattern" type="java.lang.String"/>
    </method>
    <method name="hasMatchingMarker" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tMatcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasMarker" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="hasMatchingMessage" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tMatcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasMessage" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
    </method>
    <method name="hasMessageWithPattern" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messagePattern" type="java.lang.String"/>
    </method>
    <method name="hasLevel" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
    </method>
    <method name="hasNotLoggers" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggers" type="java.util.Set"/>
    </method>
    <method name="hasNotLogger" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pred" type="java.util.function.Predicate"/>
    </method>
    <method name="hasMatchingArguments" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasArguments" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="objects" type="java.lang.Object[]"/>
    </method>
    <method name="hasArgumentAt" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idx" type="int"/>
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="hasMatchingArgumentAt" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idx" type="int"/>
      <param name="matcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasAttachment" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attachment" type="java.lang.String"/>
    </method>
    <method name="noAttachment" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attachment" type="java.lang.String"/>
    </method>
    <method name="hasExtraArguments" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="objects" type="java.lang.Object[]"/>
    </method>
    <method name="hasExtraArgumentAt" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="idx" type="int"/>
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="hasExtraArgument" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="hasMatchingExtraArgumentsContaining" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matcher" type="org.hamcrest.Matcher[]"/>
    </method>
    <method name="hasMatchingExtraArguments" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasMatchingExtraThrowable" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasMatchingExtraThrowableChain" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matcher" type="org.hamcrest.Matcher"/>
    </method>
    <doc>
    <![CDATA[Utility class to create LogRecord matchers.
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.matchers.LogMatchers -->
  <!-- start class org.spf4j.test.matchers.PatternMatcher -->
  <class name="PatternMatcher" extends="org.hamcrest.TypeSafeMatcher"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="matchesSafely" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="item" type="java.lang.String"/>
    </method>
    <method name="describeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.hamcrest.Description"/>
    </method>
    <method name="matchesPattern" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pattern" type="java.util.regex.Pattern"/>
      <doc>
      <![CDATA[Creates a matcher of {@link String} that matches when the examined string exactly matches the given
 {@link Pattern}.]]>
      </doc>
    </method>
    <method name="matchesPattern" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="regex" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a matcher of {@link String} that matches when the examined string exactly matches the given regular
 expression, treated as a {@link Pattern}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.matchers.PatternMatcher -->
  <!-- start class org.spf4j.test.matchers.PredicateMatcher -->
  <class name="PredicateMatcher" extends="org.hamcrest.TypeSafeMatcher"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="PredicateMatcher" type="java.util.function.Predicate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="matchesSafely" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="item" type="java.lang.Object"/>
    </method>
    <method name="describeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.hamcrest.Description"/>
    </method>
    <method name="matchesPredicate" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pred" type="java.util.function.Predicate"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.matchers.PredicateMatcher -->
</package>
<package name="org.spf4j.recyclable.impl">
  <!-- start class org.spf4j.recyclable.impl.ArraySuppliers -->
  <class name="ArraySuppliers" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.impl.ArraySuppliers -->
  <!-- start class org.spf4j.recyclable.impl.ArraySuppliers.Bytes -->
  <class name="ArraySuppliers.Bytes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="TL_SUPPLIER" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GL_SUPPLIER" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="JAVA_NEW" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.recyclable.impl.ArraySuppliers.Bytes -->
  <!-- start class org.spf4j.recyclable.impl.ArraySuppliers.Chars -->
  <class name="ArraySuppliers.Chars" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="TL_SUPPLIER" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GL_SUPPLIER" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="JAVA_NEW" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.recyclable.impl.ArraySuppliers.Chars -->
  <!-- start class org.spf4j.recyclable.impl.ArraySuppliers.Objects -->
  <class name="ArraySuppliers.Objects" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="TL_SUPPLIER" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.recyclable.impl.ArraySuppliers.Objects -->
  <!-- start class org.spf4j.recyclable.impl.Powerof2SizedGlobalRecyclingSupplier -->
  <class name="Powerof2SizedGlobalRecyclingSupplier" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.recyclable.SizedRecyclingSupplier"/>
    <constructor name="Powerof2SizedGlobalRecyclingSupplier" type="org.spf4j.recyclable.SizedRecyclingSupplier.Factory, org.spf4j.base.ReferenceType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
    </method>
    <method name="recycle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[recycling supplier that allows you to recycle objects.
 Recycling objects is dangerous business, care should be used.
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.impl.Powerof2SizedGlobalRecyclingSupplier -->
  <!-- start class org.spf4j.recyclable.impl.Powerof2ThreadLocalRecyclingSupplier -->
  <class name="Powerof2ThreadLocalRecyclingSupplier" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.recyclable.SizedRecyclingSupplier"/>
    <constructor name="Powerof2ThreadLocalRecyclingSupplier" type="org.spf4j.recyclable.SizedRecyclingSupplier.Factory, org.spf4j.base.ReferenceType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
    </method>
    <method name="recycle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[recycling supplier that allows you to recycle objects.
 Recycling objects is dangerous business, care should be used.
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.impl.Powerof2ThreadLocalRecyclingSupplier -->
  <!-- start class org.spf4j.recyclable.impl.ThreadLocalRecyclingSupplier -->
  <class name="ThreadLocalRecyclingSupplier" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.recyclable.NonValidatingRecyclingSupplier"/>
    <constructor name="ThreadLocalRecyclingSupplier" type="java.util.function.Supplier"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="recycle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.impl.ThreadLocalRecyclingSupplier -->
</package>
<package name="org.spf4j.test.log.junit4">
  <!-- start class org.spf4j.test.log.junit4.DetailOnFailureRunListener -->
  <class name="DetailOnFailureRunListener" extends="org.spf4j.test.log.junit4.Spf4jTestLogRunListener"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="use Spf4jTestLogRunListener instead.">
    <constructor name="DetailOnFailureRunListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author Zoltan Farkas
 @deprecated use Spf4jTestLogRunListener instead.]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.junit4.DetailOnFailureRunListener -->
  <!-- start class org.spf4j.test.log.junit4.Spf4jTestLogJUnitRunner -->
  <class name="Spf4jTestLogJUnitRunner" extends="org.junit.runners.BlockJUnit4ClassRunner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Spf4jTestLogJUnitRunner" type="java.lang.Class"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="InitializationError" type="org.junit.runners.model.InitializationError"/>
    </constructor>
    <method name="run"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notifier" type="org.junit.runner.notification.RunNotifier"/>
      <doc>
      <![CDATA[See JUnit doc if overwriting...
 @param notifier]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.junit4.Spf4jTestLogJUnitRunner -->
  <!-- start class org.spf4j.test.log.junit4.Spf4jTestLogRunListener -->
  <class name="Spf4jTestLogRunListener" extends="org.junit.runner.notification.RunListener"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Spf4jTestLogRunListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="testIgnored"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="testAssumptionFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="failure" type="org.junit.runner.notification.Failure"/>
    </method>
    <method name="testFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="failure" type="org.junit.runner.notification.Failure"/>
    </method>
    <method name="testFinished"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
    </method>
    <method name="testStarted"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="testRunFinished"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="result" type="org.junit.runner.Result"/>
    </method>
    <method name="testRunStarted"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.junit4.Spf4jTestLogRunListener -->
  <!-- start class org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton -->
  <class name="Spf4jTestLogRunListenerSingleton" extends="org.junit.runner.notification.RunListener"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getTimeoutMillis" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="desc" type="org.junit.runner.Description"/>
      <param name="defaultTestTimeoutMillis" type="long"/>
    </method>
    <method name="getOrCreateListenerInstance" return="org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOrCreateListenerInstance" return="org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeoutSupplier" type="org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton.TimeoutSupplier"/>
    </method>
    <method name="testRunStarted"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
    </method>
    <method name="getListenerInstance" return="org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="testRunFinished"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="result" type="org.junit.runner.Result"/>
    </method>
    <method name="testStarted"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="assertionsAfterTestExecution"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
    </method>
    <method name="assertionsAfterTestExecution"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <param name="baggage" type="org.spf4j.test.log.junit4.TestBaggage"/>
    </method>
    <method name="cleanupAfterTestFinish"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <param name="baggage" type="org.spf4j.test.log.junit4.TestBaggage"/>
    </method>
    <method name="testFinished"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
    </method>
    <method name="testFailure"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="failure" type="org.junit.runner.notification.Failure"/>
    </method>
    <method name="dumpDebugInfoOnFailure"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bg" type="org.spf4j.test.log.junit4.TestBaggage"/>
      <param name="description" type="org.junit.runner.Description"/>
      <param name="maxDebugLogsCollected" type="int"/>
    </method>
    <method name="getUncaughtExceptionHandler" return="org.spf4j.test.log.ExceptionHandoverRegistry"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="BAG_TAG" type="org.spf4j.base.ExecutionContext.SimpleTag"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton -->
  <!-- start interface org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton.TimeoutSupplier -->
  <interface name="Spf4jTestLogRunListenerSingleton.TimeoutSupplier"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getTimeoutMillis" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="desc" type="org.junit.runner.Description"/>
      <param name="defaultTestTimeoutMillis" type="long"/>
    </method>
  </interface>
  <!-- end interface org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton.TimeoutSupplier -->
  <!-- start class org.spf4j.test.log.junit4.TestBaggage -->
  <class name="TestBaggage" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getCtx" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLogCollection" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAssertions" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.junit4.TestBaggage -->
</package>
<package name="org.spf4j.io.csv">
  <!-- start class org.spf4j.io.csv.CharSeparatedValues -->
  <class name="CharSeparatedValues" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="CharSeparatedValues" type="char"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CharSeparatedValues" type="char, char[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="writeCsvRow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.lang.Appendable"/>
      <param name="elems" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toCsvRowString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="elems" type="java.lang.Object[]"/>
    </method>
    <method name="writeCsvRowNoEOL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.lang.Appendable"/>
      <param name="elems" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeCsvRow2"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.lang.Appendable"/>
      <param name="obj" type="java.lang.Object"/>
      <param name="elems" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeCsvRow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.lang.Appendable"/>
      <param name="elems" type="long[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeCsvRowNoEOL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elems" type="long[]"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeCsvRow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.lang.Appendable"/>
      <param name="elems" type="java.lang.Iterable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeCsvRowNoEOL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elems" type="java.lang.Iterable"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="handler" type="org.spf4j.io.csv.CsvMapHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="read" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="handler" type="org.spf4j.io.csv.CsvHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="read" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="read" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <param name="handler" type="org.spf4j.io.csv.CsvMapHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="readRow" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="readRow" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="handler" type="org.spf4j.io.csv.CsvRowHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="read" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <param name="handler" type="org.spf4j.io.csv.CsvHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="readNoBom" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="org.spf4j.io.PushbackReader"/>
      <param name="handler" type="org.spf4j.io.csv.CsvHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
      <doc>
      <![CDATA[reads CSV format until EOF of reader.

 @param <T>
 @param preader
 @param handler
 @return
 @throws IOException]]>
      </doc>
    </method>
    <method name="asIterable" return="java.lang.Iterable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <doc>
      <![CDATA[read a CSV stream, as a Iterable over rows.
 the List<String> instance is reused during iteration, you will need to copy content into
 own data structure.
 @param preader
 @return]]>
      </doc>
    </method>
    <method name="singleRow" return="java.lang.Iterable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <doc>
      <![CDATA[Iterate through the first row of your CSV.
 the CharSequence is a re-0used char buffer you either need to parse the content out of copy it.
 @param preader
 @return]]>
      </doc>
    </method>
    <method name="reader" return="org.spf4j.io.csv.CsvReader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="readerILEL" return="org.spf4j.io.csv.CsvReader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use reader">
      <param name="preader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[will ignore last empty line.
 @param preader
 @return
 @throws IOException
 @deprecated use reader]]>
      </doc>
    </method>
    <method name="readerNoBOM" return="org.spf4j.io.csv.CsvReader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="org.spf4j.io.PushbackReader"/>
      <doc>
      <![CDATA[assumes there is not BOM. (byte order marker)
 @param reader
 @return]]>
      </doc>
    </method>
    <method name="readerNoBOMILEL" return="org.spf4j.io.csv.CsvReader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use readerNoBOM.">
      <param name="reader" type="org.spf4j.io.PushbackReader"/>
      <doc>
      <![CDATA[reader that there is not BOM. (byte order marker) and will ignore last empty line.
 @param reader
 @return
 @deprecated use readerNoBOM.]]>
      </doc>
    </method>
    <method name="writer" return="org.spf4j.io.csv.CsvWriter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
    </method>
    <method name="writeCsvElement"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.CharSequence"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeQuotedCsvElement"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.CharSequence"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeQuotedElementContent"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.CharSequence"/>
      <param name="start" type="int"/>
      <param name="end" type="int"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeQuotedChar"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toCsvElement" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.CharSequence"/>
    </method>
    <method name="toCsvElement" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.String"/>
    </method>
    <method name="readCsvElement" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="addElemTo" type="java.lang.StringBuilder"/>
      <param name="lineNr" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
      <doc>
      <![CDATA[returns next character.

 @param reader
 @param addElemTo
 @return - next character or -1 if eof has been reached.
 @throws IOException]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="UTF_BOM" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[http://unicode.org/faq/utf_bom.html#BOM]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Supports Character Separated values format as described at: https://en.wikipedia.org/wiki/Comma-separated_values.
 either of \n \r or \r\n generalized to custom separator character.
 are valid end of line delimiters

 why another implementation? because I need one that is as fast as possible, and as flexible as possible.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.csv.CharSeparatedValues -->
  <!-- start interface org.spf4j.io.csv.CsvHandler -->
  <interface name="CsvHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="startRow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rowNr" type="long"/>
    </method>
    <method name="startRow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="element"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.CharSequence"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
      <doc>
      <![CDATA[@param elem - the CharSequence instance is being reused, between invocations. value should be copied or parsed into
 a new object.]]>
      </doc>
    </method>
    <method name="endRow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="eof" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.io.csv.CsvHandler -->
  <!-- start interface org.spf4j.io.csv.CsvMapHandler -->
  <interface name="CsvMapHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="row"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="row" type="java.util.Map"/>
    </method>
    <method name="eof" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.io.csv.CsvMapHandler -->
  <!-- start class org.spf4j.io.csv.CsvParseException -->
  <class name="CsvParseException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CsvParseException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CsvParseException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CsvParseException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CsvParseException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.csv.CsvParseException -->
  <!-- start interface org.spf4j.io.csv.CsvReader -->
  <interface name="CsvReader"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="next" return="org.spf4j.io.csv.CsvReader.TokenType"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
      <doc>
      <![CDATA[read next CSV element, and return its type.

 @return return CSV element type.
 @throws IOException exception is something goes wrong.]]>
      </doc>
    </method>
    <method name="current" return="org.spf4j.io.csv.CsvReader.TokenType"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the currently parsed token type,  null if no current token is available (next has never been called)
 @throws IOException
 @throws CsvParseException]]>
      </doc>
    </method>
    <method name="getElement" return="java.lang.CharSequence"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[the CSV element string. the underlying instance is reused, so you will need to make a copy of this if planning to
 use it.

 @return CharSequence representing a csv cell.]]>
      </doc>
    </method>
    <method name="currentLineNumber" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Current CSV line number.
 @return]]>
      </doc>
    </method>
    <method name="skipRow" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="readRow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="consumer" type="java.util.function.Consumer"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="toReader" return="org.spf4j.io.csv.CsvReader"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="it" type="java.util.Iterator"/>
    </method>
    <doc>
    <![CDATA[Char separated value file Reader.
 A newly created reader will initially be positioned at START_DOCUMENT. (current())
 A example Token sequence will be:
 START_DOCUMENT, ELEMENT, ELEMENT, END_ROW, ELEMENT, ELEMENT, END_ROW, END_DOCUMENT

 @author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.io.csv.CsvReader -->
  <!-- start class org.spf4j.io.csv.CsvReader.TokenType -->
  <class name="CsvReader.TokenType" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.io.csv.CsvReader.TokenType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.io.csv.CsvReader.TokenType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="START_DOCUMENT" type="org.spf4j.io.csv.CsvReader.TokenType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ELEMENT" type="org.spf4j.io.csv.CsvReader.TokenType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="END_ROW" type="org.spf4j.io.csv.CsvReader.TokenType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="END_DOCUMENT" type="org.spf4j.io.csv.CsvReader.TokenType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.io.csv.CsvReader.TokenType -->
  <!-- start interface org.spf4j.io.csv.CsvRowHandler -->
  <interface name="CsvRowHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="element"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.CharSequence"/>
    </method>
    <method name="eof" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.io.csv.CsvRowHandler -->
  <!-- start class org.spf4j.io.csv.CsvRuntimeException -->
  <class name="CsvRuntimeException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CsvRuntimeException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CsvRuntimeException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CsvRuntimeException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CsvRuntimeException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.csv.CsvRuntimeException -->
  <!-- start interface org.spf4j.io.csv.CsvWriter -->
  <interface name="CsvWriter"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="writeElement"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Will start a element, and write it.
 @param cs
 @throws IOException]]>
      </doc>
    </method>
    <method name="writeEol"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[should be called when writing a row is done.
 @throws IOException]]>
      </doc>
    </method>
    <method name="flush"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[This will flush to underlying destination.
 @throws IOException]]>
      </doc>
    </method>
    <method name="startQuotedElement" return="org.spf4j.io.csv.ElementAppendable"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="startRawElement" return="java.lang.Appendable"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.io.csv.CsvWriter -->
  <!-- start interface org.spf4j.io.csv.ElementAppendable -->
  <interface name="ElementAppendable"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Appendable"/>
    <implements name="java.io.Closeable"/>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.io.csv.ElementAppendable -->
  <!-- start class org.spf4j.io.csv.OneRowIterator -->
  <class name="OneRowIterator" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.Iterator"/>
    <constructor name="OneRowIterator" type="org.spf4j.io.csv.CsvReader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="next" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.csv.OneRowIterator -->
  <!-- start class org.spf4j.io.csv.UncheckedCsvParseException -->
  <class name="UncheckedCsvParseException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UncheckedCsvParseException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UncheckedCsvParseException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UncheckedCsvParseException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UncheckedCsvParseException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.csv.UncheckedCsvParseException -->
</package>
<package name="org.spf4j.concurrent">
  <!-- start class org.spf4j.concurrent.CustomThreadFactory -->
  <class name="CustomThreadFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.concurrent.ThreadFactory"/>
    <constructor name="CustomThreadFactory" type="java.lang.String, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CustomThreadFactory" type="java.lang.String, boolean, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="newThread" return="java.lang.Thread"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="r" type="java.lang.Runnable"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[The default thread factory]]>
    </doc>
  </class>
  <!-- end class org.spf4j.concurrent.CustomThreadFactory -->
  <!-- start class org.spf4j.concurrent.Futures -->
  <class name="Futures" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="cancelAll" return="java.lang.RuntimeException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mayInterrupt" type="boolean"/>
      <param name="futures" type="java.util.concurrent.Future[]"/>
    </method>
    <method name="cancelAll" return="java.lang.RuntimeException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mayInterrupt" type="boolean"/>
      <param name="futures" type="java.util.concurrent.Future[]"/>
      <param name="from" type="int"/>
    </method>
    <method name="cancelAll" return="java.lang.RuntimeException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mayInterrupt" type="boolean"/>
      <param name="iterator" type="java.util.Iterator"/>
    </method>
    <method name="getAll" return="org.spf4j.base.Pair"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeoutMillis" type="long"/>
      <param name="futures" type="java.util.concurrent.Future[]"/>
    </method>
    <method name="getAllWithDeadlineNanos" return="org.spf4j.base.Pair"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deadlineNanos" type="long"/>
      <param name="futures" type="java.util.concurrent.Future[]"/>
    </method>
    <method name="getAllWithDeadlineNanos" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deadlineNanos" type="long"/>
      <param name="consumer" type="java.util.function.BiConsumer"/>
      <param name="futures" type="java.util.concurrent.Future[]"/>
      <doc>
      <![CDATA[@param deadlineNanos
 @param futures
 @return]]>
      </doc>
    </method>
    <method name="getAllWithDeadlineNanosRetVoid" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deadlineNanos" type="long"/>
      <param name="futures" type="java.util.concurrent.Future[]"/>
      <doc>
      <![CDATA[Gets all futures resuls for futures that return Void (no return).

 @param deadlineNanos
 @param futures
 @return]]>
      </doc>
    </method>
    <method name="getAll" return="org.spf4j.base.Pair"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeoutMillis" type="long"/>
      <param name="futures" type="java.lang.Iterable"/>
    </method>
    <method name="getAllWithDeadlineNanos" return="org.spf4j.base.Pair"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deadlineNanos" type="long"/>
      <param name="futures" type="java.lang.Iterable"/>
    </method>
    <method name="getAllWithDeadlineNanos" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deadlineNanos" type="long"/>
      <param name="consumer" type="java.util.function.BiConsumer"/>
      <param name="futures" type="java.lang.Iterable"/>
    </method>
    <method name="timedOutFutures" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="copies" type="int"/>
      <param name="ex" type="java.util.concurrent.TimeoutException"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.concurrent.Futures -->
  <!-- start class org.spf4j.concurrent.ScalableSequence -->
  <class name="ScalableSequence" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.concurrent.Sequence"/>
    <constructor name="ScalableSequence" type="long, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="next" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.concurrent.ScalableSequence -->
  <!-- start interface org.spf4j.concurrent.Sequence -->
  <interface name="Sequence"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="next" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return next number in sequence. if result is negative an overflow happened.]]>
      </doc>
    </method>
  </interface>
  <!-- end interface org.spf4j.concurrent.Sequence -->
  <!-- start class org.spf4j.concurrent.UIDGenerator -->
  <class name="UIDGenerator" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.function.Supplier"/>
    <constructor name="UIDGenerator" type="org.spf4j.concurrent.Sequence"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UIDGenerator" type="org.spf4j.concurrent.Sequence, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UIDGenerator" type="org.spf4j.concurrent.Sequence, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UIDGenerator" type="org.spf4j.concurrent.Sequence, java.lang.String, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UIDGenerator" type="org.spf4j.concurrent.Sequence, com.google.common.io.BaseEncoding, long, char, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a UID Generator

 @param sequence
 @param baseEncoding - if null MAC address based ID will not be included.]]>
      </doc>
    </constructor>
    <method name="generateIdBase" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <param name="separator" type="char"/>
    </method>
    <method name="generateIdBase" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <param name="separator" type="char"/>
      <param name="customEpoch" type="long"/>
    </method>
    <method name="generateIdBase" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <param name="baseEncoding" type="com.google.common.io.BaseEncoding"/>
      <param name="separator" type="char"/>
      <param name="customEpoch" type="long"/>
    </method>
    <method name="getMaxSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="next" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Unique ID Generator Based on the assumptions: 1. host MAC address is used. (each network interface has a Unique ID)
 (encoded with provided encoder) 2. process id is used + current epoch seconds. it is assumed the PID is not recycled
 within a second. 3. A process sequence is used. UIDs will cycle after Long.MaxValue is reached.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.concurrent.UIDGenerator -->
  <!-- start class org.spf4j.concurrent.UnboundedLoadingCache -->
  <class name="UnboundedLoadingCache" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.cache.LoadingCache"/>
    <constructor name="UnboundedLoadingCache" type="int, com.google.common.cache.CacheLoader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UnboundedLoadingCache" type="int, int, com.google.common.cache.CacheLoader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UnboundedLoadingCache" type="java.util.Comparator, com.google.common.cache.CacheLoader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Will use a ConcurrentSkipListMap to store the underlying data.
 @param comparator
 @param loader]]>
      </doc>
    </constructor>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getUnchecked" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="getAll" return="com.google.common.collect.ImmutableMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keys" type="java.lang.Iterable"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="refresh"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="asMap" return="java.util.concurrent.ConcurrentMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIfPresent" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <param name="valueLoader" type="java.util.concurrent.Callable"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getAllPresent" return="com.google.common.collect.ImmutableMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keys" type="java.lang.Iterable"/>
    </method>
    <method name="put"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="putAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
    </method>
    <method name="invalidate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="invalidateAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keys" type="java.lang.Iterable"/>
    </method>
    <method name="invalidateAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="size" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="stats" return="com.google.common.cache.CacheStats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="cleanUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getKeysLoaded" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[custom build high performance implementation for a unbounded guava cache: UnboundedLoadingCache is implemented with
 JDK concurrent map UnboundedLoadingCache2 is using the JDK 1.8 computing map functionality, but benchmarks show worse
 performance.

 Benchmark Mode Cnt Score Error Units CacheBenchmark.guavaCache thrpt 15 29011674.275 # 710672.413 ops/s
 CacheBenchmark.spf4j2Cache thrpt 15 30567248.015 # 807965.535 ops/s CacheBenchmark.spf4jCache thrpt 15 37961593.882 #
 1136244.254 ops/s CacheBenchmark.spf4jRacyCache thrpt 15 37553655.751 # 855349.501 ops/s

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.concurrent.UnboundedLoadingCache -->
</package>
<package name="org.spf4j.test.log">
  <!-- start interface org.spf4j.test.log.AllLevelsLogHandler -->
  <interface name="AllLevelsLogHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.LogHandler"/>
    <method name="handles" return="org.spf4j.test.log.LogHandler.Handling"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.AllLevelsLogHandler -->
  <!-- start class org.spf4j.test.log.Attachments -->
  <class name="Attachments" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="ASSERTED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PRINTED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DO_NOT_PRINT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.Attachments -->
  <!-- start class org.spf4j.test.log.ExactLogStreamMatcher -->
  <class name="ExactLogStreamMatcher" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.LogStreamMatcher"/>
    <constructor name="ExactLogStreamMatcher" type="boolean, org.hamcrest.Matcher[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isMatched" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="accept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.test.log.TestLogRecord"/>
    </method>
    <method name="describeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.hamcrest.Description"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.ExactLogStreamMatcher -->
  <!-- start interface org.spf4j.test.log.ExceptionHandoverRegistry -->
  <interface name="ExceptionHandoverRegistry"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="add"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="handover" type="org.spf4j.test.log.UncaughtExceptionConsumer"/>
    </method>
    <method name="remove"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="handover" type="org.spf4j.test.log.UncaughtExceptionConsumer"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.ExceptionHandoverRegistry -->
  <!-- start class org.spf4j.test.log.GreedyLogPrinter -->
  <class name="GreedyLogPrinter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.LogHandler"/>
    <constructor name="GreedyLogPrinter" type="org.spf4j.test.log.LogPrinter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="handles" return="org.spf4j.test.log.LogHandler.Handling"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
    </method>
    <method name="handle" return="org.spf4j.test.log.TestLogRecord"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.test.log.TestLogRecord"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A Greedy log printer.
 will print all logs above a log level, BUT will mark printed logs as PRINTED or NO_NOT_PRINT otherwise,
 as such downstream printers will not print them.

 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.GreedyLogPrinter -->
  <!-- start interface org.spf4j.test.log.HandlerRegistration -->
  <interface name="HandlerRegistration"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.AutoCloseable"/>
    <method name="close"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Will unregister this log handler.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.HandlerRegistration -->
  <!-- start interface org.spf4j.test.log.LogAssert -->
  <interface name="LogAssert"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.ObservationAssert"/>
    <implements name="org.spf4j.test.log.HandlerRegistration"/>
    <doc>
    <![CDATA[Log behavior assert object.
 @author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogAssert -->
  <!-- start interface org.spf4j.test.log.LogCollection -->
  <interface name="LogCollection"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.HandlerRegistration"/>
    <implements name="java.util.function.Supplier"/>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogCollection -->
  <!-- start interface org.spf4j.test.log.LogConfig -->
  <interface name="LogConfig"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getLogConsumer" return="org.spf4j.test.log.LogConsumer"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="level" type="org.spf4j.log.Level"/>
    </method>
    <method name="add" return="org.spf4j.test.log.LogConfig"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.LogHandler"/>
      <param name="whereTo" type="java.util.function.ToIntFunction"/>
    </method>
    <method name="add" return="org.spf4j.test.log.LogConfig"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.LogHandler"/>
    </method>
    <method name="remove" return="org.spf4j.test.log.LogConfig"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.LogHandler"/>
    </method>
    <method name="minRootLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogConfig -->
  <!-- start interface org.spf4j.test.log.LogConsumer -->
  <interface name="LogConsumer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.function.Consumer"/>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogConsumer -->
  <!-- start interface org.spf4j.test.log.LogHandler -->
  <interface name="LogHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="handles" return="org.spf4j.test.log.LogHandler.Handling"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
      <doc>
      <![CDATA[find out if this handler should be used for the given log level.
 @param level the log level.
 @return Handling enum that, specifies what this handler does with these messages.]]>
      </doc>
    </method>
    <method name="handle" return="org.spf4j.test.log.TestLogRecord"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.test.log.TestLogRecord"/>
      <doc>
      <![CDATA[Handler handling method
 @param record the log record.
 @return return the log message potentially with an attachment,
 or null if the handler does not want to pass the message downstream.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogHandler -->
  <!-- start class org.spf4j.test.log.LogHandler.Handling -->
  <class name="LogHandler.Handling" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.test.log.LogHandler.Handling[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.test.log.LogHandler.Handling"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="HANDLE_PASS" type="org.spf4j.test.log.LogHandler.Handling"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="HANDLE_CONSUME" type="org.spf4j.test.log.LogHandler.Handling"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Will handle this message, and will consume it.]]>
      </doc>
    </field>
    <field name="NONE" type="org.spf4j.test.log.LogHandler.Handling"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Not handling these messages]]>
      </doc>
    </field>
  </class>
  <!-- end class org.spf4j.test.log.LogHandler.Handling -->
  <!-- start class org.spf4j.test.log.LogPrinter -->
  <class name="LogPrinter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.LogHandler"/>
    <method name="handles" return="org.spf4j.test.log.LogHandler.Handling"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="handle" return="org.spf4j.test.log.TestLogRecord"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.test.log.TestLogRecord"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="PRINTER" type="org.spf4j.log.LogPrinter"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A log handler that will print all logs that are not marked as printed above a log level.
 It passes through all logs to downstream handlers.
 Marks Log messages a PRINTED.
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.LogPrinter -->
  <!-- start interface org.spf4j.test.log.LogStreamMatcher -->
  <interface name="LogStreamMatcher"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.function.Consumer"/>
    <implements name="org.hamcrest.SelfDescribing"/>
    <method name="isMatched" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogStreamMatcher -->
  <!-- start interface org.spf4j.test.log.ObservationAssert -->
  <interface name="ObservationAssert"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="assertObservation"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Assert that a sequence of messages has not been seen.
 also unregisters this assertion handler.]]>
      </doc>
    </method>
    <method name="assertObservation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="time" type="long"/>
      <param name="tu" type="java.util.concurrent.TimeUnit"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.ObservationAssert -->
  <!-- start class org.spf4j.test.log.PrintConfig -->
  <class name="PrintConfig" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="PrintConfig" type="java.lang.String, org.spf4j.log.Level, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getCategory" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isGreedy" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMinLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.PrintConfig -->
  <!-- start class org.spf4j.test.log.PrintLogConfigsIO -->
  <class name="PrintLogConfigsIO" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="loadConfig" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="loadConfigFromResource" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="resourceName" type="java.lang.String"/>
    </method>
    <method name="loadConfig" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.PrintLogConfigsIO -->
  <!-- start class org.spf4j.test.log.TestLogger -->
  <class name="TestLogger" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.slf4j.Logger"/>
    <constructor name="TestLogger" type="java.lang.String, java.util.function.Supplier"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="log"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="args" type="java.lang.Object[]"/>
    </method>
    <method name="isTraceEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isTraceEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="argArray" type="java.lang.Object[]"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isDebugEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isDebugEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isInfoEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isInfoEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isWarnEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isWarnEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isErrorEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isErrorEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.TestLogger -->
  <!-- start class org.spf4j.test.log.TestLoggers -->
  <class name="TestLoggers" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.slf4j.ILoggerFactory"/>
    <method name="sys" return="org.spf4j.test.log.TestLoggers"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isInExpectingErrorCategories" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggername" type="java.lang.String"/>
    </method>
    <method name="getConfig" return="org.spf4j.test.log.LogConfig"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <doc>
      <![CDATA[Print logs above a category and log level.

 @param category the log category.
 @param level the log level.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="greedy" type="boolean"/>
    </method>
    <method name="intercept" return="org.spf4j.test.log.HandlerRegistration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.LogHandler"/>
      <doc>
      <![CDATA[Ability to intercept log messages logged under a category

 @param category the logger category name (a.b.c)
 @param handler the log handler to register.
 @return a registration handle, that you can use to unregister.]]>
      </doc>
    </method>
    <method name="interceptInContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.LogHandler"/>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="fromLevel" type="org.spf4j.log.Level"/>
      <param name="passThrough" type="boolean"/>
      <param name="collector" type="java.util.stream.Collector"/>
      <doc>
      <![CDATA[Collect a bunch of logs.
 @param <T> the type of object to collect into.
 @param category the log category (a.b.c)
 @param fromLevel from level to collect.
 @param passThrough pass the logs to lower category handlers or not.
 @param collector the collector to collect the logs.
 @return collected logs.]]>
      </doc>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="fromLevel" type="org.spf4j.log.Level"/>
      <param name="passThrough" type="boolean"/>
      <param name="matcher" type="org.hamcrest.Matcher"/>
      <param name="collector" type="java.util.stream.Collector"/>
      <doc>
      <![CDATA[Collect matching logs.
 matched logs are asserted.
 @return]]>
      </doc>
    </method>
    <method name="expect" return="org.spf4j.test.log.LogAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="fromLevel" type="org.spf4j.log.Level"/>
      <param name="passThrough" type="boolean"/>
      <param name="matcher" type="org.hamcrest.Matcher"/>
      <param name="matchedMatcher" type="org.hamcrest.Matcher"/>
      <doc>
      <![CDATA[expect a stream of logs filtered by a matcher, this strem will be matched against the matchedMatcher.
 @return]]>
      </doc>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="fromLevel" type="org.spf4j.log.Level"/>
      <param name="toLevel" type="org.spf4j.log.Level"/>
      <param name="passThrough" type="boolean"/>
      <param name="collector" type="java.util.stream.Collector"/>
      <doc>
      <![CDATA[Collect a bunch of logs.
 @param <T> the type of object to collect into.
 @param category the log category (a.b.c)
 @param fromLevel from level to collect.
 @param toLevel to level to collect.
 @param passThrough pass the logs to lower category handlers or not.
 @param collector the collector to collect the logs.
 @return collected logs.]]>
      </doc>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="fromLevel" type="org.spf4j.log.Level"/>
      <param name="toLevel" type="org.spf4j.log.Level"/>
      <param name="passThrough" type="boolean"/>
      <param name="collector" type="java.util.stream.Collector"/>
      <param name="whereTo" type="java.util.function.ToIntFunction"/>
    </method>
    <method name="interceptAllLevels" return="org.spf4j.test.log.HandlerRegistration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.AllLevelsLogHandler"/>
      <doc>
      <![CDATA[Convenience method for functional use.

 @param category the log category.
 @param handler a functional handler.
 @return a registration handle to allow you to undo the registration.]]>
      </doc>
    </method>
    <method name="ignore" return="org.spf4j.test.log.HandlerRegistration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="from" type="org.spf4j.log.Level"/>
      <param name="to" type="org.spf4j.log.Level"/>
      <doc>
      <![CDATA[all logs from category and specified levels will be ignored... (unless there are more specific handlers)
 @param category the log category.
 @param from from log level.
 @param to to log level.
 @return a registration handle to allow you to undo this filtering.]]>
      </doc>
    </method>
    <method name="expect" return="org.spf4j.test.log.LogAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="minimumLogLevel" type="org.spf4j.log.Level"/>
      <param name="matchers" type="org.hamcrest.Matcher[]"/>
      <doc>
      <![CDATA[Create an log expectation that can be asserted like:
 <code>
 LogAssert expect = TestLoggers.expect("org.spf4j.test", Level.ERROR, Matchers.hasProperty("format",
 Matchers.equalTo("Booo")));
 LOG.error("Booo", new RuntimeException());
 expect.assertObservation();
 </code>
 @param category the category under which we should expect these messages.
 @param minimumLogLevel minimum log level of expected log messages
 @param matchers a succession of LogMessages with each matching a Matcher is expected.
 @return an assertion handle.]]>
      </doc>
    </method>
    <method name="expect" return="org.spf4j.test.log.LogAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="minimumLogLevel" type="org.spf4j.log.Level"/>
      <param name="timeout" type="long"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <param name="matchers" type="org.hamcrest.Matcher[]"/>
    </method>
    <method name="dontExpect" return="org.spf4j.test.log.LogAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="minimumLogLevel" type="org.spf4j.log.Level"/>
      <param name="matchers" type="org.hamcrest.Matcher[]"/>
      <doc>
      <![CDATA[the opposite of expect.
 @param category the category under which we should expect these messages.
 @param minimumLogLevel minimum log level of expected log messages
 @param matchers a succession of LogMessages with each matching a Matcher is NOT expected.
 @return an assertion handle.]]>
      </doc>
    </method>
    <method name="expect" return="org.spf4j.test.log.LogAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="minimumLogLevel" type="org.spf4j.log.Level"/>
      <param name="nrTimes" type="int"/>
      <param name="matchers" type="org.hamcrest.Matcher[]"/>
      <doc>
      <![CDATA[Ability to assert is you expect a sequence of logs to be repeated.

 @param category the log category (a.b.c)
 @param minimumLogLevel the minimum log level of expected messages.
 @param nrTimes number of time the sequence should appear.
 @param matchers the sequence of matchers.
 @return the assertion handle.]]>
      </doc>
    </method>
    <method name="expect" return="org.spf4j.test.log.LogAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="minimumLogLevel" type="org.spf4j.log.Level"/>
      <param name="nrTimes" type="int"/>
      <param name="timeout" type="long"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <param name="matchers" type="org.hamcrest.Matcher[]"/>
    </method>
    <method name="expectUncaughtException" return="org.spf4j.test.log.LogAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeout" type="long"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <param name="matcher" type="org.hamcrest.Matcher"/>
      <doc>
      <![CDATA[Assert uncaught exceptions.(from threads)
 @param timeout timeout to wait for this assertion. from the point in time of assertion invocation.
 @param unit
 @param matcher the exception matcher.
 @return the assertion handle.]]>
      </doc>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="minimumLogLevel" type="org.spf4j.log.Level"/>
      <param name="maxNrLogs" type="int"/>
      <param name="collectPrinted" type="boolean"/>
      <doc>
      <![CDATA[Collect up to a number of log messages.
 @param minimumLogLevel the minimum log level of the messages.
 @param maxNrLogs the max number of messages to collect.
 @param collectPrinted collect messages that have been printed or not.
 @return the collection of messages.]]>
      </doc>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="minimumLogLevel" type="org.spf4j.log.Level"/>
      <param name="maxNrLogs" type="int"/>
      <param name="collectPrinted" type="boolean"/>
      <param name="include" type="java.lang.String"/>
      <param name="excludeCategories" type="java.lang.String[]"/>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="minimumLogLevel" type="org.spf4j.log.Level"/>
      <param name="maxNrLogs" type="int"/>
      <param name="collectPrinted" type="boolean"/>
      <param name="collectorFilter" type="java.util.function.Predicate"/>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="minimumLogLevel" type="org.spf4j.log.Level"/>
      <param name="collectPrinted" type="boolean"/>
      <param name="collectorFilter" type="java.util.function.Predicate"/>
      <param name="pcollector" type="java.util.stream.Collector"/>
    </method>
    <method name="getLogger" return="org.slf4j.Logger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Return an appropriate {@link SimpleLogger} instance by name.]]>
      </doc>
    </method>
    <method name="getJulGlobal" return="java.util.logging.Logger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getJulRoot" return="java.util.logging.Logger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="EXECUTED_FROM_IDE" type="boolean"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.TestLoggers -->
  <!-- start interface org.spf4j.test.log.TestLogRecord -->
  <interface name="TestLogRecord"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.log.Slf4jLogRecord"/>
    <method name="getExtraThrowableChain" return="java.util.List"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.TestLogRecord -->
  <!-- start class org.spf4j.test.log.TestLogRecordImpl -->
  <class name="TestLogRecordImpl" extends="org.spf4j.log.Slf4jLogRecordImpl"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.TestLogRecord"/>
    <constructor name="TestLogRecordImpl" type="java.lang.String, org.spf4j.log.Level, java.lang.String, java.lang.Object[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TestLogRecordImpl" type="java.lang.String, org.spf4j.log.Level, org.slf4j.Marker, java.lang.String, java.lang.Object[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getExtraThrowableChain" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.TestLogRecordImpl -->
  <!-- start class org.spf4j.test.log.TestUtils -->
  <class name="TestUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="isExecutedDuringMvnRelease" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isExecutedInCI" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isExecutedInTravis" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isExecutedFromNetbeans" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isExecutedFromIntelij" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isExecutedFromEclipse" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isExecutedFromIDE" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Supporting netbeans only at this time.
 For other IDEs you need to configure them to pass the spf4j.execFromIDE property.
 @return]]>
      </doc>
    </method>
    <method name="isExecutedWithDebuggerAgent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.TestUtils -->
  <!-- start interface org.spf4j.test.log.UncaughtExceptionConsumer -->
  <interface name="UncaughtExceptionConsumer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="offer" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exDetail" type="org.spf4j.test.log.UncaughtExceptionDetail"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.UncaughtExceptionConsumer -->
  <!-- start class org.spf4j.test.log.UncaughtExceptionDetail -->
  <class name="UncaughtExceptionDetail" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="UncaughtExceptionDetail" type="java.lang.Thread, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getThread" return="java.lang.Thread"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getThrowable" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasThrowable" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tMatcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasThread" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tMatcher" type="org.hamcrest.Matcher"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.UncaughtExceptionDetail -->
  <!-- start class org.spf4j.test.log.ValidationUtils -->
  <class name="ValidationUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="validateLogger"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="log" type="org.slf4j.Logger"/>
    </method>
    <doc>
    <![CDATA[Utilities to validate correct Test logger framework setup.

 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.ValidationUtils -->
</package>
<package name="org.spf4j.base">
  <!-- start class org.spf4j.base.AppendableUtils -->
  <class name="AppendableUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="escapeJsonString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="toEscape" type="java.lang.CharSequence"/>
      <param name="jsonString" type="java.lang.StringBuilder"/>
      <doc>
      <![CDATA[Utility method to escape java strings to json strings.

 @param toEscape - the java string to escape.
 @param jsonString - the destination json String builder.]]>
      </doc>
    </method>
    <method name="escapeJsonString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="toEscape" type="java.lang.CharSequence"/>
      <param name="jsonString" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendJsonStringEscapedChar"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <param name="jsonString" type="java.lang.StringBuilder"/>
    </method>
    <method name="appendJsonStringEscapedChar"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <param name="jsonString" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendUnsignedStringPadded"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="nr" type="int"/>
      <param name="shift" type="int"/>
      <param name="padTo" type="int"/>
    </method>
    <method name="appendUnsignedStringPadded"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.Appendable"/>
      <param name="nr" type="int"/>
      <param name="shift" type="int"/>
      <param name="padTo" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendUnsignedString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="nr" type="long"/>
      <param name="shift" type="int"/>
    </method>
    <method name="appendUnsignedString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="nr" type="int"/>
      <param name="shift" type="int"/>
    </method>
    <method name="appendSpaces"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="nrSpaces" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendSpaces"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.StringBuilder"/>
      <param name="nrSpaces" type="int"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.AppendableUtils -->
  <!-- start class org.spf4j.base.Arrays -->
  <class name="Arrays" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getColumnAsDoubles" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="long[][]"/>
      <param name="columnNumber" type="int"/>
    </method>
    <method name="getColumn" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="double[][]"/>
      <param name="columnNumber" type="int"/>
    </method>
    <method name="toDoubleArray" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="larr" type="long[]"/>
    </method>
    <method name="toObjectArray" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="larr" type="long[]"/>
    </method>
    <method name="divide" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arr1" type="double[]"/>
      <param name="arr2" type="double[]"/>
    </method>
    <method name="deepEquals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a1" type="java.lang.Object[]"/>
      <param name="a2" type="java.lang.Object[]"/>
      <param name="starting" type="int"/>
    </method>
    <method name="deepEquals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a1" type="java.lang.Object[]"/>
      <param name="a2" type="java.lang.Object[]"/>
      <param name="starting" type="int"/>
      <param name="ending" type="int"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a" type="byte[]"/>
      <param name="b" type="byte[]"/>
      <param name="a1" type="int"/>
      <param name="b1" type="int"/>
      <param name="length" type="int"/>
    </method>
    <method name="search" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="char[]"/>
      <param name="c" type="char"/>
    </method>
    <method name="moveOfRange" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="original" type="java.lang.Object[]"/>
      <param name="from" type="int"/>
      <param name="to" type="int"/>
    </method>
    <method name="append" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="java.lang.Object[]"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="preppend" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="java.lang.Object[]"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="preppend" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="java.lang.Object[]"/>
      <param name="values" type="java.lang.Object[]"/>
    </method>
    <method name="append" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="java.lang.Object[]"/>
      <param name="values" type="java.lang.Object[]"/>
    </method>
    <method name="concat" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arrays" type="java.lang.Object[][]"/>
    </method>
    <method name="concat" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arrays" type="byte[][]"/>
    </method>
    <method name="indexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="java.lang.Object[]"/>
      <param name="content" type="java.lang.Object"/>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="byte[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="byte"/>
      <doc>
      <![CDATA[implementation which significantly faster for large arrays (> 500).]]>
      </doc>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="java.lang.Object[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[implementation which is significantly faster for large arrays (> 500).
 Bechmark results:
 Benchmark                                      Mode Cnt Score            Error           Units
 ArraysBenchmark.testSpf4jFillSmall(10)         thrpt 10 1048892782.375   # 29976629.818  ops/s
 ArraysBenchmark.testjdkFillSmall(10)           thrpt 10 1046330835.509   # 47577260.717  ops/s
 ArraysBenchmark.testSpf4jFillMedium(100)       thrpt 10 123724912.161    # 4049077.779   ops/s
 ArraysBenchmark.testjdkFillMedium(100)         thrpt 10 124143139.498    # 2044760.427   ops/s
 ArraysBenchmark.testSpf4jFillLarge(1000)       thrpt 10 20335282.192     # 592359.181    ops/s
 ArraysBenchmark.testjdkFillLarge(1000)         thrpt 10 12661975.522     # 170457.046    ops/s
 ArraysBenchmark.testSpf4jFillVeryLarge(10000)  thrpt 10 2767351.098      # 74871.147     ops/s
 ArraysBenchmark.testjdkFillVeryLarge(10000     thrpt 10 1045099.669      # 30044.505     ops/s]]>
      </doc>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="char[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="char"/>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="int[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="int"/>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="long[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="long"/>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="double[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="double"/>
    </method>
    <method name="charsToBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chars" type="char[]"/>
    </method>
    <method name="bytesToChars" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bytes" type="byte[]"/>
    </method>
    <field name="EMPTY_OBJ_ARRAY" type="java.lang.Object[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_ANNOT_ARRAY" type="java.lang.annotation.Annotation[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_CLASS_ARRAY" type="java.lang.Class[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_STRING_ARRAY" type="java.lang.String[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_BYTE_ARRAY" type="byte[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_CHAR_ARRAY" type="char[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_BOOLEAN_ARRAY" type="boolean[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_LONG_ARRAY" type="long[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_INT_ARRAY" type="int[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Array utilities.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Arrays -->
  <!-- start class org.spf4j.base.BasicExecutionContext -->
  <class name="BasicExecutionContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.ExecutionContext"/>
    <constructor name="BasicExecutionContext" type="java.lang.String, java.lang.CharSequence, org.spf4j.base.ExecutionContext, org.spf4j.base.ExecutionContext.Relation, long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDeadlineNanos" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStartTimeNanos" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="put" return="java.lang.Object"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.spf4j.base.ExecutionContext.Tag"/>
      <param name="data" type="java.lang.Object"/>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.spf4j.base.ExecutionContext.Tag"/>
    </method>
    <method name="getContextAndValue" return="org.spf4j.base.ContextValue"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.spf4j.base.ExecutionContext.Tag"/>
    </method>
    <method name="getLocal" return="java.lang.Object"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.spf4j.base.ExecutionContext.Tag"/>
    </method>
    <method name="compute" return="java.lang.Object"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.spf4j.base.ExecutionContext.Tag"/>
      <param name="compute" type="java.util.function.BiFunction"/>
    </method>
    <method name="getSource" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Close might be overridable to close any additional stuff added in the extended class.]]>
      </doc>
    </method>
    <method name="detach"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isAttached" return="boolean"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="attach"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Overwrite as needed for debug string.]]>
      </doc>
    </method>
    <method name="writeJsonTo"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appendable" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Overwrite this method to change default json format.
 @param appendable]]>
      </doc>
    </method>
    <method name="addLog"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="log" type="org.spf4j.log.Slf4jLogRecord"/>
    </method>
    <method name="addCloseable"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="closeable" type="java.lang.AutoCloseable"/>
    </method>
    <method name="addLogs"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="pLogs" type="java.util.Collection"/>
    </method>
    <method name="streamLogs"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.util.function.Consumer"/>
    </method>
    <method name="streamLogs"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.util.function.Consumer"/>
      <param name="maxNr" type="int"/>
    </method>
    <method name="getContextMinLogLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggerName" type="java.lang.String"/>
      <doc>
      <![CDATA[Overwrite for more configurable implementation.
 @param loggerName
 @return]]>
      </doc>
    </method>
    <method name="getBackendMinLogLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggerName" type="java.lang.String"/>
      <doc>
      <![CDATA[Overwrite for more configurable implementation.
 @param loggerName
 @return]]>
      </doc>
    </method>
    <method name="setBackendMinLogLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggerName" type="java.lang.String"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <doc>
      <![CDATA[Overwrite for more configurable implementation.
 @param loggerName
 @return]]>
      </doc>
    </method>
    <method name="getId" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="nextChildId" return="long"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sample" type="java.lang.StackTraceElement[]"/>
      <doc>
      <![CDATA[Add a sample to this execution context.
 this implementation does not retain them.
 @param sample]]>
      </doc>
    </method>
    <method name="getAndClearStackSamples" return="org.spf4j.base.StackSamples"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[get the collected stack samples.
 This implementation will always return null.
 overwrite in a context that supports this functionality.
 @return]]>
      </doc>
    </method>
    <method name="getStackSamples" return="org.spf4j.base.StackSamples"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[overwrite in a context that supports this functionality.
 @return a copy of the collected samples.]]>
      </doc>
    </method>
    <method name="isClosed" return="boolean"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRelationToSource" return="org.spf4j.base.ExecutionContext.Relation"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="samples" type="org.spf4j.base.StackSamples"/>
      <doc>
      <![CDATA[add a bunch of samples to this context.
 @param samples]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The simplest execution context possible.

 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.BasicExecutionContext -->
  <!-- start class org.spf4j.base.Callables -->
  <class name="Callables" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="executeWithRetry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use RetryPolicy">
      <param name="what" type="org.spf4j.base.Callables.TimeoutCallable"/>
      <param name="nrImmediateRetries" type="int"/>
      <param name="maxRetryWaitMillis" type="int"/>
      <param name="exceptionClass" type="java.lang.Class"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[@deprecated use RetryPolicy]]>
      </doc>
    </method>
    <method name="executeWithRetry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use RetryPolicy">
      <param name="what" type="org.spf4j.base.Callables.TimeoutCallable"/>
      <param name="nrImmediateRetries" type="int"/>
      <param name="maxRetryWaitMillis" type="int"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[@deprecated use RetryPolicy]]>
      </doc>
    </method>
    <method name="executeWithRetry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use RetryPolicy">
      <param name="what" type="org.spf4j.base.Callables.TimeoutCallable"/>
      <param name="nrImmediateRetries" type="int"/>
      <param name="maxRetryWaitMillis" type="int"/>
      <param name="retryOnException" type="org.spf4j.base.Callables.AdvancedRetryPredicate"/>
      <param name="exceptionClass" type="java.lang.Class"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[@deprecated use RetryPolicy]]>
      </doc>
    </method>
    <method name="executeWithRetry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use RetryPolicy">
      <param name="what" type="org.spf4j.base.Callables.TimeoutCallable"/>
      <param name="nrImmediateRetries" type="int"/>
      <param name="maxRetryWaitMillis" type="int"/>
      <param name="retryOnException" type="org.spf4j.base.Callables.AdvancedRetryPredicate"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[@deprecated use RetryPolicy]]>
      </doc>
    </method>
    <method name="executeWithRetry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use RetryPolicy">
      <param name="what" type="org.spf4j.base.Callables.TimeoutCallable"/>
      <param name="nrImmediateRetries" type="int"/>
      <param name="maxWaitMillis" type="int"/>
      <param name="retryOnReturnVal" type="org.spf4j.base.Callables.TimeoutRetryPredicate"/>
      <param name="retryOnException" type="org.spf4j.base.Callables.AdvancedRetryPredicate"/>
      <param name="exceptionClass" type="java.lang.Class"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[After the immediate retries are done, delayed retry with randomized Fibonacci values up to the specified max is
 executed.

 @param <T> - the type returned by the Callable that is retried.
 @param <EX> - the Exception thrown by the retried callable.
 @param what - the callable to retry.
 @param nrImmediateRetries - the number of immediate retries.
 @param maxWaitMillis - maximum wait time in between retries.
 @param retryOnReturnVal - predicate to control retry on return value;
 @param retryOnException - predicate to retry on thrown exception.
 @return the result of the callable.
 @throws java.lang.InterruptedException - thrown if interrupted.
 @throws EX - the exception declared to be thrown by the callable.
 @deprecated use RetryPolicy]]>
      </doc>
    </method>
    <method name="rootClass" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use RetryPolicy">
      <param name="f" type="java.lang.Exception"/>
      <doc>
      <![CDATA[@deprecated use RetryPolicy]]>
      </doc>
    </method>
    <method name="executeWithRetry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use RetryPolicy">
      <param name="what" type="org.spf4j.base.Callables.TimeoutCallable"/>
      <param name="retryOnReturnVal" type="org.spf4j.base.Callables.TimeoutRetryPredicate"/>
      <param name="retryOnException" type="org.spf4j.base.Callables.TimeoutRetryPredicate"/>
      <param name="exceptionClass" type="java.lang.Class"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[@deprecated use RetryPolicy]]>
      </doc>
    </method>
    <method name="executeWithRetry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use RetryPolicy">
      <param name="what" type="org.spf4j.base.Callables.TimeoutCallable"/>
      <param name="retryOnException" type="org.spf4j.base.Callables.TimeoutRetryPredicate"/>
      <param name="exceptionClass" type="java.lang.Class"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[@deprecated use RetryPolicy]]>
      </doc>
    </method>
    <method name="executeWithRetry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use RetryPolicy">
      <param name="pwhat" type="org.spf4j.base.Callables.CheckedCallable"/>
      <param name="retryOnReturnVal" type="org.spf4j.base.Callables.RetryPredicate"/>
      <param name="retryOnException" type="org.spf4j.base.Callables.RetryPredicate"/>
      <param name="exceptionClass" type="java.lang.Class"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[Naive implementation of execution with retry logic. a callable will be executed and retry attempted in current
 thread if the result and exception predicates. before retry, a callable can be executed that can abort the retry
 and finish the function with the previous result.

 @param <T> - The type of callable to retry result;
 @param <EX> - the exception thrown by the callable to retry.
 @param pwhat - the callable to retry.
 @param retryOnReturnVal - the predicate to control retry on return value.
 @param retryOnException - the predicate to return on retry value.
 @return the result of the retried callable if successful.
 @throws java.lang.InterruptedException - thrown if retry interrupted.
 @throws EX - the exception thrown by callable.
 @deprecated use RetryPolicy]]>
      </doc>
    </method>
    <method name="synchronize" return="java.util.concurrent.Callable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.concurrent.Callable"/>
    </method>
    <method name="withName" return="java.util.concurrent.Callable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.concurrent.Callable"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[This is a duplicate of guava Callables.threadRenaming ... will have to review for deprecation/removal.]]>
      </doc>
    </method>
    <method name="memorized" return="org.spf4j.base.MemorizedCallable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.util.concurrent.Callable"/>
    </method>
    <method name="constant" return="java.util.concurrent.Callable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="from" return="java.util.concurrent.Callable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Runnable"/>
    </method>
    <field name="RETRY_FOR_NULL_RESULT" type="org.spf4j.base.Callables.SimpleRetryPredicate"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="use RetryPolicy">
      <doc>
      <![CDATA[@deprecated use RetryPolicy]]>
      </doc>
    </field>
    <field name="DEFAULT_EXCEPTION_RETRY" type="org.spf4j.base.Callables.AdvancedRetryPredicate"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="use RetryPolicy">
      <doc>
      <![CDATA[@deprecated use RetryPolicy]]>
      </doc>
    </field>
    <field name="DEFAULT_EXCEPTION_RETRY_PREDICATE" type="java.util.function.Predicate"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="use RetryPolicy">
      <doc>
      <![CDATA[@deprecated use RetryPolicy]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utility class for executing stuff with retry logic.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Callables -->
  <!-- start class org.spf4j.base.Callables.AdvancedAction -->
  <class name="Callables.AdvancedAction" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="use RetryPolicy">
    <method name="values" return="org.spf4j.base.Callables.AdvancedAction[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.base.Callables.AdvancedAction"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="RETRY" type="org.spf4j.base.Callables.AdvancedAction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETRY_IMMEDIATE" type="org.spf4j.base.Callables.AdvancedAction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RETRY_DELAYED" type="org.spf4j.base.Callables.AdvancedAction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ABORT" type="org.spf4j.base.Callables.AdvancedAction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@deprecated use RetryPolicy]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Callables.AdvancedAction -->
  <!-- start interface org.spf4j.base.Callables.AdvancedRetryPredicate -->
  <interface name="Callables.AdvancedRetryPredicate"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="use RetryPolicy">
    <method name="apply" return="org.spf4j.base.Callables.AdvancedAction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <param name="deadline" type="long"/>
    </method>
    <method name="apply" return="org.spf4j.base.Callables.AdvancedAction"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <field name="NO_RETRY" type="org.spf4j.base.Callables.AdvancedRetryPredicate"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@deprecated use RetryPolicy]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.Callables.AdvancedRetryPredicate -->
  <!-- start interface org.spf4j.base.Callables.CheckedCallable -->
  <interface name="Callables.CheckedCallable"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.concurrent.Callable"/>
    <method name="call" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[the method that is retried.

 @return
 @throws EX
 @throws InterruptedException
 @throws java.util.concurrent.TimeoutException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A callable that will be retried.

 @param <T> - the type of the object returned by this callable.
 @param <EX> - the exception type returned by this callable.]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.Callables.CheckedCallable -->
  <!-- start class org.spf4j.base.Callables.FibonacciBackoffRetryPredicate -->
  <class name="Callables.FibonacciBackoffRetryPredicate" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="use RetryPolicy">
    <implements name="org.spf4j.base.Callables.RetryPredicate"/>
    <constructor name="FibonacciBackoffRetryPredicate" type="org.spf4j.base.Callables.AdvancedRetryPredicate, int, long, long, java.util.function.Function, long, java.util.function.LongSupplier, java.util.concurrent.TimeUnit"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getDecision" return="org.spf4j.base.Callables.RetryDecision"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <param name="callable" type="java.util.concurrent.Callable"/>
    </method>
    <doc>
    <![CDATA[@deprecated use RetryPolicy]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Callables.FibonacciBackoffRetryPredicate -->
  <!-- start class org.spf4j.base.Callables.RetryDecision -->
  <class name="Callables.RetryDecision" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="use RetryPolicy">
    <method name="abort" return="org.spf4j.base.Callables.RetryDecision"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exception" type="java.lang.Exception"/>
    </method>
    <method name="retry" return="org.spf4j.base.Callables.RetryDecision"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retryMillis" type="long"/>
      <param name="callable" type="java.util.concurrent.Callable"/>
    </method>
    <method name="abort" return="org.spf4j.base.Callables.RetryDecision"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDecisionType" return="org.spf4j.base.Callables.RetryDecision.Type"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDelayMillis" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getException" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNewCallable" return="java.util.concurrent.Callable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@deprecated use RetryPolicy]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Callables.RetryDecision -->
  <!-- start class org.spf4j.base.Callables.RetryDecision.Type -->
  <class name="Callables.RetryDecision.Type" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.base.Callables.RetryDecision.Type[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.base.Callables.RetryDecision.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="Abort" type="org.spf4j.base.Callables.RetryDecision.Type"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="Retry" type="org.spf4j.base.Callables.RetryDecision.Type"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.base.Callables.RetryDecision.Type -->
  <!-- start interface org.spf4j.base.Callables.RetryPredicate -->
  <interface name="Callables.RetryPredicate"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="use RetryPolicy">
    <method name="getDecision" return="org.spf4j.base.Callables.RetryDecision"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <param name="callable" type="java.util.concurrent.Callable"/>
      <doc>
      <![CDATA[the number or millis of delay until the next retry, or -1 for abort.

 @param value
 @return]]>
      </doc>
    </method>
    <field name="NORETRY_DELAY_PREDICATE" type="org.spf4j.base.Callables.RetryPredicate"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@deprecated use RetryPolicy]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.Callables.RetryPredicate -->
  <!-- start class org.spf4j.base.Callables.SimpleAction -->
  <class name="Callables.SimpleAction" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="use RetryPolicy">
    <method name="values" return="org.spf4j.base.Callables.SimpleAction[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.base.Callables.SimpleAction"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="RETRY" type="org.spf4j.base.Callables.SimpleAction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ABORT" type="org.spf4j.base.Callables.SimpleAction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@deprecated use RetryPolicy]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Callables.SimpleAction -->
  <!-- start interface org.spf4j.base.Callables.SimpleRetryPredicate -->
  <interface name="Callables.SimpleRetryPredicate"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="use RetryPolicy">
    <method name="apply" return="org.spf4j.base.Callables.SimpleAction"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <doc>
    <![CDATA[@deprecated use RetryPolicy]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.Callables.SimpleRetryPredicate -->
  <!-- start class org.spf4j.base.Callables.TimeoutCallable -->
  <class name="Callables.TimeoutCallable" extends="java.lang.Object"
    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="use RetryPolicy">
    <implements name="org.spf4j.base.Callables.CheckedCallable"/>
    <constructor name="TimeoutCallable" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TimeoutCallable" type="long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="call" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="call" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deadline" type="long"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[@param deadline millis since epoch.]]>
      </doc>
    </method>
    <method name="getDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@deprecated use RetryPolicy]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Callables.TimeoutCallable -->
  <!-- start interface org.spf4j.base.Callables.TimeoutRetryPredicate -->
  <interface name="Callables.TimeoutRetryPredicate"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="use RetryPolicy">
    <method name="getDecision" return="org.spf4j.base.Callables.RetryDecision"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <param name="deadlineMillis" type="long"/>
      <param name="what" type="java.util.concurrent.Callable"/>
    </method>
    <field name="NORETRY_FOR_RESULT" type="org.spf4j.base.Callables.TimeoutRetryPredicate"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@deprecated use RetryPolicy]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.Callables.TimeoutRetryPredicate -->
  <!-- start class org.spf4j.base.CharSequences -->
  <class name="CharSequences" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="distance" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s1" type="java.lang.CharSequence"/>
      <param name="s2" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[function that calculates the number of operations that are needed to transform s1 into s2. operations are: char
 add, char delete, char modify See https://en.wikipedia.org/wiki/Levenshtein_distance for more info.

 @param s1
 @param s2
 @return the number of operations required to transform s1 into s2]]>
      </doc>
    </method>
    <method name="distance" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c1" type="char"/>
      <param name="c2" type="char"/>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use compare.">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="t" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[compare s to t.

 @param s
 @param t
 @return
 @deprecated use compare.]]>
      </doc>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="t" type="java.lang.CharSequence"/>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="sLength" type="int"/>
      <param name="t" type="java.lang.CharSequence"/>
      <param name="tLength" type="int"/>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="sFrom" type="int"/>
      <param name="sLength" type="int"/>
      <param name="t" type="java.lang.CharSequence"/>
      <param name="tFrom" type="int"/>
      <param name="tLength" type="int"/>
      <doc>
      <![CDATA[compare 2 CharSequence fragments.

 @param s the charsequence to compare
 @param sFrom the index for the first chars to compare.
 @param sLength the number of characters to compare.
 @param t the charsequence to compare to
 @param tFrom the index for the first character to compare to.
 @param tLength the number of characters to compare to.
 @return]]>
      </doc>
    </method>
    <method name="equalsNullables" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="t" type="java.lang.CharSequence"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="t" type="java.lang.CharSequence"/>
    </method>
    <method name="hashcode" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
    </method>
    <method name="subSequence" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="seq" type="java.lang.CharSequence"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
    </method>
    <method name="startsWith" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sequence" type="java.lang.CharSequence"/>
      <param name="prefix" type="java.lang.CharSequence"/>
      <param name="toffset" type="int"/>
    </method>
    <method name="endsWith" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qc" type="java.lang.CharSequence"/>
      <param name="with" type="java.lang.CharSequence"/>
    </method>
    <method name="lineNumbered" return="java.lang.Appendable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startLineNr" type="int"/>
      <param name="appendable" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="lineNumbered" return="java.lang.Appendable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startLineNr" type="int"/>
      <param name="appendable" type="java.lang.Appendable"/>
      <param name="ia" type="org.spf4j.base.IntAppender"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toLineNumbered" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startLineNr" type="int"/>
      <param name="source" type="java.lang.CharSequence"/>
    </method>
    <method name="toLineNumbered" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startLineNr" type="int"/>
      <param name="source" type="java.lang.CharSequence"/>
      <param name="ia" type="org.spf4j.base.IntAppender"/>
    </method>
    <method name="parseInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[A more flexible version of Integer.parseInt.

 @see java.lang.Integer.parseInt]]>
      </doc>
    </method>
    <method name="parseInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="radix" type="int"/>
      <doc>
      <![CDATA[A more flexible version of Integer.parseInt.

 @see java.lang.Integer.parseInt]]>
      </doc>
    </method>
    <method name="parseUnsignedInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="radix" type="int"/>
      <param name="idxFrom" type="int"/>
      <doc>
      <![CDATA[will parse a unsigned integer from a char sequence from idxFrom.
 @param cs
 @param radix
 @param idxFrom
 @return]]>
      </doc>
    </method>
    <method name="parseUnsignedInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="radix" type="int"/>
      <param name="idxFrom" type="int"/>
      <param name="idxTo" type="int"/>
      <doc>
      <![CDATA[will parse a unsigned integer from a char sequence from idxFrom.
 @param cs
 @param radix
 @param idxFrom
 @param idxTo
 @return]]>
      </doc>
    </method>
    <method name="parseUnsignedLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="radix" type="int"/>
      <param name="idxFrom" type="int"/>
    </method>
    <method name="parseUnsignedLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="radix" type="int"/>
      <param name="idxFrom" type="int"/>
      <param name="idxTo" type="int"/>
      <param name="strict" type="boolean"/>
    </method>
    <method name="parseLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[A more flexible version of Long.parseLong.

 @see java.lang.Long.parseLong]]>
      </doc>
    </method>
    <method name="parseLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="radix" type="int"/>
      <doc>
      <![CDATA[A more flexible version of Long.parseLong.

 @see java.lang.Long.parseLong]]>
      </doc>
    </method>
    <method name="containsAnyChar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.CharSequence"/>
      <param name="chars" type="char[]"/>
    </method>
    <method name="containsAnyChar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.CharSequence"/>
      <param name="start" type="int"/>
      <param name="end" type="int"/>
      <param name="chars" type="char[]"/>
    </method>
    <method name="isValidJavaId" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.CharSequence"/>
    </method>
    <method name="isValidFileName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.CharSequence"/>
    </method>
    <method name="validatedFileName" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.CharSequence"/>
    </method>
    <method name="regionMatches" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.CharSequence"/>
      <param name="toffset" type="int"/>
      <param name="other" type="java.lang.CharSequence"/>
      <param name="ooffset" type="int"/>
      <param name="plen" type="int"/>
      <doc>
      <![CDATA[Equivalent to String.regionMatches.]]>
      </doc>
    </method>
    <method name="regionMatchesIgnoreCase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ta" type="java.lang.CharSequence"/>
      <param name="toffset" type="int"/>
      <param name="pa" type="java.lang.CharSequence"/>
      <param name="ooffset" type="int"/>
      <param name="plen" type="int"/>
      <doc>
      <![CDATA[Equivalent/based on to String.regionMatches.]]>
      </doc>
    </method>
    <method name="match" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="wildcard" type="java.lang.CharSequence"/>
      <param name="cs2Match" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[regular wildcard matcher. * matches any number of consecutive characters. ? matches any single character.

 @param wildcard
 @param cs2Match
 @return]]>
      </doc>
    </method>
    <method name="getJavaRegexpStr" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="wildcard" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[Transform a wildcard expression 2 a java regular expression. * matches any number of consecutive characters. ?
 matches any single character.

 @param wildcard
 @return]]>
      </doc>
    </method>
    <method name="indexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="from" type="int"/>
      <param name="to" type="int"/>
      <param name="c" type="char"/>
    </method>
    <method name="indexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="from" type="int"/>
      <param name="to" type="int"/>
      <param name="cp" type="java.util.function.IntPredicate"/>
    </method>
    <method name="indexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="from" type="int"/>
      <param name="to" type="int"/>
      <param name="chars" type="char[]"/>
    </method>
    <method name="containsIgnoreCase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.CharSequence"/>
      <param name="searchStr" type="java.lang.CharSequence"/>
    </method>
    <method name="lastIndexOfIgnoreCase" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.CharSequence"/>
      <param name="searchStr" type="java.lang.CharSequence"/>
    </method>
    <method name="indexOfIgnoreCase" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.CharSequence"/>
      <param name="searchStr" type="java.lang.CharSequence"/>
      <param name="idxStart" type="int"/>
    </method>
    <method name="countIgnoreCase" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.CharSequence"/>
      <param name="searchStr" type="java.lang.CharSequence"/>
    </method>
    <method name="reader" return="java.io.Reader"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
    </method>
    <doc>
    <![CDATA[Special methods to use for character sequences...

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.CharSequences -->
  <!-- start class org.spf4j.base.CloneFailedException -->
  <class name="CloneFailedException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CloneFailedException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CloneFailedException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CloneFailedException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CloneFailedException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.CloneFailedException -->
  <!-- start interface org.spf4j.base.CloseableIterable -->
  <interface name="CloseableIterable"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Closeable"/>
    <implements name="java.lang.Iterable"/>
    <method name="close"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="from" return="org.spf4j.base.CloseableIterable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="iterator" type="org.spf4j.base.CloseableIterator"/>
    </method>
    <method name="from" return="org.spf4j.base.CloseableIterable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="it" type="java.lang.Iterable"/>
    </method>
    <method name="from" return="org.spf4j.base.CloseableIterable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="it" type="java.lang.Iterable"/>
      <param name="close" type="java.lang.AutoCloseable"/>
    </method>
    <method name="toStream" return="java.util.stream.Stream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toStream" return="java.util.stream.Stream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parallel" type="boolean"/>
    </method>
    <doc>
    <![CDATA[need to extend java.io.Closeable so that jaxrs does not interfere.
 @author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.CloseableIterable -->
  <!-- start interface org.spf4j.base.CloseableIterator -->
  <interface name="CloseableIterator"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.Iterator"/>
    <implements name="java.io.Closeable"/>
    <method name="close"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="from" return="org.spf4j.base.CloseableIterator"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="it" type="java.util.Iterator"/>
    </method>
    <method name="from" return="org.spf4j.base.CloseableIterator"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="it" type="java.util.Iterator"/>
      <param name="close" type="java.lang.AutoCloseable"/>
    </method>
    <method name="toStreamRemaining" return="java.util.stream.Stream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toStreamRemaining" return="java.util.stream.Stream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parallel" type="boolean"/>
    </method>
    <doc>
    <![CDATA[need to extend java.io.Closeable so that jaxrs does not interfere.
 @author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.CloseableIterator -->
  <!-- start class org.spf4j.base.Closeables -->
  <class name="Closeables" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="closeAll" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="closeables" type="java.lang.AutoCloseable[]"/>
    </method>
    <method name="closeAll" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="propagate" type="java.lang.Exception"/>
      <param name="closeables" type="java.lang.AutoCloseable[]"/>
    </method>
    <method name="closeAll" return="java.io.IOException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="closeables" type="java.io.Closeable[]"/>
    </method>
    <method name="closeAll" return="java.io.IOException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="propagate" type="java.lang.Exception"/>
      <param name="closeables" type="java.io.Closeable[]"/>
    </method>
    <method name="closeAll" return="java.io.IOException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="closeables" type="java.io.Closeable[]"/>
      <param name="from" type="int"/>
      <param name="to" type="int"/>
    </method>
    <method name="closeAll" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="closeables" type="java.lang.Iterable"/>
    </method>
    <method name="closeAll" return="java.lang.Exception"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="propagate" type="java.lang.Exception"/>
      <param name="closeables" type="java.lang.Iterable"/>
    </method>
    <method name="closeSelectorChannels" return="java.io.IOException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="selector" type="java.nio.channels.Selector"/>
    </method>
    <method name="closeSelectorChannels" return="java.io.IOException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="propagate" type="java.io.IOException"/>
      <param name="selector" type="java.nio.channels.Selector"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Closeables -->
  <!-- start class org.spf4j.base.ContextValue -->
  <class name="ContextValue" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ContextValue" type="org.spf4j.base.ExecutionContext, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getContext" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.ContextValue -->
  <!-- start class org.spf4j.base.CoreTextMediaType -->
  <class name="CoreTextMediaType" extends="java.lang.Enum"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.base.CoreTextMediaType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.base.CoreTextMediaType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSubType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="TEXT_PLAIN" type="org.spf4j.base.CoreTextMediaType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="APPLICATION_JSON" type="org.spf4j.base.CoreTextMediaType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.CoreTextMediaType -->
  <!-- start class org.spf4j.base.Env -->
  <class name="Env" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getValue" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="envname" type="java.lang.String"/>
      <param name="defaultValue" type="int"/>
    </method>
    <method name="getValue" return="float"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="envname" type="java.lang.String"/>
      <param name="defaultValue" type="float"/>
    </method>
    <method name="getValue" return="double"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="envname" type="java.lang.String"/>
      <param name="defaultValue" type="double"/>
    </method>
    <method name="getValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="envname" type="java.lang.String"/>
      <param name="defaultValue" type="boolean"/>
    </method>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="envname" type="java.lang.String"/>
      <param name="defaultValue" type="java.lang.String"/>
    </method>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="envname" type="java.lang.String"/>
      <param name="defaultValue" type="java.util.function.Supplier"/>
    </method>
    <method name="getSystemProperty" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="deprecatedAliases" type="java.lang.String[]"/>
      <param name="defaultValue" type="java.lang.String"/>
    </method>
    <method name="getSystemProperty" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="deprecatedAliases" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Env -->
  <!-- start class org.spf4j.base.EscapeJsonStringAppendableWrapper -->
  <class name="EscapeJsonStringAppendableWrapper" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Appendable"/>
    <constructor name="EscapeJsonStringAppendableWrapper" type="java.lang.Appendable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="append" return="java.lang.Appendable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pcsq" type="java.lang.CharSequence"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="append" return="java.lang.Appendable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="csq" type="java.lang.CharSequence"/>
      <param name="start" type="int"/>
      <param name="end" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="append" return="java.lang.Appendable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.EscapeJsonStringAppendableWrapper -->
  <!-- start interface org.spf4j.base.ExecutionContext -->
  <interface name="ExecutionContext"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.AutoCloseable"/>
    <implements name="org.spf4j.base.JsonWriteable"/>
    <method name="close"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getName" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getId" return="java.lang.CharSequence"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStartTimeNanos" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDeadlineNanos" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSource" return="org.spf4j.base.ExecutionContext"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRoot" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the top source. will return this is current is root.
 will follow all relationship types.]]>
      </doc>
    </method>
    <method name="getRootParent" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Adam of this current context. will return this is current is Adam.
 follows only CHILD_OF relationships.]]>
      </doc>
    </method>
    <method name="getNotClosedParent" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return will return the first not closed parent. null if no parent is available.]]>
      </doc>
    </method>
    <method name="addLog"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="log" type="org.spf4j.log.Slf4jLogRecord"/>
    </method>
    <method name="addLogs"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="log" type="java.util.Collection"/>
    </method>
    <method name="addCloseable"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="closeable" type="java.lang.AutoCloseable"/>
      <doc>
      <![CDATA[Attach a AutoCloseable to execution context.
 All of them will be closed when context is closed, in reverse registration order.
 @param closeable]]>
      </doc>
    </method>
    <method name="getContextMinLogLevel" return="org.spf4j.log.Level"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggerName" type="java.lang.String"/>
      <doc>
      <![CDATA[The minimum log level accepted by this execution context;
 The logs that we will store in this context.
 @return]]>
      </doc>
    </method>
    <method name="getContextMinLogLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getBackendMinLogLevel" return="org.spf4j.log.Level"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggerName" type="java.lang.String"/>
      <doc>
      <![CDATA[The minimum log level overwrite.
 An execution context can overwrite the backend configured log level.
 @return null if not specified.]]>
      </doc>
    </method>
    <method name="getBackendMinLogLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setBackendMinLogLevel" return="org.spf4j.log.Level"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggerName" type="java.lang.String"/>
      <param name="level" type="org.spf4j.log.Level"/>
    </method>
    <method name="setBackendMinLogLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
    </method>
    <method name="streamLogs"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.util.function.Consumer"/>
    </method>
    <method name="streamLogs"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.util.function.Consumer"/>
      <param name="nrLogs" type="int"/>
    </method>
    <method name="detach"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Detach this execution context from the current Thread.]]>
      </doc>
    </method>
    <method name="attach"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Attach execution context to the current thread.
 A thread will typically have a stack of execution contexts attached to it.]]>
      </doc>
    </method>
    <method name="isAttached" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if execution context is attached to a thread or not.]]>
      </doc>
    </method>
    <method name="getTimeToDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="getUncheckedTimeToDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="getTimeRelativeToDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="getMillisToDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="getSecondsToDeadline" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.spf4j.base.ExecutionContext.Tag"/>
      <doc>
      <![CDATA[Method to get context associated data.
 if current context does not have baggage, the parent context is queried if tag is inherited.
 This is done recursively.
 @param <T> type of data.
 @param key key of data.
 @return the data]]>
      </doc>
    </method>
    <method name="getContextAndValue" return="org.spf4j.base.ContextValue"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.spf4j.base.ExecutionContext.Tag"/>
      <doc>
      <![CDATA[Method to get context associated data.
 if current context does not have baggage, the parent context is queried if tag is inherited.
 This is done recursively, and both the context and the value are returned.
 @param <T> type of data.
 @param key key of data.
 @return the data]]>
      </doc>
    </method>
    <method name="getLocal" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.spf4j.base.ExecutionContext.Tag"/>
      <doc>
      <![CDATA[Method to get context associated data.
 will ignore inheritance tag attribute.
 @param <T> type of data.
 @param key key of data.
 @return the data]]>
      </doc>
    </method>
    <method name="put" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tag" type="org.spf4j.base.ExecutionContext.Tag"/>
      <param name="data" type="java.lang.Object"/>
      <doc>
      <![CDATA[Method to put context associated data.
 @param <T> type of data.
 @param key the key of data.
 @param data the data.
 @return existing data if there.]]>
      </doc>
    </method>
    <method name="combine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use accumulate.">
      <param name="tag" type="org.spf4j.base.ExecutionContext.Tag"/>
      <param name="data" type="java.lang.Object"/>
      <doc>
      <![CDATA[@deprecated use accumulate.]]>
      </doc>
    </method>
    <method name="accumulate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tag" type="org.spf4j.base.ExecutionContext.Tag"/>
      <param name="data" type="java.lang.Object"/>
    </method>
    <method name="accumulateComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tag" type="org.spf4j.base.ExecutionContext.Tag"/>
      <param name="data" type="java.lang.Object"/>
    </method>
    <method name="putToRootParent" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.spf4j.base.ExecutionContext.Tag"/>
      <param name="data" type="java.lang.Object"/>
      <doc>
      <![CDATA[Method to put context associated data to the root context.
 @param <T> type of data.
 @param key the key of data.
 @param data the data.
 @return existing data if there.]]>
      </doc>
    </method>
    <method name="compute" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="org.spf4j.base.ExecutionContext.Tag"/>
      <param name="compute" type="java.util.function.BiFunction"/>
      <doc>
      <![CDATA[Compute context associated data.
 @param <K>
 @param <V>
 @param key
 @param compute
 @return]]>
      </doc>
    </method>
    <method name="addToRootParent" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tag" type="org.spf4j.base.ExecutionContext.Tag"/>
      <param name="data" type="java.lang.Object"/>
    </method>
    <method name="startChild" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="operationName" type="java.lang.String"/>
      <param name="timeout" type="long"/>
      <param name="tu" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="startChild" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="operationName" type="java.lang.String"/>
    </method>
    <method name="detachedChild" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="operationName" type="java.lang.String"/>
      <param name="timeout" type="long"/>
      <param name="tu" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="detachedChild" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="operationName" type="java.lang.String"/>
    </method>
    <method name="nextChildId" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="add"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sample" type="java.lang.StackTraceElement[]"/>
    </method>
    <method name="add"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="samples" type="org.spf4j.base.StackSamples"/>
    </method>
    <method name="getAndClearStackSamples" return="org.spf4j.base.StackSamples"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStackSamples" return="org.spf4j.base.StackSamples"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isClosed" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRelationToSource" return="org.spf4j.base.ExecutionContext.Relation"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDebugDetail" return="org.spf4j.base.avro.DebugDetail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="origin" type="java.lang.String"/>
      <param name="throwable" type="java.lang.Throwable"/>
    </method>
    <method name="getDebugDetail" return="org.spf4j.base.avro.DebugDetail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="origin" type="java.lang.String"/>
      <param name="throwable" type="java.lang.Throwable"/>
      <param name="addStackSamples" type="boolean"/>
    </method>
    <method name="getDebugDetail" return="org.spf4j.base.avro.DebugDetail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="origin" type="java.lang.String"/>
      <param name="throwable" type="java.lang.Throwable"/>
      <param name="addStackSamples" type="boolean"/>
      <param name="maxNrLogs" type="int"/>
    </method>
    <doc>
    <![CDATA[Execution context information encapsulated a place to store execution related information:
 <ul>
 <li>deadline/timeout</li>
 <li>context logs/overrides</li>
 <li>tagged attachments (profiling info, etc..)</li>
 </ul>
 @author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.ExecutionContext -->
  <!-- start class org.spf4j.base.ExecutionContext.Relation -->
  <class name="ExecutionContext.Relation" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.base.ExecutionContext.Relation[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.base.ExecutionContext.Relation"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="CHILD_OF" type="org.spf4j.base.ExecutionContext.Relation"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FOLLOWS" type="org.spf4j.base.ExecutionContext.Relation"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.base.ExecutionContext.Relation -->
  <!-- start interface org.spf4j.base.ExecutionContext.SimpleTag -->
  <interface name="ExecutionContext.SimpleTag"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.ExecutionContext.Tag"/>
  </interface>
  <!-- end interface org.spf4j.base.ExecutionContext.SimpleTag -->
  <!-- start interface org.spf4j.base.ExecutionContext.Tag -->
  <interface name="ExecutionContext.Tag"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="toString" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isInherited" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="relation" type="org.spf4j.base.ExecutionContext.Relation"/>
      <doc>
      <![CDATA[if true, a child execution context will check parent execution contexts
 for tag values if not local values exist.]]>
      </doc>
    </method>
    <method name="pushOnClose" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[push this tag/values to the parent context when current context is closed.
 only child -> parent will be pushed, follows relationships will not be considered.]]>
      </doc>
    </method>
    <method name="accumulate" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="existing" type="java.lang.Object"/>
      <param name="newVal" type="java.lang.Object"/>
    </method>
    <method name="accumulateComponent" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="existing" type="java.lang.Object"/>
      <param name="component" type="java.lang.Object"/>
    </method>
  </interface>
  <!-- end interface org.spf4j.base.ExecutionContext.Tag -->
  <!-- start interface org.spf4j.base.ExecutionContextFactory -->
  <interface name="ExecutionContextFactory"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="id" type="java.lang.CharSequence"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="relation" type="org.spf4j.base.ExecutionContext.Relation"/>
      <param name="startTimeNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
      <doc>
      <![CDATA[Create a ExecutionContext.
 @param name name of the context.
 @param parent parent execution context. (null if this is root)
 @param deadlineNanos the deadline of the context.
 @param onClose a callback that needs to be executed when context is closed.
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.ExecutionContextFactory -->
  <!-- start class org.spf4j.base.ExecutionContexts -->
  <class name="ExecutionContexts" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="defaultThreadLocalAttacher" return="org.spf4j.base.ThreadLocalContextAttacher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="threadLocalAttacher" return="org.spf4j.base.ThreadLocalContextAttacher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="genId" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getContextFactory" return="org.spf4j.base.ExecutionContextFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="current" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="inCurrentThread" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
    </method>
    <method name="clearCurrentThread"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startTimeNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
      <doc>
      <![CDATA[start a execution context.

 @param deadlineNanos the deadline for this context. (System.nanotime)
 @return the execution context.]]>
      </doc>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeout" type="long"/>
      <param name="tu" type="java.util.concurrent.TimeUnit"/>
      <doc>
      <![CDATA[start a execution context.

 @param timeout
 @param tu
 @return]]>
      </doc>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="opname" type="java.lang.String"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="opname" type="java.lang.String"/>
      <param name="timeout" type="long"/>
      <param name="tu" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="timeout" type="long"/>
      <param name="tu" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="startTimeNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="startTimeNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="timeout" type="long"/>
      <param name="tu" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="id" type="java.lang.CharSequence"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="timeout" type="long"/>
      <param name="tu" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="createDetached" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="timeout" type="long"/>
      <param name="tu" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="startTimeNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="id" type="java.lang.CharSequence"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="startTimeNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="start" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="id" type="java.lang.CharSequence"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="relation" type="org.spf4j.base.ExecutionContext.Relation"/>
      <param name="startTimeNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="createDetached" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="startTimeNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="createDetached" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="relation" type="org.spf4j.base.ExecutionContext.Relation"/>
      <param name="startTimeNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="createDetached" return="org.spf4j.base.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="id" type="java.lang.CharSequence"/>
      <param name="parent" type="org.spf4j.base.ExecutionContext"/>
      <param name="relation" type="org.spf4j.base.ExecutionContext.Relation"/>
      <param name="startTimeNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="getContextDeadlineNanos" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getContextDeadlineNanos" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="currentTime" type="long"/>
    </method>
    <method name="getTimeRelativeToDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="getTimeToDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="getTimeToDeadlineUnchecked" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="getTimeToDeadlineInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="getMillisToDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="getSecondsToDeadline" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="computeDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeout" type="long"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="computeTimeout" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeout" type="long"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="computeDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use variant where the value and unit are it the natural order.">
      <param name="current" type="org.spf4j.base.ExecutionContext"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <param name="timeout" type="long"/>
      <doc>
      <![CDATA[@deprecated use variant where the value and unit are it the natural order.]]>
      </doc>
    </method>
    <method name="computeDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="current" type="org.spf4j.base.ExecutionContext"/>
      <param name="timeout" type="long"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="computeDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startTimeNanos" type="long"/>
      <param name="current" type="org.spf4j.base.ExecutionContext"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <param name="timeout" type="long"/>
    </method>
    <method name="computeTimeoutDeadline" return="org.spf4j.base.TimeoutDeadline"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="current" type="org.spf4j.base.ExecutionContext"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <param name="timeout" type="long"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[Compute the actual timeout taking in consideration the context deadline.
 @param current the context
 @param unit timeout unit
 @param timeout timeout value
 @return the earliest timeout (of the provided and context one)
 @throws TimeoutException]]>
      </doc>
    </method>
    <method name="propagatingCallable" return="java.util.concurrent.Callable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.concurrent.Callable"/>
    </method>
    <method name="propagatingCallable" return="java.util.concurrent.Callable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.concurrent.Callable"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
    </method>
    <method name="propagatingCallables" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tasks" type="java.util.Collection"/>
    </method>
    <method name="propagatingCallables" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tasks" type="java.util.Collection"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
    </method>
    <method name="deadlinedPropagatingCallables" return="java.util.Collection"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tasks" type="java.util.Collection"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="deadlinedPropagatingCallable" return="java.util.concurrent.Callable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.concurrent.Callable"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="propagatingRunnable" return="java.lang.Runnable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="runnable" type="java.lang.Runnable"/>
    </method>
    <method name="propagatingRunnable" return="java.lang.Runnable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="runnable" type="java.lang.Runnable"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
    </method>
    <method name="propagatingRunnable" return="java.lang.Runnable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="runnable" type="java.lang.Runnable"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="name" type="java.lang.String"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="propagatingCallable" return="java.util.concurrent.Callable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.concurrent.Callable"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="name" type="java.lang.String"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="propagatingFunction" return="java.util.function.Function"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.function.Function"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="name" type="java.lang.String"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="propagatingBiFunction" return="java.util.function.BiFunction"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.function.BiFunction"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="name" type="java.lang.String"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="propagatingConsumer" return="java.util.function.Consumer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.function.Consumer"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="name" type="java.lang.String"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="propagatingSupplier" return="java.util.function.Supplier"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.function.Supplier"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="name" type="java.lang.String"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <method name="propagatingBiConsumer" return="java.util.function.BiConsumer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.function.BiConsumer"/>
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="name" type="java.lang.String"/>
      <param name="deadlineNanos" type="long"/>
    </method>
    <field name="DEFAULT_TIMEOUT_NANOS" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.ExecutionContexts -->
  <!-- start interface org.spf4j.base.Handler -->
  <interface name="Handler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="handle"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <param name="deadlineMillis" type="long"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.Handler -->
  <!-- start interface org.spf4j.base.IntAppender -->
  <interface name="IntAppender"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="append"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.IntAppender -->
  <!-- start class org.spf4j.base.IntAppender.CommentNumberAppender -->
  <class name="IntAppender.CommentNumberAppender" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.IntAppender"/>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.base.IntAppender.CommentNumberAppender"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.base.IntAppender.CommentNumberAppender -->
  <!-- start class org.spf4j.base.IntAppender.SimplePrefixNumberAppender -->
  <class name="IntAppender.SimplePrefixNumberAppender" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.IntAppender"/>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.base.IntAppender.SimplePrefixNumberAppender"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.base.IntAppender.SimplePrefixNumberAppender -->
  <!-- start class org.spf4j.base.IntMath -->
  <class name="IntMath" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="closestPowerOf2" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
    </method>
    <method name="closestPowerOf2Number" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.IntMath -->
  <!-- start class org.spf4j.base.IntMath.XorShift128 -->
  <class name="IntMath.XorShift128" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.IntSequence"/>
    <constructor name="XorShift128"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="nextInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.base.IntMath.XorShift128 -->
  <!-- start class org.spf4j.base.IntMath.XorShift32 -->
  <class name="IntMath.XorShift32" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.IntSequence"/>
    <constructor name="XorShift32"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="nextInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A very fast Pseudo random generator.
 use of this random is appropriate when you need the fastest random that you plan to use in a single
 thread.
 If you need a thread-safe random, please use JDK ThreadLocalRandom, which will be your best option.]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.IntMath.XorShift32 -->
  <!-- start class org.spf4j.base.IntMath.XorShift32ThreadSafe -->
  <class name="IntMath.XorShift32ThreadSafe" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="please use JDK java.util.concurrent.ThreadLocalRandom instead.
 The JDK implementation uses local fields in the Thread class instead of a classic ThreadLocal,
 which makes it faster...">
    <implements name="org.spf4j.base.IntSequence"/>
    <constructor name="XorShift32ThreadSafe"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="nextInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@deprecated please use JDK java.util.concurrent.ThreadLocalRandom instead.
 The JDK implementation uses local fields in the Thread class instead of a classic ThreadLocal,
 which makes it faster...]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.IntMath.XorShift32ThreadSafe -->
  <!-- start class org.spf4j.base.IntMath.XorShift32ThreadSafe.Singleton -->
  <class name="IntMath.XorShift32ThreadSafe.Singleton" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Singleton"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="INSTANCE" type="org.spf4j.base.IntMath.XorShift32ThreadSafe"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.base.IntMath.XorShift32ThreadSafe.Singleton -->
  <!-- start interface org.spf4j.base.IntSequence -->
  <interface name="IntSequence"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="nextInt" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.IntSequence -->
  <!-- start class org.spf4j.base.JNA -->
  <class name="JNA" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="haveJnaPlatform" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="haveJnaPlatformClib" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[JNA utilitties.
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.JNA -->
  <!-- start class org.spf4j.base.Json -->
  <class name="Json" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="jsonWritableSerializer" return="com.fasterxml.jackson.databind.JsonSerializer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toStringJsonWritableSerializer" return="com.fasterxml.jackson.databind.JsonSerializer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="FACTORY" type="com.fasterxml.jackson.core.JsonFactory"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MAPPER" type="com.fasterxml.jackson.databind.ObjectMapper"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Json -->
  <!-- start interface org.spf4j.base.JsonWriteable -->
  <interface name="JsonWriteable"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.Writeable"/>
    <method name="writeJsonTo"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appendable" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeJsonTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="builder" type="java.lang.StringBuilder"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appendable" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.JsonWriteable -->
  <!-- start class org.spf4j.base.MemorizedCallable -->
  <class name="MemorizedCallable" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.concurrent.Callable"/>
    <method name="call" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="clear" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIfMemorized" return="org.spf4j.base.NullAbleOptional"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[use Callables.memorize to create a instance.
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.MemorizedCallable -->
  <!-- start class org.spf4j.base.Methods -->
  <class name="Methods" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="writeHtml"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="org.spf4j.base.avro.Method"/>
      <param name="w" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getMethod" return="org.spf4j.base.avro.Method"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.StackTraceElement"/>
    </method>
    <method name="getMethod" return="org.spf4j.base.avro.Method"
      abstract="false" native="false" synchronized="true"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="className" type="java.lang.String"/>
      <param name="methodName" type="java.lang.String"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="org.spf4j.base.avro.Method"/>
      <param name="w" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="org.spf4j.base.avro.Method"/>
      <param name="w" type="java.lang.StringBuilder"/>
    </method>
    <method name="toCharSequence" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="org.spf4j.base.avro.Method"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="org.spf4j.base.avro.Method"/>
    </method>
    <method name="from" return="org.spf4j.base.avro.Method"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
    </method>
    <method name="from" return="org.spf4j.base.avro.Method"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="start" type="int"/>
      <param name="end" type="int"/>
    </method>
    <field name="ROOT" type="org.spf4j.base.avro.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Methods -->
  <!-- start class org.spf4j.base.NullAbleOptional -->
  <class name="NullAbleOptional" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullAbleOptional"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="empty" return="org.spf4j.base.NullAbleOptional"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isPresent" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="of" return="org.spf4j.base.NullAbleOptional"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <field name="EMPTY" type="org.spf4j.base.NullAbleOptional"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.NullAbleOptional -->
  <!-- start class org.spf4j.base.Objects -->
  <class name="Objects" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="clone" return="java.io.Serializable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.io.Serializable"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Objects -->
  <!-- start class org.spf4j.base.PackageInfo -->
  <class name="PackageInfo" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="errorNoPackageDetail"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="getPackageInfoDirect" return="org.spf4j.base.avro.PackageInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="className" type="java.lang.String"/>
    </method>
    <method name="getPackageInfoDirect" return="org.spf4j.base.avro.PackageInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="aClass" type="java.lang.Class"/>
    </method>
    <method name="getPackageInfo" return="org.spf4j.base.avro.PackageInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="className" type="java.lang.String"/>
    </method>
    <method name="getJarSourceUrl" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clasz" type="java.lang.Class"/>
      <doc>
      <![CDATA[Useful to get the jar URL where a particular class is located.

 @param clasz
 @return]]>
      </doc>
    </method>
    <field name="NONE" type="org.spf4j.base.avro.PackageInfo"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.PackageInfo -->
  <!-- start class org.spf4j.base.Pair -->
  <class name="Pair" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.Map.Entry"/>
    <implements name="org.spf4j.base.Writeable"/>
    <constructor name="Pair" type="java.lang.Object, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="of" return="org.spf4j.base.Pair"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="first" type="java.lang.Object"/>
      <param name="second" type="java.lang.Object"/>
    </method>
    <method name="from" return="org.spf4j.base.Pair"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringPair" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a pair from a str1,str2 pair.

 @param stringPair - pair in the format (a,b) csv pair.
 @return null if this is not a pair.]]>
      </doc>
    </method>
    <method name="getFirst" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSecond" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Overwrite to change string image.
 @return]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="appendable" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toList" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="asMap" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pairs" type="org.spf4j.base.Pair[]"/>
    </method>
    <method name="getKey" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <field name="first" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="second" type="java.lang.Object"
      transient="false" volatile="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Pair -->
  <!-- start class org.spf4j.base.ReferenceType -->
  <class name="ReferenceType" extends="java.lang.Enum"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.base.ReferenceType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.base.ReferenceType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="create" return="java.lang.ref.Reference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <field name="WEAK" type="org.spf4j.base.ReferenceType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SOFT" type="org.spf4j.base.ReferenceType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.base.ReferenceType -->
  <!-- start class org.spf4j.base.RemoteException -->
  <class name="RemoteException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RemoteException" type="java.lang.String, java.lang.String, java.lang.String, java.io.Serializable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="RemoteException" type="java.lang.String, java.lang.String, java.lang.String, java.io.Serializable, java.lang.Throwable"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="getOrigin" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRemoteDetail" return="java.io.Serializable"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRemoteClass" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return string representation. (Class name + origin + message)]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.RemoteException -->
  <!-- start class org.spf4j.base.Slf4jMessageFormatter -->
  <class name="Slf4jMessageFormatter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="exHandle"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <param name="sbuf" type="java.lang.Appendable"/>
      <param name="t" type="java.lang.Throwable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messagePattern" type="java.lang.String"/>
      <param name="argArray" type="java.lang.Object[]"/>
    </method>
    <method name="format" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="messagePattern" type="java.lang.String"/>
      <param name="argArray" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Slf4j message formatter.

 @param to Appendable to put formatted message to.
 @param messagePattern see org.slf4j.helpers.MessageFormatter for format.
 @param argArray the message arguments.
 @return the number of arguments used in the message.
 @throws IOException]]>
      </doc>
    </method>
    <method name="format" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="appSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <param name="messagePattern" type="java.lang.String"/>
      <param name="argArray" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Slf4j message formatter.

 @param to Appendable to put formatted message to.
 @param appSupplier a supplier that will provide the serialization method for a particular argument type.
 @param messagePattern see org.slf4j.helpers.MessageFormatter for format.
 @param argArray the message arguments.
 @return the number of arguments used in the message.
 @throws IOException]]>
      </doc>
    </method>
    <method name="format" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="messagePattern" type="java.lang.String"/>
      <param name="appSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <param name="argArray" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[slf4j message formatter.

 @param to Appendable to put formatted message to.
 @param messagePattern see org.slf4j.helpers.MessageFormatter for format.
 @param appSupplier a supplier that will provide the serialization method for a particular argument type.
 @param argArray the message arguments.
 @return the number of arguments used in the message.
 @throws IOException something wend wrong while writing to the appendable.]]>
      </doc>
    </method>
    <method name="format" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="firstArgIdx" type="int"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="messagePattern" type="java.lang.String"/>
      <param name="appSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <param name="argArray" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Slf4j message formatter.

 @param to Appendable to put formatted message to.
 @param messagePattern see org.slf4j.helpers.MessageFormatter for format.
 @param appSupplier a supplier that will provide the serialization method for a particular argument type.
 @param firstArgIdx the index of the first parameter.
 @param argArray the message arguments.
 @return the index of the last arguments used in the message + 1.
 @throws IOException something wend wrong while writing to the appendable.]]>
      </doc>
    </method>
    <method name="getFormatParameterNumber" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="messagePattern" type="java.lang.String"/>
    </method>
    <method name="format" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exHandler" type="org.spf4j.base.Slf4jMessageFormatter.ErrorHandler"/>
      <param name="firstArgIdx" type="int"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="messagePattern" type="java.lang.String"/>
      <param name="appSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <param name="argArray" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Slf4j message formatter.

 @param safe - if true recoverable exHandle will be caught when writing arguments, and a error will be appended
 instead.
 @param to Appendable to put formatted message to.
 @param messagePattern see org.slf4j.helpers.MessageFormatter for format.
 @param appSupplier a supplier that will provide the serialization method for a particular argument type.
 @param firstArgIdx the index of the first parameter.
 @param argArray the message arguments.
 @return the index of the last arguments used in the message + 1.
 @throws IOException something wend wrong while writing to the appendable.]]>
      </doc>
    </method>
    <method name="safeObjectAppend"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exHandler" type="org.spf4j.base.Slf4jMessageFormatter.ErrorHandler"/>
      <param name="sbuf" type="java.lang.Appendable"/>
      <param name="obj" type="java.lang.Object"/>
      <param name="appSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[A more flexible implementation of the SLF4j message formatter (org.slf4j.helpers.MessageFormatter). the following
 improvements:

 1) Allow to format to a procvided destination (Appendable) allowing you to reduce the amount of garbage generated in
 a custom formatter... 2) Lets you know which arguments have been used in the message allowing you to implement extra
 logic to handle the unused ones 3) Lets you plug custom formatters for argument types. (you can get better
 performance and more flexibility) 4) Processing arguments that are arrays is sligtly faster than the slf4j formatter.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Slf4jMessageFormatter -->
  <!-- start interface org.spf4j.base.Slf4jMessageFormatter.ErrorHandler -->
  <interface name="Slf4jMessageFormatter.ErrorHandler"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="accept"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <param name="sbuf" type="java.lang.Appendable"/>
      <param name="t" type="java.lang.Throwable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </interface>
  <!-- end interface org.spf4j.base.Slf4jMessageFormatter.ErrorHandler -->
  <!-- start interface org.spf4j.base.StackSamples -->
  <interface name="StackSamples"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.JsonWriteable"/>
    <method name="getSampleCount" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSubNodes" return="gnu.trove.map.TMap"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.StackSamples -->
  <!-- start class org.spf4j.base.Strings -->
  <class name="Strings" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="distance" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use CharSequences.distance instead.">
      <param name="s1" type="java.lang.String"/>
      <param name="s2" type="java.lang.String"/>
      <doc>
      <![CDATA[@deprecated use CharSequences.distance instead.]]>
      </doc>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use containsAnyChars instead.">
      <param name="string" type="java.lang.String"/>
      <param name="chars" type="char[]"/>
      <doc>
      <![CDATA[@deprecated use containsAnyChars instead.]]>
      </doc>
    </method>
    <method name="containsAnyChars" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <param name="chars" type="char[]"/>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use CharSequences.containsAnyChar instead.">
      <param name="string" type="java.lang.CharSequence"/>
      <param name="chars" type="char[]"/>
      <doc>
      <![CDATA[@deprecated use CharSequences.containsAnyChar instead.]]>
      </doc>
    </method>
    <method name="withFirstCharLower" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
    </method>
    <method name="methodToAttribute" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <param name="str" type="java.lang.String"/>
      <doc>
      <![CDATA[A get/set/is prefixed method name to attribute name converter.
 @param prefix
 @param str
 @return]]>
      </doc>
    </method>
    <method name="attributeToMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="prefix" type="java.lang.String"/>
      <param name="str" type="java.lang.String"/>
      <doc>
      <![CDATA[A attribute to get/set/is method name converter.
 @param prefix
 @param str
 @return]]>
      </doc>
    </method>
    <method name="writeReplaceWhitespaces"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="replacement" type="char"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="steal" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <doc>
      <![CDATA[Steal the underlying character array of a String.

 @param str
 @return]]>
      </doc>
    </method>
    <method name="wrap" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chars" type="char[]"/>
      <doc>
      <![CDATA[Create a String based on the provided character array. No copy of the array is made.

 @param chars
 @return]]>
      </doc>
    </method>
    <method name="createUtf8Encoder" return="java.nio.charset.CharsetEncoder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="createUtf8Decoder" return="java.nio.charset.CharsetDecoder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUTF8CharsetEncoder" return="java.nio.charset.CharsetEncoder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUTF8CharsetDecoder" return="java.nio.charset.CharsetDecoder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="encode" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ce" type="java.nio.charset.CharsetEncoder"/>
      <param name="ca" type="char[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
    </method>
    <method name="getmaxNrBytes" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ce" type="java.nio.charset.CharsetEncoder"/>
      <param name="nrChars" type="int"/>
    </method>
    <method name="encode" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ce" type="java.nio.charset.CharsetEncoder"/>
      <param name="ca" type="char[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <param name="targetArray" type="byte[]"/>
    </method>
    <method name="decode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cd" type="java.nio.charset.CharsetDecoder"/>
      <param name="ba" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
    </method>
    <method name="fromUtf8" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bytes" type="byte[]"/>
      <doc>
      <![CDATA[Optimized UTF8 decoder.

 Here is a benchmark comparison with the JDK implementation (see EncodingBenchmark.java in the benchmark project):

 EncodingBenchmark.stringDecode thrpt 10 16759798.463 # 343505.144 ops/s EncodingBenchmark.fastStringDecode thrpt 10
 17413298.464 # 301756.867 ops/s


 @param bytes
 @return]]>
      </doc>
    </method>
    <method name="fromUtf8" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bytes" type="byte[]"/>
      <param name="startIdx" type="int"/>
      <param name="length" type="int"/>
    </method>
    <method name="toUtf8" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <doc>
      <![CDATA[Optimized UTF8 string encoder.

 comparison with the stock JDK implementation (see EncodingBenchmark.java in the benchmark project):

 EncodingBenchmark.stringEncode thrpt 10 9481668.776 # 252543.135 ops/s EncodingBenchmark.fastStringEncode thrpt 10
 22469383.612 # 898677.892 ops/s

 @param str
 @return]]>
      </doc>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use CharSequences.compare">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="t" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[@deprecated use CharSequences.compare]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="t" type="java.lang.CharSequence"/>
    </method>
    <method name="hashcode" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
    </method>
    <method name="subSequence" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="seq" type="java.lang.CharSequence"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
    </method>
    <method name="endsWith" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qc" type="java.lang.CharSequence"/>
      <param name="with" type="java.lang.CharSequence"/>
    </method>
    <method name="escapeJsonString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="toEscape" type="java.lang.String"/>
      <param name="jsonString" type="java.lang.StringBuilder"/>
      <doc>
      <![CDATA[Utility method to escape java strings to json strings.

 @param toEscape - the java string to escape.
 @param jsonString - the destination json String builder.]]>
      </doc>
    </method>
    <method name="escapeJsonString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="toEscape" type="java.lang.String"/>
      <param name="jsonString" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendJsonStringEscapedChar"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <param name="jsonString" type="java.lang.StringBuilder"/>
    </method>
    <method name="appendJsonStringEscapedChar"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <param name="jsonString" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendUnsignedString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="nr" type="long"/>
      <param name="shift" type="int"/>
    </method>
    <method name="appendUnsignedString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="nr" type="int"/>
      <param name="shift" type="int"/>
    </method>
    <method name="appendUnsignedStringPadded"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="nr" type="int"/>
      <param name="shift" type="int"/>
      <param name="padTo" type="int"/>
    </method>
    <method name="appendUnsignedStringPadded"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.Appendable"/>
      <param name="nr" type="int"/>
      <param name="shift" type="int"/>
      <param name="padTo" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendSpaces"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="nrSpaces" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendSpaces"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.StringBuilder"/>
      <param name="nrSpaces" type="int"/>
    </method>
    <method name="regionMatches" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use CharSequences.regionMatches.">
      <param name="t" type="java.lang.CharSequence"/>
      <param name="toffset" type="int"/>
      <param name="other" type="java.lang.CharSequence"/>
      <param name="ooffset" type="int"/>
      <param name="plen" type="int"/>
      <doc>
      <![CDATA[@deprecated use CharSequences.regionMatches.]]>
      </doc>
    </method>
    <method name="truncate" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <param name="length" type="int"/>
    </method>
    <method name="commonPrefix" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="strs" type="java.lang.CharSequence[]"/>
    </method>
    <field name="EOL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Strings -->
  <!-- start class org.spf4j.base.SysExits -->
  <class name="SysExits" extends="java.lang.Enum"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.base.SysExits[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.base.SysExits"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="exitCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isOk" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isError" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="fromCode" return="org.spf4j.base.SysExits"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exitCode" type="int"/>
      <doc>
      <![CDATA[@param exitCode
 @return corresponding enum.]]>
      </doc>
    </method>
    <field name="OK" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Everything is OK.]]>
      </doc>
    </field>
    <field name="EX_GENERAL" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Catch all for general errors.]]>
      </doc>
    </field>
    <field name="EX_SHELL_BUILTIN_MISSUSE" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Shell build in miss-use.]]>
      </doc>
    </field>
    <field name="EX_USAGE" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The command was used incorrectly, e.g., with the wrong number of arguments, a bad flag, a bad syntax in a
 parameter, or whatever.]]>
      </doc>
    </field>
    <field name="EX_DATAERR" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The input data was incorrect in some way. This should only be used for user's data and not system files.]]>
      </doc>
    </field>
    <field name="EX_NOINPUT" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An input file (not a system file) did not exist or was not readable. This could also include errors like ``No
 message'' to a mailer (if it cared to catch it).]]>
      </doc>
    </field>
    <field name="EX_NOUSER" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The user specified did not exist. This might be used for mail addresses or remote logins.]]>
      </doc>
    </field>
    <field name="EX_NOHOST" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The host specified did not exist. This is used in mail addresses or network requests.]]>
      </doc>
    </field>
    <field name="EX_UNAVAILABLE" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A service is unavailable. This can occur if a support program or file does not exist. This can also be used as a
 catchall message when something you wanted to do doesn't work, but you don't know why.]]>
      </doc>
    </field>
    <field name="EX_SOFTWARE" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An internal software error has been detected. This should be limited to non-operating system related errors as
 possible.]]>
      </doc>
    </field>
    <field name="EX_OSERR" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An operating system error has been detected. This is intended to be used for such things as ``cannot fork'',
 ``cannot create pipe'', or the like. It includes things like getuid returning a user that does not exist in the
 passwd file.]]>
      </doc>
    </field>
    <field name="EX_OSFILE" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Some system file (e.g., /etc/passwd, /var/run/utmp,etc.) does not exist, cannot be opened, or has some sort of
 error (e.g., syntax error).]]>
      </doc>
    </field>
    <field name="EX_CANTCREAT" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A (user specified) output file cannot be created.]]>
      </doc>
    </field>
    <field name="EX_IOERR" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An error occurred while doing I/O on some file.]]>
      </doc>
    </field>
    <field name="EX_TEMPFAIL" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Temporary failure, indicating something that is not really an error. In sendmail, this means that a mailer (e.g.)
 could not create a connection, and the request should be reattempted later.]]>
      </doc>
    </field>
    <field name="EX_PROTOCOL" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The remote system returned something that was ``not possible'' during a protocol exchange.]]>
      </doc>
    </field>
    <field name="EX_NOPERM" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[You did not have sufficient permission to perform the operation. This is not intended for file system problems,
 which should use EX_NOINPUT or EX_CANTCREAT, but rather for higher level permissions.]]>
      </doc>
    </field>
    <field name="EX_CONFIG" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Something was found in an unconfigured or misconfigured state.]]>
      </doc>
    </field>
    <field name="EX_CANNOT_EXEC_CMD" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[cannot execute invoked command.]]>
      </doc>
    </field>
    <field name="EX_CMD_NOT_FOUND" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Command not found.]]>
      </doc>
    </field>
    <field name="EX_INVALID_ARG_TO_EXIT" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invalid argument to exit.]]>
      </doc>
    </field>
    <field name="EX_SIG_HUP" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Section caused by exit due to signal.
 where signal name is same on Linux, Solaris and MacOS enum has the appropriate name.
 for linux see: http://man7.org/linux/man-pages/man7/signal.7.html
 or run man signal on you OS of choice.]]>
      </doc>
    </field>
    <field name="EX_SIG_INT" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_QUIT" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_ILL" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_TRAP" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_ABRT" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_7" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_FPE" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_KILL" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_10" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_11" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_12" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_PIPE" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_ALRM" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_TERM" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_16" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_17" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_18" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_19" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_20" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_21" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_22" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_23" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_24" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_25" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_26" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_27" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_28" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_29" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_30" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_SIG_31" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_STATUS_OUT_OF_RANGE" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EX_UNKNOWN" type="org.spf4j.base.SysExits"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Any return codes not explicitly defined will be associated with "EX_UNKNOWN"]]>
      </doc>
    </field>
    <doc>
    <![CDATA[some "standard" process exit codes from:
 http://tldp.org/LDP/abs/html/index.html
 https://www.freebsd.org/cgi/man.cgi?query=sysexits&apropos=0&sektion=0&manpath=FreeBSD+4.3-RELEASE&format=html
 http://journal.thobe.org/2013/02/jvms-and-kill-signals.html
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.SysExits -->
  <!-- start class org.spf4j.base.TestTimeSource -->
  <class name="TestTimeSource" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.function.LongSupplier"/>
    <constructor name="TestTimeSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setTimeStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="gnu.trove.iterator.TLongIterator"/>
    </method>
    <method name="setTimeStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="times" type="long[]"/>
    </method>
    <method name="freezeTime" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAsLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="SYSTEM_NANO_TIME_STREAM" type="gnu.trove.iterator.TLongIterator"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.TestTimeSource -->
  <!-- start interface org.spf4j.base.ThreadLocalContextAttacher -->
  <interface name="ThreadLocalContextAttacher"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="attach" return="org.spf4j.base.ThreadLocalContextAttacher.Attached"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <doc>
      <![CDATA[Attach an execution context to the current Thread.
 @param ctx the Execution context.
 @return Information object about the operation.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.ThreadLocalContextAttacher -->
  <!-- start interface org.spf4j.base.ThreadLocalContextAttacher.Attached -->
  <interface name="ThreadLocalContextAttacher.Attached"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="detach"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Remove context from thread.]]>
      </doc>
    </method>
    <method name="isTopOfStack" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the Attached Context is the first/only context in the Thread context stack.
 @return]]>
      </doc>
    </method>
    <method name="attachedThread" return="java.lang.Thread"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the Thread that this context has been attached to.
 @return]]>
      </doc>
    </method>
  </interface>
  <!-- end interface org.spf4j.base.ThreadLocalContextAttacher.Attached -->
  <!-- start class org.spf4j.base.Threads -->
  <class name="Threads" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getThreads" return="java.lang.Thread[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="randomFirst" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nr" type="int"/>
      <param name="threads" type="java.lang.Thread[]"/>
      <doc>
      <![CDATA[get a random selection of nr Threads from the array, the first nr location in the array will
 contain the random set,m the rest will be null.
 @param nr number of threads to randomly select.
 @param threads the array of threads to select from]]>
      </doc>
    </method>
    <method name="getThreadByName" return="java.lang.Thread"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getThreadById" return="java.lang.Thread"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="long"/>
    </method>
    <method name="getStackTraces" return="java.lang.StackTraceElement[][]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="threads" type="java.lang.Thread[]"/>
    </method>
    <method name="dumpTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="dumpToPrintStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.PrintStream"/>
    </method>
    <field name="EMPTY_ARRAY" type="java.lang.Thread[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Thread utilities.

 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Threads -->
  <!-- start class org.spf4j.base.Throwables -->
  <class name="Throwables" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="isRetryable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[figure out if a Exception is retry-able or not.
 If while executing a operation a exception is returned, that exception is retryable if retrying the operation
 can potentially succeed.
 @param value
 @return true/false is retry-able or not, null when this is not clear and can be context dependent.]]>
      </doc>
    </method>
    <method name="getIsRetryablePredicate" return="java.util.function.Function"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setIsRetryablePredicate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isRetryablePredicate" type="java.util.function.Function"/>
    </method>
    <method name="getNrSuppressedExceptions" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="getNrRecursiveSuppressedExceptions" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="removeOldestSuppressedRecursive" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="removeOldestSuppressed" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="suppress" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use suppressLimited instead.">
      <param name="t" type="java.lang.Throwable"/>
      <param name="suppressed" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Functionality will call Throwable.addSuppressed, 2 extra things happen:

 1) limit to nr of exceptions suppressed.
 2) if exception is already suppressed, will not add it.
 3) will return a clone of exception t.

 @param <T>
 @param t
 @param suppressed
 @returna clone of exception t with suppressed exception suppressed;
 @deprecated use suppressLimited instead.]]>
      </doc>
    </method>
    <method name="suppressLimited"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="suppressed" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Functionality will call Throwable.addSuppressed, 2 extra things happen:

 1) limit to nr of exceptions suppressed.
 2) if exception is already suppressed, will not add it.

 @param t
 @param suppressed]]>
      </doc>
    </method>
    <method name="suppressLimited"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="suppressed" type="java.lang.Throwable"/>
      <param name="maxSuppressed" type="int"/>
    </method>
    <method name="suppress" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="suppressed" type="java.lang.Throwable"/>
      <param name="maxSuppressed" type="int"/>
    </method>
    <method name="getSuppressed" return="java.lang.Throwable[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Utility to get suppressed exceptions.

 In java 1.7 it will return t.getSuppressed()
 + in case it is Iterable<Throwable> any other linked exceptions (see
 SQLException)

 java 1.6 behavior is deprecated.

 @param t
 @return]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="java.lang.StackTraceElement"/>
      <param name="previous" type="java.lang.StackTraceElement"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
    </method>
    <method name="toStringBuilder" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
    </method>
    <method name="toStringBuilder" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.io.PrintStream"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.io.PrintStream"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="prefix" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <param name="prefix" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeThrowableDetail"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <param name="prefix" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeMessageString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="t" type="java.lang.Throwable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trace" type="java.lang.StackTraceElement[]"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trace" type="java.lang.StackTraceElement[]"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <param name="prefix" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="commonFrames" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trace" type="java.lang.StackTraceElement[]"/>
      <param name="enclosingTrace" type="java.lang.StackTraceElement[]"/>
    </method>
    <method name="isNonRecoverable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Is this Throwable a JVM non-recoverable exception. (Oom, VMError, etc...)
 @param t
 @return]]>
      </doc>
    </method>
    <method name="containsNonRecoverable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Does this Throwable contain a JVM non-recoverable exception. (Oom, VMError, etc...)
 @param t
 @return]]>
      </doc>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="predicate" type="java.util.function.Predicate"/>
      <doc>
      <![CDATA[checks in the throwable + children (both causal and suppressed) contain a throwable that
 respects the Predicate.
 @param t the throwable
 @param predicate the predicate
 @return true if a Throwable matching the predicate is found.]]>
      </doc>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="toLookFor" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[checks in the throwable + children (both causal and suppressed) contain a throwable that
 respects the Predicate.
 @param t the throwable
 @param predicate the predicate
 @return true if a Throwable matching the predicate is found.]]>
      </doc>
    </method>
    <method name="first" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="clasz" type="java.lang.Class"/>
      <doc>
      <![CDATA[return first Exception in the causal chain Assignable to clasz.
 @param <T>
 @param t
 @param clasz
 @return]]>
      </doc>
    </method>
    <method name="first" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="predicate" type="java.util.function.Predicate"/>
      <doc>
      <![CDATA[Returns the first Throwable that matches the predicate in the causal and suppressed chain,
 the suppressed chain includes the supression mechanism included in SQLException.
 @param t the Throwable
 @param predicate the Predicate
 @return the Throwable the first matches the predicate or null is none matches.]]>
      </doc>
    </method>
    <method name="firstCause" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="throwable" type="java.lang.Throwable"/>
      <param name="predicate" type="java.util.function.Predicate"/>
      <doc>
      <![CDATA[Returns first Throwable in the causality chain that is matching the provided predicate.
 @param throwable the Throwable to go through.
 @param predicate the predicate to apply
 @return the first Throwable from the chain that the predicate matches.]]>
      </doc>
    </method>
    <method name="getNonRecoverablePredicate" return="java.util.function.Predicate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setNonRecoverablePredicate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="predicate" type="java.util.function.Predicate"/>
      <doc>
      <![CDATA[Overwrite the default non-recoverable predicate.
 @param predicate]]>
      </doc>
    </method>
    <method name="writeAbreviatedClassName"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="className" type="java.lang.String"/>
      <param name="writeTo" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="throwException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ex" type="java.lang.Exception"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <field name="SUPPRESSED_CAPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Caption for labeling suppressed exception stack traces]]>
      </doc>
    </field>
    <field name="CAUSE_CAPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Caption for labeling causative exception stack traces]]>
      </doc>
    </field>
    <doc>
    <![CDATA[utility class for throwables.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Throwables -->
  <!-- start class org.spf4j.base.Throwables.PackageDetail -->
  <class name="Throwables.PackageDetail" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.base.Throwables.PackageDetail[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.base.Throwables.PackageDetail"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="NONE" type="org.spf4j.base.Throwables.PackageDetail"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[No jar info or version info.]]>
      </doc>
    </field>
    <field name="SHORT" type="org.spf4j.base.Throwables.PackageDetail"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[jar file name + manifest version.]]>
      </doc>
    </field>
    <field name="LONG" type="org.spf4j.base.Throwables.PackageDetail"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[complete jar path + manifest version.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[enum describing the PackageDetail level to be logged in the stack trace.]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Throwables.PackageDetail -->
  <!-- start class org.spf4j.base.Throwables.TrimmedException -->
  <class name="Throwables.TrimmedException" extends="java.lang.Exception"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="TrimmedException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="fillInStackTrace" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.base.Throwables.TrimmedException -->
  <!-- start class org.spf4j.base.TimeoutDeadline -->
  <class name="TimeoutDeadline" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="TimeoutDeadline" type="long, long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="of" return="org.spf4j.base.TimeoutDeadline"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeoutNanos" type="long"/>
      <param name="deadlineNanos" type="long"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="getTimeoutNanos" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDeadlineNanos" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.TimeoutDeadline -->
  <!-- start class org.spf4j.base.TimeSource -->
  <class name="TimeSource" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="nanoTime" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get JVM. time source. Default implementation calls System.nanotime.

 @return]]>
      </doc>
    </method>
    <method name="nanoTimeSupplier" return="java.util.function.LongSupplier"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDeadlineNanos" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeout" type="long"/>
      <param name="timeUnit" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="getDeadlineNanos" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="currentTimeNanos" type="long"/>
      <param name="timeout" type="long"/>
      <param name="timeUnit" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="getTimeToDeadlineStrict" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deadlineNanos" type="long"/>
      <param name="timeUnit" type="java.util.concurrent.TimeUnit"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="getTimeToDeadline" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deadlineNanos" type="long"/>
      <param name="timeUnit" type="java.util.concurrent.TimeUnit"/>
    </method>
    <doc>
    <![CDATA[Utility method to convert between TimeSource.nanoTime and System.currentTimeMillis
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.TimeSource -->
  <!-- start class org.spf4j.base.Timing -->
  <class name="Timing" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="fromNanoTimeToEpochMillis" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nanoTime" type="long"/>
    </method>
    <method name="fromNanoTimeToInstant" return="java.time.Instant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nanoTime" type="long"/>
    </method>
    <method name="fromEpochMillisToNanoTime" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="epochTimeMillis" type="long"/>
    </method>
    <method name="getCurrentTiming" return="org.spf4j.base.Timing"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="MAX_MS_SPAN" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A Utility class that allows for quick conversion between nanotime and epoch relative time.
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Timing -->
  <!-- start class org.spf4j.base.TLScratch -->
  <class name="TLScratch" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getBytesTmp" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
      <doc>
      <![CDATA[returns a thread local byte array of at least the size requested. use only for temporary purpose. This method needs
 to be carefully used!

 @param size - the minimum size of the temporary buffer requested.
 @return - the temporary buffer.]]>
      </doc>
    </method>
    <method name="getCharsTmp" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
      <doc>
      <![CDATA[returns a thread local char array of at least the requested size. Use only for temporary purpose.

 @param size - the minimum size of the temporary buffer requested.
 @return - the temporary buffer.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.TLScratch -->
  <!-- start class org.spf4j.base.UncheckedExecutionException -->
  <class name="UncheckedExecutionException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UncheckedExecutionException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UncheckedExecutionException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UncheckedExecutionException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UncheckedExecutionException" type="java.lang.String, java.lang.Throwable, boolean, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.UncheckedExecutionException -->
  <!-- start class org.spf4j.base.UncheckedTimeoutException -->
  <class name="UncheckedTimeoutException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UncheckedTimeoutException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UncheckedTimeoutException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UncheckedTimeoutException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UncheckedTimeoutException" type="java.lang.String, java.lang.Throwable, boolean, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.UncheckedTimeoutException -->
  <!-- start class org.spf4j.base.UnsafeString -->
  <class name="UnsafeString" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="steal" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <doc>
      <![CDATA[Steal the underlying character array of a String.

 @param str
 @return]]>
      </doc>
    </method>
    <method name="wrap" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chars" type="char[]"/>
      <doc>
      <![CDATA[Create a String based on the provided character array. No copy of the array is made.

 @param chars
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Lower lever unsafe hacks for performance improvement.
 These optimizations will work only up to including JDK 8.
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.UnsafeString -->
  <!-- start class org.spf4j.base.UnsafeThrowable -->
  <class name="UnsafeThrowable" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getSuppressedNoCopy" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.UnsafeThrowable -->
  <!-- start interface org.spf4j.base.Wrapper -->
  <interface name="Wrapper"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getWrapped" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the wrapped object by this wrapper.]]>
      </doc>
    </method>
    <method name="getTopWrapped" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An interface to uniformly access wrapped objects + wrap.
 @author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.Wrapper -->
  <!-- start interface org.spf4j.base.Writeable -->
  <interface name="Writeable"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="writeTo"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appendable" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="builder" type="java.lang.StringBuilder"/>
    </method>
    <doc>
    <![CDATA[Interface for Objects that can write themselves to a appendable.
 @author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.Writeable -->
  <!-- start class org.spf4j.base.XCollectors -->
  <class name="XCollectors" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="last" return="java.util.stream.Collector"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="limit" type="int"/>
    </method>
    <method name="last" return="java.util.stream.Collector"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="limit" type="int"/>
      <param name="addIfLimited" type="java.lang.Object"/>
    </method>
    <method name="last" return="java.util.stream.Collector"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dqSupp" type="java.util.function.Supplier"/>
      <param name="limit" type="int"/>
      <param name="addIfLimited" type="java.lang.Object"/>
    </method>
    <method name="limitDequeue"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l1" type="java.util.Deque"/>
      <param name="limit" type="int"/>
      <param name="addIfLimited" type="java.lang.Object"/>
    </method>
    <method name="filtering" return="java.util.stream.Collector"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="predicate" type="java.util.function.Predicate"/>
      <param name="downstream" type="java.util.stream.Collector"/>
      <doc>
      <![CDATA[THis is a backport from JDK9.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.XCollectors -->
</package>
<package name="org.slf4j.impl">
  <!-- start class org.slf4j.impl.StaticLoggerBinder -->
  <class name="StaticLoggerBinder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.slf4j.spi.LoggerFactoryBinder"/>
    <method name="getSingleton" return="org.slf4j.impl.StaticLoggerBinder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the singleton of this class.

 @return the StaticLoggerBinder singleton]]>
      </doc>
    </method>
    <method name="getLoggerFactory" return="org.slf4j.ILoggerFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLoggerFactoryClassStr" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.slf4j.impl.StaticLoggerBinder -->
  <!-- start class org.slf4j.impl.StaticMarkerBinder -->
  <class name="StaticMarkerBinder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.slf4j.spi.MarkerFactoryBinder"/>
    <method name="getSingleton" return="org.slf4j.impl.StaticMarkerBinder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the singleton of this class.

 @return the StaticMarkerBinder singleton
 @since 1.7.14]]>
      </doc>
    </method>
    <method name="getMarkerFactory" return="org.slf4j.IMarkerFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Currently this method always returns an instance of {@link BasicMarkerFactory}.]]>
      </doc>
    </method>
    <method name="getMarkerFactoryClassStr" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Currently, this method returns the class name of {@link BasicMarkerFactory}.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="SINGLETON" type="org.slf4j.impl.StaticMarkerBinder"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The unique instance of this class.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.slf4j.impl.StaticMarkerBinder -->
  <!-- start class org.slf4j.impl.StaticMDCBinder -->
  <class name="StaticMDCBinder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getSingleton" return="org.slf4j.impl.StaticMDCBinder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the singleton of this class.

 @return the StaticMDCBinder singleton
 @since 1.7.14]]>
      </doc>
    </method>
    <method name="getMDCA" return="org.slf4j.spi.MDCAdapter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Currently this method always returns an instance of {@link StaticMDCBinder}.]]>
      </doc>
    </method>
    <method name="getMDCAdapterClassStr" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="SINGLETON" type="org.slf4j.impl.StaticMDCBinder"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The unique instance of this class.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This implementation is bound to {@link NOPMDCAdapter}.]]>
    </doc>
  </class>
  <!-- end class org.slf4j.impl.StaticMDCBinder -->
</package>
<package name="org.spf4j.unix">
  <!-- start interface org.spf4j.unix.CLibrary -->
  <interface name="CLibrary"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.sun.jna.platform.unix.LibCAPI"/>
    <implements name="com.sun.jna.Library"/>
    <method name="fork" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="gethostname" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="byte[]"/>
      <param name="len" type="int"/>
    </method>
    <method name="strsignal" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sigNumber" type="int"/>
      <doc>
      <![CDATA[returns signal name from a signal number.
 @param sigNumber the signal number.
 @return the signal name.]]>
      </doc>
    </method>
    <method name="kill" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pid" type="int"/>
      <param name="signum" type="int"/>
    </method>
    <method name="setsid" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setuid" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newuid" type="short"/>
    </method>
    <method name="setgid" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newgid" type="short"/>
    </method>
    <method name="umask" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mask" type="int"/>
    </method>
    <method name="getpid" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get current process id.
 https://www.systutorials.com/docs/linux/man/2-getppid/
 @return current process id.]]>
      </doc>
    </method>
    <method name="getppid" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[get parent process id.
 https://www.systutorials.com/docs/linux/man/2-getppid/
 @return parent process id.]]>
      </doc>
    </method>
    <method name="chdir" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dir" type="java.lang.String"/>
    </method>
    <method name="execv" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.lang.String"/>
      <param name="args" type="com.sun.jna.StringArray"/>
    </method>
    <method name="execvp" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.lang.String"/>
      <param name="args" type="com.sun.jna.StringArray"/>
    </method>
    <method name="setenv" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="perror"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="strerror" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errno" type="int"/>
    </method>
    <method name="sysctlbyname" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="oldp" type="com.sun.jna.Pointer"/>
      <param name="oldlenp" type="com.sun.jna.ptr.IntByReference"/>
      <param name="newp" type="com.sun.jna.Pointer"/>
      <param name="newlen" type="com.sun.jna.ptr.IntByReference"/>
    </method>
    <method name="sysctl" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mib" type="int[]"/>
      <param name="nameLen" type="int"/>
      <param name="oldp" type="com.sun.jna.Pointer"/>
      <param name="oldlenp" type="com.sun.jna.ptr.IntByReference"/>
      <param name="newp" type="com.sun.jna.Pointer"/>
      <param name="newlen" type="com.sun.jna.ptr.IntByReference"/>
    </method>
    <method name="sysctlnametomib" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="mibp" type="com.sun.jna.Pointer"/>
      <param name="size" type="com.sun.jna.ptr.IntByReference"/>
    </method>
    <method name="fopen" return="org.spf4j.unix.CLibrary.FILE"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="mode" type="java.lang.String"/>
    </method>
    <method name="freopen" return="org.spf4j.unix.CLibrary.FILE"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="mode" type="java.lang.String"/>
      <param name="stream" type="org.spf4j.unix.CLibrary.FILE"/>
    </method>
    <method name="fseek" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="org.spf4j.unix.CLibrary.FILE"/>
      <param name="offset" type="long"/>
      <param name="whence" type="int"/>
    </method>
    <method name="ftell" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="org.spf4j.unix.CLibrary.FILE"/>
    </method>
    <method name="fread" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="buf" type="com.sun.jna.Pointer"/>
      <param name="size" type="int"/>
      <param name="count" type="int"/>
      <param name="file" type="org.spf4j.unix.CLibrary.FILE"/>
    </method>
    <method name="fclose" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="org.spf4j.unix.CLibrary.FILE"/>
    </method>
    <method name="getdtablesize" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="fcntl" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fd" type="int"/>
      <param name="command" type="int"/>
    </method>
    <method name="fcntl" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fd" type="int"/>
      <param name="command" type="int"/>
      <param name="flags" type="int"/>
    </method>
    <method name="readlink" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="filename" type="java.lang.String"/>
      <param name="buffer" type="com.sun.jna.Memory"/>
      <param name="size" type="com.sun.jna.NativeLong"/>
      <doc>
      <![CDATA[Read a symlink. The name will be copied into the specified memory, and returns the number of bytes copied. The
 string is not null-terminated.

 @return if the return value equals size, the caller needs to retry with a bigger buffer. If -1, error.]]>
      </doc>
    </method>
    <field name="INSTANCE" type="org.spf4j.unix.CLibrary"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="F_GETFD" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="F_SETFD" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FD_CLOEXEC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[GNU C library.]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.unix.CLibrary -->
  <!-- start class org.spf4j.unix.CLibrary.FILE -->
  <class name="CLibrary.FILE" extends="com.sun.jna.PointerType"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FILE"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="FILE" type="com.sun.jna.Pointer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.unix.CLibrary.FILE -->
  <!-- start class org.spf4j.unix.UnixConstants -->
  <class name="UnixConstants" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="O_RDONLY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="O_WRONLY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="O_RDWR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="O_APPEND" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="O_CREAT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="O_EXCL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="O_TRUNC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="O_SYNC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="O_DSYNC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="O_NOFOLLOW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IAMB" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IRUSR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IWUSR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IXUSR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IRGRP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IWGRP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IXGRP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IROTH" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IWOTH" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IXOTH" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IFMT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IFREG" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IFDIR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IFLNK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IFCHR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IFBLK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="S_IFIFO" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="R_OK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="W_OK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="X_OK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="F_OK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ENOENT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EACCES" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EEXIST" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ENOTDIR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EINVAL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EXDEV" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EISDIR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ENOTEMPTY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ENOSPC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EAGAIN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ENOSYS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ELOOP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EROFS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ENODATA" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ERANGE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="AT_SYMLINK_NOFOLLOW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="AT_REMOVEDIR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.unix.UnixConstants -->
  <!-- start class org.spf4j.unix.UnixException -->
  <class name="UnixException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="UnixException" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="errno" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="errorString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="translateToIOException" return="java.io.IOException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.lang.String"/>
      <param name="other" type="java.lang.String"/>
      <doc>
      <![CDATA[Map well known errors to specific exceptions where possible; otherwise return more general FileSystemException.]]>
      </doc>
    </method>
    <method name="rethrowAsIOException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Internal exception thrown by native methods when error detected.]]>
    </doc>
  </class>
  <!-- end class org.spf4j.unix.UnixException -->
  <!-- start class org.spf4j.unix.UnixResources -->
  <class name="UnixResources" extends="java.lang.Enum"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.unix.UnixResources[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.unix.UnixResources"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getMacId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getGnuId" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSoftLimit" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="UnixException" type="org.spf4j.unix.UnixException"/>
    </method>
    <method name="setSoftLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="limit" type="long"/>
      <exception name="UnixException" type="org.spf4j.unix.UnixException"/>
    </method>
    <method name="setLimits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="softLimit" type="long"/>
      <param name="hardlimit" type="long"/>
      <exception name="UnixException" type="org.spf4j.unix.UnixException"/>
    </method>
    <method name="getHardLimit" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="UnixException" type="org.spf4j.unix.UnixException"/>
    </method>
    <field name="RLIMIT_CPU" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[0 Per-process CPU limit, in seconds.]]>
      </doc>
    </field>
    <field name="RLIMIT_FSIZE" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[1 Largest file that can be created, in bytes.]]>
      </doc>
    </field>
    <field name="RLIMIT_DATA" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[2 Maximum size of data segment, in bytes.]]>
      </doc>
    </field>
    <field name="RLIMIT_STACK" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[3 Maximum size of stack segment, in bytes.]]>
      </doc>
    </field>
    <field name="RLIMIT_CORE" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[4 Largest core file that can be created, in bytes.]]>
      </doc>
    </field>
    <field name="RLIMIT_RSS" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[5 Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size
 will be more likely to have physical memory taken from them.]]>
      </doc>
    </field>
    <field name="RLIMIT_NPROC" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[6 Number of processes.]]>
      </doc>
    </field>
    <field name="RLIMIT_NOFILE" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[7 Number of open files.]]>
      </doc>
    </field>
    <field name="RLIMIT_MEMLOCK" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[8 Locked-in-memory address space.]]>
      </doc>
    </field>
    <field name="RLIMIT_AS" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[9 Address space limit.]]>
      </doc>
    </field>
    <field name="RLIMIT_LOCKS" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[10 Maximum number of file locks.]]>
      </doc>
    </field>
    <field name="RLIMIT_SIGPENDING" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[11 Maximum number of pending signals.]]>
      </doc>
    </field>
    <field name="RLIMIT_MSGQUEUE" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[12 Maximum bytes in POSIX message queues.]]>
      </doc>
    </field>
    <field name="RLIMIT_NICE" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[13 Maximum nice priority allowed to raise to. Nice levels 19 .. -20 correspond to 0 .. 39 values of this resource
 limit.]]>
      </doc>
    </field>
    <field name="RLIMIT_RTPRIO" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[14]]>
      </doc>
    </field>
    <field name="RLIMIT_RTTIME" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[15 Maximum CPU time in microseconds that a process scheduled under a real-time scheduling policy may consume
 without making a blocking system call before being forcibly de-scheduled.]]>
      </doc>
    </field>
    <field name="RLIMIT_NLIMITS" type="org.spf4j.unix.UnixResources"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[16 Number of {@code rlimit} values]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Possible values of the first parameter to getrlimit()/setrlimit()
 A combination of com.sun.jna.platform.unix.Resource and MACOSX resource.h
 this class requires jna-platforn which is a optional dependency.
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.unix.UnixResources -->
</package>
<package name="org.junit.internal.runners.statements">
  <!-- start class org.junit.internal.runners.statements.FailOnTimeout -->
  <class name="FailOnTimeout" extends="org.junit.runners.model.Statement"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="FailOnTimeout" type="org.junit.runners.model.Statement, long"
      static="false" final="false" visibility="public"
      deprecated="use {@link #builder()} instead.">
      <doc>
      <![CDATA[Creates an instance wrapping the given statement with the given timeout in milliseconds.

 @param statement the statement to wrap
 @param timeoutMillis the timeout in milliseconds
 @deprecated use {@link #builder()} instead.]]>
      </doc>
    </constructor>
    <method name="builder" return="org.junit.internal.runners.statements.FailOnTimeout.Builder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new builder for building an instance.

 @since 4.12]]>
      </doc>
    </method>
    <method name="evaluate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="Throwable" type="java.lang.Throwable"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.junit.internal.runners.statements.FailOnTimeout -->
  <!-- start class org.junit.internal.runners.statements.FailOnTimeout.Builder -->
  <class name="FailOnTimeout.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="withTimeout" return="org.junit.internal.runners.statements.FailOnTimeout.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeout" type="long"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <doc>
      <![CDATA[Specifies the time to wait before timing out the test.

 <p>If this is not called, or is called with a {@code timeout} of
 {@code 0}, the returned {@code Statement} will wait forever for the
 test to complete, however the test will still launch from a separate
 thread. This can be useful for disabling timeouts in environments
 where they are dynamically set based on some property.

 @param timeout the maximum time to wait
 @param unit the time unit of the {@code timeout} argument
 @return {@code this} for method chaining.]]>
      </doc>
    </method>
    <method name="withLookingForStuckThread" return="org.junit.internal.runners.statements.FailOnTimeout.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="enable" type="boolean"/>
      <doc>
      <![CDATA[Specifies whether to look for a stuck thread.  If a timeout occurs and this
 feature is enabled, the test will look for a thread that appears to be stuck
 and dump its backtrace.  This feature is experimental.  Behavior may change
 after the 4.12 release in response to feedback.

 @param enable {@code true} to enable the feature
 @return {@code this} for method chaining.]]>
      </doc>
    </method>
    <method name="build" return="org.junit.internal.runners.statements.FailOnTimeout"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statement" type="org.junit.runners.model.Statement"/>
      <doc>
      <![CDATA[Builds a {@link FailOnTimeout} instance using the values in this builder,
 wrapping the given statement.

 @param statement]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link FailOnTimeout}.

 @since 4.12]]>
    </doc>
  </class>
  <!-- end class org.junit.internal.runners.statements.FailOnTimeout.Builder -->
</package>
<package name="org.spf4j.test.log.annotations">
  <!-- start interface org.spf4j.test.log.annotations.CollectLogs -->
  <interface name="CollectLogs"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <method name="minLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The minimum level of logs to collect.]]>
      </doc>
    </method>
    <method name="collectPrinted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Collect logs that have been printed(logged).]]>
      </doc>
    </method>
    <method name="nrLogs" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Maximum number of logs to collect.
 @return]]>
      </doc>
    </method>
    <method name="includeLogs" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[logs to include from collection. by default all categories are.
 @return]]>
      </doc>
    </method>
    <method name="excludeLogs" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[logs to exclude from collection.
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Annotation to specify custom log collection for a particular unit test.
 By default all unprinted logs above and including DEBUG level are collected for the purpose of being logged
 in case of unit test failure.
 @author Zoltan Farkas
 @see org.spf4j.test.log.annotations]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.annotations.CollectLogs -->
  <!-- start interface org.spf4j.test.log.annotations.ExpectLog -->
  <interface name="ExpectLog"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <method name="category" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the log category to expect. ("" is the root category).]]>
      </doc>
    </method>
    <method name="categoryClass" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the log category to expect. (Void.class is the root category and default).]]>
      </doc>
    </method>
    <method name="level" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return expected log level.]]>
      </doc>
    </method>
    <method name="messageRegexp" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return regexp of expected log message.]]>
      </doc>
    </method>
    <method name="nrTimes" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return nr of times the expectation to be asserted.]]>
      </doc>
    </method>
    <method name="expectationTimeout" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of TU to wait for a log message after the unit test execution is finished.]]>
      </doc>
    </method>
    <method name="timeUnit" return="java.util.concurrent.TimeUnit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return expectation timeout unit.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Annotation to assert log behavior.
 This annotation will describe a expected log event. If this expected log event will not happen during the
 unit test execution, the unit test will fail.
 @author Zoltan Farkas
 @see org.spf4j.test.log.annotations]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.annotations.ExpectLog -->
  <!-- start class org.spf4j.test.log.annotations.ExpectLog.Util -->
  <class name="ExpectLog.Util" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="effectiveCategory" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ann" type="org.spf4j.test.log.annotations.ExpectLog"/>
    </method>
  </class>
  <!-- end class org.spf4j.test.log.annotations.ExpectLog.Util -->
  <!-- start interface org.spf4j.test.log.annotations.ExpectLogs -->
  <interface name="ExpectLogs"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <method name="value" return="org.spf4j.test.log.annotations.ExpectLog[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Log expectation annotation for multiple logs.
 @author Zoltan Farkas
 @see org.spf4j.test.log.annotations
 @see org.spf4j.test.log.annotations.ExpectLog]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.annotations.ExpectLogs -->
  <!-- start interface org.spf4j.test.log.annotations.PrintLogs -->
  <interface name="PrintLogs"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <method name="category" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the log category to print. ("" is the root category).]]>
      </doc>
    </method>
    <method name="greedy" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return true if we don't want downstream log handlers to receive any logs from this category.]]>
      </doc>
    </method>
    <method name="minLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return minimum log level to print.]]>
      </doc>
    </method>
    <method name="ideMinLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return minimum log level to print when running in the IDE.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Annotation to specify custom log printout for a particular unit test.

 The default log level is controlled via:

 <p>System properties:</p>
 <ul>
 <li>
   # default root log level when tests executed from IDE. see TestUtils.class for more info.
   spf4j.testLog.rootPrintLevelIDE = DEBUG
 </li>
 <li>
   # default root log level.
   spf4j.testLog.rootPrintLevel = INFO
 </li>
 </ul>
 <p>Property files: spf4j-test-prtcfg.properties or spf4j-test-prtcfg-ide.properties for ide settings:</p>
 <p>[category(package) name]=[LOG_LEVEL](,[greedy])?</p>


 @author Zoltan Farkas
 @see org.spf4j.test.log.annotations]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.annotations.PrintLogs -->
  <!-- start interface org.spf4j.test.log.annotations.PrintLogsConfigs -->
  <interface name="PrintLogsConfigs"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <method name="value" return="org.spf4j.test.log.annotations.PrintLogs[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Support for multiple Printl log configurations
 @author Zoltan Farkas
 @see org.spf4j.test.log.annotations
 @see org.spf4j.test.log.annotations.PrintLogs]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.annotations.PrintLogsConfigs -->
</package>
<package name="org.spf4j.io">
  <!-- start class org.spf4j.io.AppendableWriter -->
  <class name="AppendableWriter" extends="java.io.Writer"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AppendableWriter" type="java.lang.Appendable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cbuf" type="char[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="append" return="java.io.Writer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="append" return="java.io.Writer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="csq" type="java.lang.CharSequence"/>
      <param name="start" type="int"/>
      <param name="end" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="append" return="java.io.Writer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="csq" type="java.lang.CharSequence"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cbuf" type="char[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="flush"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Utility class to adapt a Appendable to a Writer.
 this is a faster version of guava: CharStreams.asWriter
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.AppendableWriter -->
  <!-- start class org.spf4j.io.ByteArrayBuilder -->
  <class name="ByteArrayBuilder" extends="java.io.OutputStream"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ByteArrayBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ByteArrayBuilder" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ByteArrayBuilder" type="int, org.spf4j.recyclable.SizedRecyclingSupplier"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.

 @param size the initial size.
 @exception IllegalArgumentException if size is negative.]]>
      </doc>
    </constructor>
    <method name="getBuffer" return="byte[]"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="int"/>
      <doc>
      <![CDATA[Writes the specified byte to this byte array output stream.

 @param b the byte to be written.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <doc>
      <![CDATA[Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte array
 output stream.

 @param b the data.
 @param off the start offset in the data.
 @param len the number of bytes to write.]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the complete contents of this byte array output stream to the specified output stream argument, as if by
 calling the output stream's write method using <code>out.write(buf, 0, count)</code>.

 @param out the output stream to which to write the data.
 @exception IOException if an I/O error occurs.]]>
      </doc>
    </method>
    <method name="readFrom"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Resets the <code>count</code> field of this byte array output stream to zero, so that all currently accumulated
 output in the output stream is discarded. The output stream can be used again, reusing the already allocated buffer
 space.

 @see java.io.ByteArrayInputStream#count]]>
      </doc>
    </method>
    <method name="resetCountTo"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pos" type="int"/>
    </method>
    <method name="toByteArray" return="byte[]"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a newly allocated byte array. Its size is the current size of this output stream and the valid contents of
 the buffer have been copied into it.

 @return the current contents of this output stream, as a byte array.
 @see java.io.ByteArrayOutputStream#size()]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current size of the buffer.

 @return the value of the <code>count</code> field, which is the number of valid bytes in this output stream.
 @see java.io.ByteArrayOutputStream#count]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Converts the buffer's contents into a string decoding bytes using the platform's default character set. The length
 of the new <tt>String</tt>
 is a function of the character set, and hence may not be equal to the size of the buffer.

 <p>
 This method always replaces malformed-input and unmappable-character sequences with the default replacement string
 for the platform's default character set. The {@linkplain java.nio.charset.CharsetDecoder} class should be used
 when more control over the decoding process is required.

 @return String decoded from the buffer's contents.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charset" type="java.nio.charset.Charset"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Closing a <tt>ByteArrayOutputStream</tt> will likely recycle the underlying buffer. use of the builder after close
 is not advised]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utility class to avoid replicating byte arrays for no good reason.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.ByteArrayBuilder -->
  <!-- start class org.spf4j.io.ConfigurableAppenderSupplier -->
  <class name="ConfigurableAppenderSupplier" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.io.ObjectAppenderSupplier"/>
    <constructor name="ConfigurableAppenderSupplier"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ConfigurableAppenderSupplier" type="boolean, java.util.function.Predicate, org.spf4j.io.ObjectAppender[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAppenderType" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appender" type="org.spf4j.io.ObjectAppender"/>
    </method>
    <method name="register" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="appenders" type="org.spf4j.io.ObjectAppender[]"/>
    </method>
    <method name="replace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mt" type="org.spf4j.base.CoreTextMediaType"/>
      <param name="type" type="java.lang.Class"/>
      <param name="replace" type="java.util.function.Function"/>
    </method>
    <method name="register"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="appender" type="org.spf4j.io.ObjectAppender"/>
    </method>
    <method name="tryRegister" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="appender" type="org.spf4j.io.ObjectAppender"/>
    </method>
    <method name="register"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="contentType" type="org.spf4j.base.CoreTextMediaType"/>
      <param name="appender" type="org.spf4j.io.ObjectAppender"/>
    </method>
    <method name="tryRegister" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="contentType" type="org.spf4j.base.CoreTextMediaType"/>
      <param name="appender" type="org.spf4j.io.ObjectAppender"/>
    </method>
    <method name="unregister" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
    </method>
    <method name="get" return="org.spf4j.io.ObjectAppender"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mt" type="org.spf4j.base.CoreTextMediaType"/>
      <param name="type" type="java.lang.reflect.Type"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.ConfigurableAppenderSupplier -->
  <!-- start class org.spf4j.io.Csv -->
  <class name="Csv" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="readSystemProperty" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="propertyName" type="java.lang.String"/>
      <param name="defaults" type="java.lang.String[]"/>
    </method>
    <method name="writeCsvRow"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.lang.Appendable"/>
      <param name="elems" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeCsvRow2"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.lang.Appendable"/>
      <param name="obj" type="java.lang.Object"/>
      <param name="elems" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeCsvRow"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.lang.Appendable"/>
      <param name="elems" type="long[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeCsvRowNoEOL"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elems" type="long[]"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeCsvRow"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.lang.Appendable"/>
      <param name="elems" type="java.lang.Iterable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeCsvRowNoEOL"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elems" type="java.lang.Iterable"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="handler" type="org.spf4j.io.Csv.CsvMapHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="read" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="handler" type="org.spf4j.io.Csv.CsvHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="read" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="read" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <param name="handler" type="org.spf4j.io.Csv.CsvMapHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="readRow" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="row" type="java.lang.String"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="readRow" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="readRow" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="handler" type="org.spf4j.io.Csv.CsvRowHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="read" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <param name="handler" type="org.spf4j.io.Csv.CsvHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
    </method>
    <method name="readNoBom" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="org.spf4j.io.PushbackReader"/>
      <param name="handler" type="org.spf4j.io.Csv.CsvHandler"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="CsvParseException" type="org.spf4j.io.csv.CsvParseException"/>
      <doc>
      <![CDATA[reads CSV format until EOF of reader.

 @param <T>
 @param preader
 @param handler
 @return
 @throws IOException]]>
      </doc>
    </method>
    <method name="asIterable" return="java.lang.Iterable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <doc>
      <![CDATA[read a CSV stream, as a Iterable over rows.
 the List<String> instance is reused during iteration, you will need to copy content into
 own data structure.
 @param preader
 @return]]>
      </doc>
    </method>
    <method name="reader" return="org.spf4j.io.csv.CsvReader"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="preader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="readerNoBOM" return="org.spf4j.io.csv.CsvReader"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="org.spf4j.io.PushbackReader"/>
    </method>
    <method name="writeCsvElement"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.CharSequence"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeQuotedCsvElement"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.CharSequence"/>
      <param name="writer" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toCsvElement" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elem" type="java.lang.CharSequence"/>
    </method>
    <method name="readCsvElement" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="addElemTo" type="java.lang.StringBuilder"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[returns next character.

 @param reader
 @param addElemTo
 @return - next character or -1 if eof has been reached.
 @throws IOException]]>
      </doc>
    </method>
    <field name="CSV" type="org.spf4j.io.csv.CharSeparatedValues"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Supports CSV format as described at: https://en.wikipedia.org/wiki/Comma-separated_values. either of \n \r or \r\n
 are valid end of line delimiters

 why another implementation? because I need one that is as fast as possible, and as flexible as possible.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.Csv -->
  <!-- start interface org.spf4j.io.Csv.CsvHandler -->
  <interface name="Csv.CsvHandler"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.io.csv.CsvHandler"/>
  </interface>
  <!-- end interface org.spf4j.io.Csv.CsvHandler -->
  <!-- start interface org.spf4j.io.Csv.CsvMapHandler -->
  <interface name="Csv.CsvMapHandler"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.io.csv.CsvMapHandler"/>
  </interface>
  <!-- end interface org.spf4j.io.Csv.CsvMapHandler -->
  <!-- start interface org.spf4j.io.Csv.CsvRowHandler -->
  <interface name="Csv.CsvRowHandler"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.io.csv.CsvRowHandler"/>
  </interface>
  <!-- end interface org.spf4j.io.Csv.CsvRowHandler -->
  <!-- start interface org.spf4j.io.ObjectAppender -->
  <interface name="ObjectAppender"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.function.BiConsumer"/>
    <method name="getAppendedType" return="org.spf4j.base.CoreTextMediaType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[the MimeType of the format used to write the Object.
 @return]]>
      </doc>
    </method>
    <method name="append"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Write an Object to a char stream.
 @param object
 @param appendTo
 @throws IOException]]>
      </doc>
    </method>
    <method name="appendNullable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <param name="appenderSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendNullableJson"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <param name="appenderSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <param name="appenderSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Method to overwrite for implementing apenders for container objects.]]>
      </doc>
    </method>
    <method name="accept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <param name="appendTo" type="java.lang.Appendable"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <field name="TOSTRING_APPENDER" type="org.spf4j.io.ObjectAppender"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A simple Object appender that invokes the toString method of the object and writes the object out.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[@author zoly
 @param <T> - type of object to append.]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.io.ObjectAppender -->
  <!-- start interface org.spf4j.io.ObjectAppenderSupplier -->
  <interface name="ObjectAppenderSupplier"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.reflect.ByTypeSupplier"/>
    <method name="get" return="org.spf4j.io.ObjectAppender"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mr" type="org.spf4j.base.CoreTextMediaType"/>
      <param name="type" type="java.lang.reflect.Type"/>
    </method>
    <method name="get" return="org.spf4j.io.ObjectAppender"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
    </method>
    <field name="TO_STRINGER" type="org.spf4j.io.ConfigurableAppenderSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.io.ObjectAppenderSupplier -->
  <!-- start class org.spf4j.io.PushbackReader -->
  <class name="PushbackReader" extends="java.io.FilterReader"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="PushbackReader" type="java.io.Reader, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PushbackReader" type="java.io.Reader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cbuf" type="char[]"/>
      <param name="poff" type="int"/>
      <param name="plen" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="unread"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="unread"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cbuf" type="char[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="unread"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cbuf" type="char[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="ready" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="mark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="readAheadLimit" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="markSupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="skip" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pn" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.io.PushbackReader -->
</package>
<package name="org.spf4j.log">
  <!-- start class org.spf4j.log.AvroLogRecordImpl -->
  <class name="AvroLogRecordImpl" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.log.Slf4jLogRecord"/>
    <constructor name="AvroLogRecordImpl" type="org.spf4j.base.avro.LogRecord"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="AvroLogRecordImpl" type="org.spf4j.base.avro.LogRecord, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toLogRecord" return="org.spf4j.base.avro.LogRecord"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="origin" type="java.lang.String"/>
      <param name="traceId" type="java.lang.String"/>
    </method>
    <method name="getArguments" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExtraArgumentsRaw" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExtraArguments" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExtraThrowable" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLoggerName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMarker" return="org.slf4j.Marker"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessageFormat" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNrMessageArguments" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getThreadName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTimeStamp" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTimeStampInstant" return="java.time.Instant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isLogged" return="boolean"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setIsLogged"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="attach"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="getAttachments" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasAttachment" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.log.AvroLogRecordImpl -->
  <!-- start class org.spf4j.log.ExecContextLogger -->
  <class name="ExecContextLogger" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.slf4j.Logger"/>
    <implements name="org.spf4j.base.Wrapper"/>
    <constructor name="ExecContextLogger" type="org.slf4j.Logger"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ExecContextLogger" type="org.spf4j.log.XLog"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="from" return="org.spf4j.log.ExecContextLogger"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="wrapped" type="org.slf4j.Logger"/>
    </method>
    <method name="getWrapped" return="org.slf4j.Logger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="log"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="log" type="org.spf4j.base.avro.LogRecord"/>
    </method>
    <method name="log"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="msg" type="java.lang.String"/>
      <param name="args" type="java.lang.Object[]"/>
    </method>
    <method name="log"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ctx" type="org.spf4j.base.ExecutionContext"/>
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="msg" type="java.lang.String"/>
      <param name="args" type="java.lang.Object[]"/>
    </method>
    <method name="isTraceEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isTraceEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="argArray" type="java.lang.Object[]"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isDebugEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isDebugEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isInfoEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isInfoEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isWarnEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isWarnEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isErrorEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isErrorEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A Execution context aware logger.

 does the following:

 <li>
 1) if Execution context is present, it logs the context id. (relies on Logging back-ends supporting overflow args)
 </li>
 <li>
 2) if Execution context is present, it allows for context aware log level, and upgrades log messages to be logged by
 backend.
 </li>

 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.log.ExecContextLogger -->
  <!-- start class org.spf4j.log.Level -->
  <class name="Level" extends="java.lang.Enum"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.log.Level[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getIntValue" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getJulLevel" return="java.util.logging.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAvroLevel" return="org.spf4j.base.avro.LogLevel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="fromAvroLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.base.avro.LogLevel"/>
    </method>
    <method name="fromJulLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="severity" type="int"/>
    </method>
    <field name="TRACE" type="org.spf4j.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DEBUG" type="org.spf4j.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="INFO" type="org.spf4j.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="WARN" type="org.spf4j.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ERROR" type="org.spf4j.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="OFF" type="org.spf4j.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[An enum for log levels
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.log.Level -->
  <!-- start class org.spf4j.log.LogAttribute -->
  <class name="LogAttribute" extends="org.spf4j.base.Pair"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.JsonWriteable"/>
    <implements name="org.slf4j.Marker"/>
    <constructor name="LogAttribute" type="java.lang.String, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="of" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="val" type="java.lang.String"/>
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="traceId" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.CharSequence"/>
    </method>
    <method name="profileSamples" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ss" type="org.spf4j.base.StackSamples"/>
    </method>
    <method name="origLevel" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
    </method>
    <method name="origLoggerName" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggerName" type="java.lang.String"/>
    </method>
    <method name="origTimeStamp" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="instant" type="java.time.Instant"/>
    </method>
    <method name="origTimeStamp" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="millisSinceEpoch" type="long"/>
    </method>
    <method name="log" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.log.Slf4jLogRecord"/>
    </method>
    <method name="execTimeMicros" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="time" type="long"/>
      <param name="tu" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="value" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="what" type="java.lang.String"/>
      <param name="value" type="long"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeJsonTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appendable" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeJsonTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="gen" type="com.fasterxml.jackson.core.JsonGenerator"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="fromJson" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonStr" type="java.lang.CharSequence"/>
    </method>
    <method name="fromMap" return="org.spf4j.log.LogAttribute"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="val" type="java.util.Map"/>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reference" type="org.slf4j.Marker"/>
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reference" type="org.slf4j.Marker"/>
    </method>
    <method name="hasChildren" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasReferences" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="org.slf4j.Marker"/>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="ID_ATTR_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PROFILE_SAMPLES_ATTR_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.log.LogAttribute -->
  <!-- start class org.spf4j.log.LogPrinter -->
  <class name="LogPrinter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogPrinter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LogPrinter" type="java.nio.charset.Charset"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LogPrinter" type="java.time.format.DateTimeFormatter, java.nio.charset.Charset"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAppenderSupplier" return="org.spf4j.io.ConfigurableAppenderSupplier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="print" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.log.Slf4jLogRecord"/>
      <param name="os" type="java.io.OutputStream"/>
      <param name="errStream" type="java.io.OutputStream"/>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.log.Slf4jLogRecord"/>
      <param name="os" type="java.io.OutputStream"/>
    </method>
    <method name="printToBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.log.Slf4jLogRecord"/>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.base.avro.LogRecord"/>
      <param name="os" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="printTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="record" type="org.spf4j.log.Slf4jLogRecord"/>
      <param name="annotate" type="java.lang.String"/>
    </method>
    <method name="printTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.OutputStream"/>
      <param name="record" type="org.spf4j.base.avro.LogRecord"/>
      <param name="annotate" type="java.lang.String"/>
    </method>
    <method name="printTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.PrintStream"/>
      <param name="record" type="org.spf4j.log.Slf4jLogRecord"/>
      <param name="annotate" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A log printer. The format is not configurable, and this is intentional.
 create One instance of this printer and re-use it.
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.log.LogPrinter -->
  <!-- start class org.spf4j.log.LogUtils -->
  <class name="LogUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="logUpgrade"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="log" type="org.slf4j.Logger"/>
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="format" type="java.lang.String"/>
      <param name="pargs" type="java.lang.Object[]"/>
    </method>
    <method name="logUpgrade"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="log" type="java.util.logging.Logger"/>
      <param name="plevel" type="org.spf4j.log.Level"/>
      <param name="format" type="java.lang.String"/>
      <param name="pargs" type="java.lang.Object[]"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.log.LogUtils -->
  <!-- start class org.spf4j.log.SLF4JBridgeHandler -->
  <class name="SLF4JBridgeHandler" extends="java.util.logging.Handler"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="SLF4JBridgeHandler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="install"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Adds a SLF4JBridgeHandler instance to jul's root logger.

 This handler will redirect j.u.l. logging to SLF4J. However, only logs enabled in j.u.l. will be redirected. For
 example, if a log statement invoking a j.u.l. logger is disabled, then the corresponding non-event will
 <em>not</em>
 reach SLF4JBridgeHandler and cannot be redirected.]]>
      </doc>
    </method>
    <method name="uninstall"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes previously installed SLF4JBridgeHandler instances. See also {@link #install()}.

 @throws SecurityException A <code>SecurityException</code> is thrown, if a security manager exists and if the
 caller does not have LoggingPermission("control").]]>
      </doc>
    </method>
    <method name="isInstalled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if SLF4JBridgeHandler has been previously installed, returns false otherwise.

 @return true if SLF4JBridgeHandler is already installed, false other wise
 @throws SecurityException]]>
      </doc>
    </method>
    <method name="removeHandlersForRootLogger"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invoking this method removes/unregisters/detaches all handlers currently attached to the root logger]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="flush"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="logEfficient"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i18nMessage" type="java.lang.String"/>
      <param name="record" type="java.util.logging.LogRecord"/>
      <param name="slf4jLogger" type="org.slf4j.Logger"/>
    </method>
    <method name="getSourceMethodInfo" return="org.spf4j.base.avro.Method"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="java.util.logging.LogRecord"/>
    </method>
    <method name="publish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="java.util.logging.LogRecord"/>
    </method>
    <doc>
    <![CDATA[<p>
 Bridge/route all JUL log records to the SLF4J API.</p>
 <p>
 Implementation based on jul-to-slf4j bridge but at least 20% faster. Speed improvements come from using spf4j
 improved MessageFormatter + code cleanup. Also unlike jul-to-slf4j the sorce class and source method information is
 not being dropped. </p>
 <p>
 Implementation is interchangeable with the jul-to-slf4j implementation </p>]]>
    </doc>
  </class>
  <!-- end class org.spf4j.log.SLF4JBridgeHandler -->
  <!-- start interface org.spf4j.log.Slf4jLogRecord -->
  <interface name="Slf4jLogRecord"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getArguments" return="java.lang.Object[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return all slf4j log arguments, getNrMessageArguments() message arguments followed by additional payload
 like exceptions, or other data.]]>
      </doc>
    </method>
    <method name="getExtraArgumentsRaw" return="java.lang.Object[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return all extra arguments. (arguments that are not parameters for the message)]]>
      </doc>
    </method>
    <method name="getExtraArguments" return="java.lang.Object[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return all non Throwable extra arguments.]]>
      </doc>
    </method>
    <method name="getExtraThrowable" return="java.lang.Throwable"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return Throwable from extra arguments. If multiple, will return first will all others as suppressed.]]>
      </doc>
    </method>
    <method name="getLevel" return="org.spf4j.log.Level"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLoggerName" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMarker" return="org.slf4j.Marker"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessageFormat" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNrMessageArguments" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getThreadName" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTimeStamp" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTimeStampInstant" return="java.time.Instant"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isLogged" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates that this log record has been sent to the logging backend to persist.

 @return]]>
      </doc>
    </method>
    <method name="setIsLogged"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="attach"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="getAttachments" return="java.util.Set"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasAttachment" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="compareByTimestamp" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a" type="org.spf4j.log.Slf4jLogRecord"/>
      <param name="b" type="org.spf4j.log.Slf4jLogRecord"/>
    </method>
    <method name="toLogRecord" return="org.spf4j.base.avro.LogRecord"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="origin" type="java.lang.String"/>
      <param name="ptraceId" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.log.Slf4jLogRecord -->
  <!-- start class org.spf4j.log.Slf4jLogRecordImpl -->
  <class name="Slf4jLogRecordImpl" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.JsonWriteable"/>
    <implements name="org.spf4j.log.Slf4jLogRecord"/>
    <constructor name="Slf4jLogRecordImpl" type="java.lang.String, org.spf4j.log.Level, java.lang.String, java.lang.Object[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Slf4jLogRecordImpl" type="java.lang.String, org.spf4j.log.Level, org.slf4j.Marker, java.lang.String, java.lang.Object[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Slf4jLogRecordImpl" type="boolean, java.lang.String, org.spf4j.log.Level, org.slf4j.Marker, java.lang.String, java.lang.Object[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Slf4jLogRecordImpl" type="boolean, java.lang.String, org.spf4j.log.Level, org.slf4j.Marker, long, java.lang.String, java.lang.Object[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLoggerName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLevel" return="org.spf4j.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTimeStamp" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMarker" return="org.slf4j.Marker"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessageFormat" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getArguments" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNrMessageArguments" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getThreadName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExtraArgumentsRaw" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExtraArguments" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExtraThrowable" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[can be sub-classed to change the string representation.
 @return]]>
      </doc>
    </method>
    <method name="writeJsonTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appendable" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[can be sub-classed to change the json representation.
 @return]]>
      </doc>
    </method>
    <method name="isLogged" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setIsLogged"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="attach"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hasAttachment" return="boolean"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="getAttachments" return="java.util.Set"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.log.Slf4jLogRecordImpl -->
  <!-- start class org.spf4j.log.SLf4jXLogAdapter -->
  <class name="SLf4jXLogAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.log.XLog"/>
    <constructor name="SLf4jXLogAdapter" type="org.slf4j.Logger"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="logUpgrade"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="format" type="java.lang.String"/>
      <param name="pargs" type="java.lang.Object[]"/>
    </method>
    <method name="log"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="format" type="java.lang.String"/>
      <param name="args" type="java.lang.Object[]"/>
    </method>
    <method name="isEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="getWrapped" return="org.slf4j.Logger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.log.SLf4jXLogAdapter -->
  <!-- start interface org.spf4j.log.XLog -->
  <interface name="XLog"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.Wrapper"/>
    <method name="isEnabled" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="marker" type="org.slf4j.Marker"/>
      <doc>
      <![CDATA[Is logger enabled for level and marker
 @param level
 @param marker
 @return]]>
      </doc>
    </method>
    <method name="log"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="format" type="java.lang.String"/>
      <param name="args" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Log.
 @param marker
 @param level
 @param format
 @param args]]>
      </doc>
    </method>
    <method name="logUpgrade"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="level" type="org.spf4j.log.Level"/>
      <param name="format" type="java.lang.String"/>
      <param name="args" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Log with a level that is enabled. (upgrade level until so)
 @param marker
 @param level
 @param format
 @param args]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.log.XLog -->
</package>
<package name="org.spf4j.os">
  <!-- start class org.spf4j.os.LoggingProcessHandler -->
  <class name="LoggingProcessHandler" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.os.ProcessHandler"/>
    <constructor name="LoggingProcessHandler" type="java.util.logging.Logger"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="started"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="p" type="java.lang.Process"/>
    </method>
    <method name="handleStdOut" return="java.lang.Void"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="is" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="handleStdErr" return="java.lang.Void"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stderr" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.os.LoggingProcessHandler -->
  <!-- start class org.spf4j.os.OperatingSystem -->
  <class name="OperatingSystem" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="isMacOsx" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isWindows" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOsName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOSMbean" return="java.lang.management.OperatingSystemMXBean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSunJdkOSMBean" return="com.sun.management.OperatingSystemMXBean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getUnixOsMBean" return="com.sun.management.UnixOperatingSystemMXBean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOpenFileDescriptorCount" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMaxFileDescriptorCount" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="killProcess" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="proc" type="java.lang.Process"/>
      <param name="terminateTimeoutMillis" type="long"/>
      <param name="forceTerminateTimeoutMillis" type="long"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="forkExec" return="org.spf4j.os.ProcessResponse"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="command" type="java.lang.String[]"/>
      <param name="handler" type="org.spf4j.os.ProcessHandler"/>
      <param name="timeoutMillis" type="long"/>
      <param name="terminationTimeoutMillis" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[Process execution utility.
 @param <T> type the stdout is reduced to.
 @param <E> type stderr is reduced to.
 @param command the command to execute.
 @param handler handler for child stdin, stdout and stderr. stdout and stderr handling will be done in 2 threads
 from the DefaultExecutor thread pool. while stdin handling will execute in the current thread.
 @param timeoutMillis time to wait for the process to execute.
 @param terminationTimeoutMillis this is the timeout used when trying to terminate the process gracefully.
 @return the response (respCode, stdout reduction, stderr reduction)
 @throws IOException
 @throws InterruptedException
 @throws ExecutionException
 @throws TimeoutException when timeout happens.]]>
      </doc>
    </method>
    <method name="forkExec" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="command" type="java.lang.String[]"/>
      <param name="timeoutMillis" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="forkExecLog"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="command" type="java.lang.String[]"/>
      <param name="timeoutMillis" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="getHostName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="MAX_NR_OPENFILES" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Utility to wrap access to JDK specific Operating system Mbean attributes.

 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.os.OperatingSystem -->
  <!-- start interface org.spf4j.os.ProcessHandler -->
  <interface name="ProcessHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="handleStdOut" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="is" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="handleStdErr" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stderr" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeStdIn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stdout" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="started"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="p" type="java.lang.Process"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.os.ProcessHandler -->
  <!-- start class org.spf4j.os.ProcessResponse -->
  <class name="ProcessResponse" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getResponseCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getResponseExitCode" return="org.spf4j.base.SysExits"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOutput" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getErrOutput" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.os.ProcessResponse -->
  <!-- start class org.spf4j.os.ProcessUtil -->
  <class name="ProcessUtil" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getPid" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the jvm process ID, -1 if it cannot be figured out.]]>
      </doc>
    </method>
    <method name="getPid" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="p" type="java.lang.Process"/>
    </method>
    <doc>
    <![CDATA[PID is exposed in jdk 9... some of this will go away.
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.os.ProcessUtil -->
  <!-- start class org.spf4j.os.StdOutToStringProcessHandler -->
  <class name="StdOutToStringProcessHandler" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.os.ProcessHandler"/>
    <constructor name="StdOutToStringProcessHandler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="started"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="p" type="java.lang.Process"/>
    </method>
    <method name="handleStdOut" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stdout" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="handleStdErr" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stderr" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.os.StdOutToStringProcessHandler -->
</package>
<package name="org.spf4j.recyclable">
  <!-- start interface org.spf4j.recyclable.Disposable -->
  <interface name="Disposable"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.AutoCloseable"/>
    <method name="dispose"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ObjectDisposeException" type="org.spf4j.recyclable.ObjectDisposeException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ObjectDisposeException" type="org.spf4j.recyclable.ObjectDisposeException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.recyclable.Disposable -->
  <!-- start interface org.spf4j.recyclable.NonValidatingRecyclingSupplier -->
  <interface name="NonValidatingRecyclingSupplier"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="get" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ObjectCreationException" type="org.spf4j.recyclable.ObjectCreationException"/>
      <exception name="ObjectBorrowException" type="org.spf4j.recyclable.ObjectBorrowException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
      <doc>
      <![CDATA[block until a object is available and return it.

 @return - a object instance returned by this supplier.
 @throws ObjectCreationException - cannot create an object.
 @throws ObjectBorrowException - cannot borrow an object.
 @throws InterruptedException - interrupted.
 @throws TimeoutException - timed out while getting object.]]>
      </doc>
    </method>
    <method name="recycle"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <doc>
      <![CDATA[recycle object.
 @param object - object to recycle.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.recyclable.NonValidatingRecyclingSupplier -->
  <!-- start class org.spf4j.recyclable.ObjectBorrowException -->
  <class name="ObjectBorrowException" extends="org.spf4j.recyclable.SupplierException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ObjectBorrowException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectBorrowException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectBorrowException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectBorrowException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.ObjectBorrowException -->
  <!-- start class org.spf4j.recyclable.ObjectCreationException -->
  <class name="ObjectCreationException" extends="org.spf4j.recyclable.SupplierException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ObjectCreationException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectCreationException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectCreationException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectCreationException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.ObjectCreationException -->
  <!-- start class org.spf4j.recyclable.ObjectDisposeException -->
  <class name="ObjectDisposeException" extends="org.spf4j.recyclable.SupplierException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ObjectDisposeException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectDisposeException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectDisposeException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectDisposeException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.ObjectDisposeException -->
  <!-- start class org.spf4j.recyclable.ObjectReturnException -->
  <class name="ObjectReturnException" extends="org.spf4j.recyclable.SupplierException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ObjectReturnException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectReturnException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectReturnException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ObjectReturnException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.ObjectReturnException -->
  <!-- start interface org.spf4j.recyclable.SizedRecyclingSupplier -->
  <interface name="SizedRecyclingSupplier"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="get" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
    </method>
    <method name="recycle"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.recyclable.SizedRecyclingSupplier -->
  <!-- start interface org.spf4j.recyclable.SizedRecyclingSupplier.Factory -->
  <interface name="SizedRecyclingSupplier.Factory"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="create" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
    </method>
    <method name="size" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
  </interface>
  <!-- end interface org.spf4j.recyclable.SizedRecyclingSupplier.Factory -->
  <!-- start class org.spf4j.recyclable.SupplierException -->
  <class name="SupplierException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SupplierException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="SupplierException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="SupplierException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="SupplierException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.SupplierException -->
</package>
<package name="org.spf4j.text">
  <!-- start class org.spf4j.text.AttributedString -->
  <class name="AttributedString" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AttributedString" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an AttributedString instance with the given text.
 @param text The text for this attributed string.
 @exception NullPointerException if <code>text</code> is null.]]>
      </doc>
    </constructor>
    <constructor name="AttributedString" type="java.lang.String, java.util.Map"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an AttributedString instance with the given text and attributes.
 @param text The text for this attributed string.
 @param attributes The attributes that apply to the entire string.
 @exception NullPointerException if <code>text</code> or
            <code>attributes</code> is null.
 @exception IllegalArgumentException if the text has length 0
 and the attributes parameter is not an empty Map (attributes
 cannot be applied to a 0-length range).]]>
      </doc>
    </constructor>
    <constructor name="AttributedString" type="java.text.AttributedCharacterIterator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an AttributedString instance with the given attributed
 text represented by AttributedCharacterIterator.
 @param text The text for this attributed string.
 @exception NullPointerException if <code>text</code> is null.]]>
      </doc>
    </constructor>
    <constructor name="AttributedString" type="java.text.AttributedCharacterIterator, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an AttributedString instance with the subrange of
 the given attributed text represented by
 AttributedCharacterIterator. If the given range produces an
 empty text, all attributes will be discarded.  Note that any
 attributes wrapped by an Annotation object are discarded for a
 subrange of the original attribute range.

 @param text The text for this attributed string.
 @param beginIndex Index of the first character of the range.
 @param endIndex Index of the character following the last character
 of the range.
 @exception NullPointerException if <code>text</code> is null.
 @exception IllegalArgumentException if the subrange given by
 beginIndex and endIndex is out of the text range.
 @see java.text.Annotation]]>
      </doc>
    </constructor>
    <constructor name="AttributedString" type="java.text.AttributedCharacterIterator, int, int, java.text.AttributedCharacterIterator.Attribute[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an AttributedString instance with the subrange of
 the given attributed text represented by
 AttributedCharacterIterator.  Only attributes that match the
 given attributes will be incorporated into the instance. If the
 given range produces an empty text, all attributes will be
 discarded. Note that any attributes wrapped by an Annotation
 object are discarded for a subrange of the original attribute
 range.

 @param text The text for this attributed string.
 @param beginIndex Index of the first character of the range.
 @param endIndex Index of the character following the last character
 of the range.
 @param attributes Specifies attributes to be extracted
 from the text. If null is specified, all available attributes will
 be used.
 @exception NullPointerException if <code>text</code> is null.
 @exception IllegalArgumentException if the subrange given by
 beginIndex and endIndex is out of the text range.
 @see java.text.Annotation]]>
      </doc>
    </constructor>
    <method name="addAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attribute" type="java.text.AttributedCharacterIterator.Attribute"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Adds an attribute to the entire string.
 @param attribute the attribute key
 @param value the value of the attribute; may be null
 @exception NullPointerException if <code>attribute</code> is null.
 @exception IllegalArgumentException if the AttributedString has length 0
 (attributes cannot be applied to a 0-length range).]]>
      </doc>
    </method>
    <method name="addAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attribute" type="java.text.AttributedCharacterIterator.Attribute"/>
      <param name="value" type="java.lang.Object"/>
      <param name="beginIndex" type="int"/>
      <param name="endIndex" type="int"/>
      <doc>
      <![CDATA[Adds an attribute to a subrange of the string.
 @param attribute the attribute key
 @param value The value of the attribute. May be null.
 @param beginIndex Index of the first character of the range.
 @param endIndex Index of the character following the last character of the range.
 @exception NullPointerException if <code>attribute</code> is null.
 @exception IllegalArgumentException if beginIndex is less then 0, endIndex is
 greater than the length of the string, or beginIndex and endIndex together don't
 define a non-empty subrange of the string.]]>
      </doc>
    </method>
    <method name="addAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributes" type="java.util.Map"/>
      <param name="beginIndex" type="int"/>
      <param name="endIndex" type="int"/>
      <doc>
      <![CDATA[Adds a set of attributes to a subrange of the string.
 @param attributes The attributes to be added to the string.
 @param beginIndex Index of the first character of the range.
 @param endIndex Index of the character following the last
 character of the range.
 @exception NullPointerException if <code>attributes</code> is null.
 @exception IllegalArgumentException if beginIndex is less then
 0, endIndex is greater than the length of the string, or
 beginIndex and endIndex together don't define a non-empty
 subrange of the string and the attributes parameter is not an
 empty Map.]]>
      </doc>
    </method>
    <method name="getIterator" return="java.text.AttributedCharacterIterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an AttributedCharacterIterator instance that provides access to the entire contents of
 this string.

 @return An iterator providing access to the text and its attributes.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[An AttributedString holds text and related attribute information. It
 may be used as the actual data storage in some cases where a text
 reader wants to access attributed text through the AttributedCharacterIterator
 interface.

 <p>
 An attribute is a key/value pair, identified by the key.  No two
 attributes on a given character can have the same key.

 <p>The values for an attribute are immutable, or must not be mutated
 by clients or storage.  They are always passed by reference, and not
 cloned.

 @see AttributedCharacterIterator
 @see Annotation
 @since 1.2]]>
    </doc>
  </class>
  <!-- end class org.spf4j.text.AttributedString -->
  <!-- start class org.spf4j.text.MessageFormat -->
  <class name="MessageFormat" extends="java.text.Format"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MessageFormat" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a FastMessageFormat for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale and the
 specified pattern. The constructor first sets the locale, then parses the pattern and creates a list of subformats
 for the format elements contained in it. Patterns and their interpretation are specified in the
 <a href="#patterns">class description</a>.

 @param pattern the pattern for this message format
 @exception IllegalArgumentException if the pattern is invalid]]>
      </doc>
    </constructor>
    <constructor name="MessageFormat" type="java.lang.String, java.util.Locale"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a FastMessageFormat for the specified locale and pattern. The constructor first sets the locale, then
 parses the pattern and creates a list of sub-formats for the format elements contained in it. Patterns and their
 interpretation are specified in the
 <a href="#patterns">class description</a>.

 @param pattern the pattern for this message format
 @param locale the locale for this message format
 @exception IllegalArgumentException if the pattern is invalid
 @since 1.4]]>
      </doc>
    </constructor>
    <method name="setLocale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="locale" type="java.util.Locale"/>
      <doc>
      <![CDATA[Sets the locale to be used when creating or comparing subformats. This affects subsequent calls
 <ul>
 <li>to the {@link #applyPattern applyPattern} and {@link #toPattern toPattern} methods if format elements specify a
 format type and therefore have the subformats created in the <code>applyPattern</code> method, as well as
 <li>to the <code>format</code> and {@link #formatToCharacterIterator formatToCharacterIterator} methods if format
 elements do not specify a format type and therefore have the subformats created in the formatting methods.
 </ul>
 Subformats that have already been created are not affected.

 @param locale the locale to be used when creating or comparing subformats]]>
      </doc>
    </method>
    <method name="getLocale" return="java.util.Locale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the locale that's used when creating or comparing subformats.

 @return the locale used when creating or comparing subformats]]>
      </doc>
    </method>
    <method name="applyPattern"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pattern" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the pattern used by this message format. The method parses the pattern and creates a list of subformats for
 the format elements contained in it. Patterns and their interpretation are specified in the
 <a href="#patterns">class description</a>.

 @param pattern the pattern for this message format
 @exception IllegalArgumentException if the pattern is invalid]]>
      </doc>
    </method>
    <method name="toPattern" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a pattern representing the current state of the message format. The string is constructed from internal
 information and therefore does not necessarily equal the previously applied pattern.

 @return a pattern representing the current state of the message format]]>
      </doc>
    </method>
    <method name="setFormatsByArgumentIndex"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newFormats" type="java.text.Format[]"/>
      <doc>
      <![CDATA[Sets the formats to use for the values passed into <code>format</code> methods or returned from <code>parse</code>
 methods. The indices of elements in <code>newFormats</code> correspond to the argument indices used in the
 previously set pattern string. The order of formats in <code>newFormats</code> thus corresponds to the order of
 elements in the <code>arguments</code> array passed to the <code>format</code> methods or the result array returned
 by the <code>parse</code> methods.
 <p>
 If an argument index is used for more than one format element in the pattern string, then the corresponding new
 format is used for all such format elements. If an argument index is not used for any format element in the pattern
 string, then the corresponding new format is ignored. If fewer formats are provided than needed, then only the
 formats for argument indices less than <code>newFormats.length</code> are replaced.

 @param newFormats the new formats to use
 @exception NullPointerException if <code>newFormats</code> is null
 @since 1.4]]>
      </doc>
    </method>
    <method name="setFormats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newFormats" type="java.text.Format[]"/>
      <doc>
      <![CDATA[Sets the formats to use for the format elements in the previously set pattern string. The order of formats in
 <code>newFormats</code> corresponds to the order of format elements in the pattern string.
 <p>
 If more formats are provided than needed by the pattern string, the remaining ones are ignored. If fewer formats
 are provided than needed, then only the first <code>newFormats.length</code> formats are replaced.
 <p>
 Since the order of format elements in a pattern string often changes during localization, it is generally better to
 use the {@link #setFormatsByArgumentIndex setFormatsByArgumentIndex} method, which assumes an order of formats
 corresponding to the order of elements in the <code>arguments</code> array passed to the <code>format</code>
 methods or the result array returned by the <code>parse</code> methods.

 @param newFormats the new formats to use
 @exception NullPointerException if <code>newFormats</code> is null]]>
      </doc>
    </method>
    <method name="setFormatByArgumentIndex"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="argumentIndex" type="int"/>
      <param name="newFormat" type="java.text.Format"/>
      <doc>
      <![CDATA[Sets the format to use for the format elements within the previously set pattern string that use the given argument
 index. The argument index is part of the format element definition and represents an index into the
 <code>arguments</code> array passed to the <code>format</code> methods or the result array returned by the
 <code>parse</code> methods.
 <p>
 If the argument index is used for more than one format element in the pattern string, then the new format is used
 for all such format elements. If the argument index is not used for any format element in the pattern string, then
 the new format is ignored.

 @param argumentIndex the argument index for which to use the new format
 @param newFormat the new format to use
 @since 1.4]]>
      </doc>
    </method>
    <method name="setFormat"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="formatElementIndex" type="int"/>
      <param name="newFormat" type="java.text.Format"/>
      <doc>
      <![CDATA[Sets the format to use for the format element with the given format element index within the previously set pattern
 string. The format element index is the zero-based number of the format element counting from the start of the
 pattern string.
 <p>
 Since the order of format elements in a pattern string often changes during localization, it is generally better to
 use the {@link #setFormatByArgumentIndex setFormatByArgumentIndex} method, which accesses format elements based on
 the argument index they specify.

 @param formatElementIndex the index of a format element within the pattern
 @param newFormat the format to use for the specified format element
 @exception ArrayIndexOutOfBoundsException if {@code formatElementIndex} is equal to or larger than the number of
 format elements in the pattern string]]>
      </doc>
    </method>
    <method name="getFormats" return="java.text.Format[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the formats used for the format elements in the previously set pattern string. The order of formats in the
 returned array corresponds to the order of format elements in the pattern string.
 <p>
 Since the order of format elements in a pattern string often changes during localization, it's generally better to
 use the {@link #getFormatsByArgumentIndex getFormatsByArgumentIndex} method, which assumes an order of formats
 corresponding to the order of elements in the <code>arguments</code> array passed to the <code>format</code>
 methods or the result array returned by the <code>parse</code> methods.

 @return the formats used for the format elements in the pattern]]>
      </doc>
    </method>
    <method name="format" return="boolean[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="arguments" type="java.lang.Object[]"/>
      <param name="result" type="java.lang.CharSequence"/>
      <param name="pos" type="java.text.FieldPosition"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Formats an array of objects and appends the <code>MessageFormat</code>'s pattern, with format elements replaced by
 the formatted objects, to the provided <code>StringBuffer</code>.
 <p>
 The text substituted for the individual format elements is derived from the current subformat of the format element
 and the <code>arguments</code> element at the format element's argument index as indicated by the first matching
 line of the following table. An argument is <i>unavailable</i> if <code>arguments</code> is <code>null</code> or
 has fewer than argumentIndex+1 elements.

 <table border=1 summary="Examples of subformat,argument,and formatted text">
 <tr>
 <th>Subformat
 <th>Argument
 <th>Formatted Text
 <tr>
 <td><i>any</i>
 <td><i>unavailable</i>
 <td><code>"{" + argumentIndex + "}"</code>
 <tr>
 <td><i>any</i>
 <td><code>null</code>
 <td><code>"null"</code>
 <tr>
 <td><code>instanceof ChoiceFormat</code>
 <td><i>any</i>
 <td><code>subformat.format(argument).indexOf('{') &gt;= 0 ?<br>
 (new MessageFormat(subformat.format(argument), getLocale())).format(argument) : subformat.format(argument)</code>
 <tr>
 <td><code>!= null</code>
 <td><i>any</i>
 <td><code>subformat.format(argument)</code>
 <tr>
 <td><code>null</code>
 <td><code>instanceof Number</code>
 <td><code>NumberFormat.getInstance(getLocale()).format(argument)</code>
 <tr>
 <td><code>null</code>
 <td><code>instanceof Date</code>
 <td><code>DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)</code>
 <tr>
 <td><code>null</code>
 <td><code>instanceof String</code>
 <td><code>argument</code>
 <tr>
 <td><code>null</code>
 <td><i>any</i>
 <td><code>argument.toString()</code>
 </table>
 <p>
 If <code>pos</code> is non-null, and refers to <code>Field.ARGUMENT</code>, the location of the first formatted
 string will be returned.

 @param arguments an array of objects to be formatted and substituted.
 @param result where text is appended.
 @param pos On input: an alignment field, if desired. On output: the offsets of the alignment field.
 @return the string buffer passed in as {@code result}, with formatted text appended
 @exception IllegalArgumentException if an argument in the <code>arguments</code> array is not of the type expected
 by the format element(s) that use it.]]>
      </doc>
    </method>
    <method name="format" return="boolean[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="arguments" type="java.lang.Object[]"/>
      <param name="result" type="java.lang.CharSequence"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="format" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pattern" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Creates a MessageFormat with the given pattern and uses it to format the given arguments. This is equivalent to
 <blockquote>
 <code>(new {@link #MessageFormat(String) MessageFormat}(pattern)).
 {@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments,
 new StringBuffer(), null).toString()</code>
 </blockquote>

 @param pattern the pattern string
 @param arguments object(s) to format
 @return the formatted string
 @exception IllegalArgumentException if the pattern is invalid, or if an argument in the <code>arguments</code>
 array is not of the type expected by the format element(s) that use it.]]>
      </doc>
    </method>
    <method name="format" return="boolean[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="arguments" type="java.lang.Object"/>
      <param name="result" type="java.lang.CharSequence"/>
      <param name="pos" type="java.text.FieldPosition"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Formats an array of objects and appends the <code>MessageFormat</code>'s pattern, with format elements replaced by
 the formatted objects, to the provided <code>StringBuffer</code>. This is equivalent to
 <blockquote>
 <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}((Object[])
 arguments, result, pos)</code>
 </blockquote>

 @param arguments an array of objects to be formatted and substituted.
 @param result where text is appended.
 @param pos On input: an alignment field, if desired. On output: the offsets of the alignment field.
 @exception IllegalArgumentException if an argument in the <code>arguments</code> array is not of the type expected
 by the format element(s) that use it.]]>
      </doc>
    </method>
    <method name="formatToCharacterIterator" return="java.text.AttributedCharacterIterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arguments" type="java.lang.Object"/>
      <doc>
      <![CDATA[Formats an array of objects and inserts them into the <code>MessageFormat</code>'s pattern, producing an
 <code>AttributedCharacterIterator</code>. You can use the returned <code>AttributedCharacterIterator</code> to
 build the resulting String, as well as to determine information about the resulting String.
 <p>
 The text of the returned <code>AttributedCharacterIterator</code> is the same that would be returned by
 <blockquote>
 <code>{@link #format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition) format}(arguments, new
 StringBuffer(), null).toString()</code>
 </blockquote>
 <p>
 In addition, the <code>AttributedCharacterIterator</code> contains at least attributes indicating where text was
 generated from an argument in the <code>arguments</code> array. The keys of these attributes are of type
 <code>MessageFormat.Field</code>, their values are <code>Integer</code> objects indicating the index in the
 <code>arguments</code> array of the argument from which the text was generated.
 <p>
 The attributes/value from the underlying <code>Format</code> instances that <code>MessageFormat</code> uses will
 also be placed in the resulting <code>AttributedCharacterIterator</code>. This allows you to not only find where an
 argument is placed in the resulting String, but also which fields it contains in turn.

 @param arguments an array of objects to be formatted and substituted.
 @return AttributedCharacterIterator describing the formatted value.
 @exception NullPointerException if <code>arguments</code> is null.
 @exception IllegalArgumentException if an argument in the <code>arguments</code> array is not of the type expected
 by the format element(s) that use it.
 @since 1.4]]>
      </doc>
    </method>
    <method name="parse" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <param name="pos" type="java.text.ParsePosition"/>
      <doc>
      <![CDATA[Parses the string.

 <p>
 Caveats: The parse may fail in a number of circumstances. For example:
 <ul>
 <li>If one of the arguments does not occur in the pattern.
 <li>If the format of an argument loses information, such as with a choice format where a large number formats to
 "many".
 <li>Does not yet handle recursion (where the substituted strings contain {n} references.)
 <li>Will not always find a match (or the correct match) if some part of the parse is ambiguous. For example, if the
 pattern "{1},{2}" is used with the string arguments {"a,b", "c"}, it will format as "a,b,c". When the result is
 parsed, it will return {"a", "b,c"}.
 <li>If a single argument is parsed more than once in the string, then the later parse wins.
 </ul>
 When the parse fails, use ParsePosition.getErrorIndex() to find out where in the string the parsing failed. The
 returned error index is the starting offset of the sub-patterns that the string is comparing with. For example, if
 the parsing string "AAA {0} BBB" is comparing against the pattern "AAD {0} BBB", the error index is 0. When an
 error occurs, the call to this method will return null. If the source is null, return an empty array. (zoltan:
 yuck)


 @param source the string to parse
 @param pos the parse position
 @return an array of parsed objects]]>
      </doc>
    </method>
    <method name="parse" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <exception name="ParseException" type="java.text.ParseException"/>
      <doc>
      <![CDATA[Parses text from the beginning of the given string to produce an object array. The method may not use the entire
 text of the given string.
 <p>
 See the {@link #parse(String, ParsePosition)} method for more information on message parsing.

 @param source A <code>String</code> whose beginning should be parsed.
 @return An <code>Object</code> array parsed from the string.
 @exception ParseException if the beginning of the specified string cannot be parsed.]]>
      </doc>
    </method>
    <method name="parseObject" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <param name="pos" type="java.text.ParsePosition"/>
      <doc>
      <![CDATA[Parses text from a string to produce an object array.
 <p>
 The method attempts to parse text starting at the index given by <code>pos</code>. If parsing succeeds, then the
 index of <code>pos</code> is updated to the index after the last character used (parsing does not necessarily use
 all characters up to the end of the string), and the parsed object array is returned. The updated <code>pos</code>
 can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of
 <code>pos</code> is not changed, the error index of <code>pos</code> is set to the index of the character where the
 error occurred, and null is returned.
 <p>
 See the {@link #parse(String, ParsePosition)} method for more information on message parsing.

 @param source A <code>String</code>, part of which should be parsed.
 @param pos A <code>ParsePosition</code> object with index and error index information as described above.
 @return An <code>Object</code> array parsed from the string. In case of error, returns null.
 @exception NullPointerException if <code>pos</code> is null.]]>
      </doc>
    </method>
    <method name="clone" return="org.spf4j.text.MessageFormat"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates and returns a copy of this object.

 @return a clone of this instance.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <doc>
      <![CDATA[Equality comparison between two message format objects]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Generates a hash code for the message format object.]]>
      </doc>
    </method>
    <method name="format" return="java.lang.StringBuffer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <param name="toAppendTo" type="java.lang.StringBuffer"/>
      <param name="pos" type="java.text.FieldPosition"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Performance mutation of the JDK message formatter.
 Lots things of things have been done:
 1) reduced the amount of garbage generated during formatting.
 2) made some method invocations static.
 3) made this more flexible and usable against StringBuilder not only StringBuffer...
 4) thrown exceptions provide more detail on what went wrong.
 5) cleaned up lots of static analisys reported issues.

 <code>MessageFormat</code> provides a means to produce concatenated messages in a language-neutral way. Use this to
 construct messages displayed for end users.

 this implementation is based on java.text.MessageFormat with the goal to be a faster and more flexible implementation

 <p>
 <code>MessageFormat</code> takes a set of objects, formats them, then inserts the formatted strings into the pattern
 at the appropriate places.

 <p>
 <strong>Note:</strong>
 <code>MessageFormat</code> differs from the other <code>Format</code> classes in that you create a
 <code>MessageFormat</code> object with one of its constructors (not with a <code>getInstance</code> style factory
 method). The factory methods aren't necessary because <code>MessageFormat</code> itself doesn't implement locale
 specific behavior. Any locale specific behavior is defined by the pattern that you provide as well as the sub-formats
 used for inserted arguments.

 <h3><a name="patterns">Patterns and Their Interpretation</a></h3>

 <code>MessageFormat</code> uses patterns of the following form:
 <blockquote><pre>
 <i>MessageFormatPattern:</i>
         <i>String</i>
         <i>MessageFormatPattern</i> <i>FormatElement</i> <i>String</i>

 <i>FormatElement:</i>
         { <i>ArgumentIndex</i> }
         { <i>ArgumentIndex</i> , <i>FormatType</i> }
         { <i>ArgumentIndex</i> , <i>FormatType</i> , <i>FormatStyle</i> }

 <i>FormatType: one of </i>
         number date time choice

 <i>FormatStyle:</i>
         short
         medium
         long
         full
         integer
         currency
         percent
         <i>SubformatPattern</i>
 </pre></blockquote>

 <p>
 Within a <i>String</i>, a pair of single quotes can be used to quote any arbitrary characters except single quotes.
 For example, pattern string <code>"'{0}'"</code> represents string <code>"{0}"</code>, not a <i>FormatElement</i>. A
 single quote itself must be represented by doubled single quotes {@code ''} throughout a
 <i>String</i>. For example, pattern string <code>"'{''}'"</code> is interpreted as a sequence of <code>'{</code>
 (start of quoting and a left curly brace), <code>''</code> (a single quote), and <code>}'</code> (a right curly brace
 and end of quoting),
 <em>not</em> <code>'{'</code> and <code>'}'</code> (quoted left and right curly braces): representing string
 <code>"{'}"</code>,
 <em>not</em> <code>"{}"</code>.

 <p>
 A <i>SubformatPattern</i> is interpreted by its corresponding sub-format, and sub-format-dependent pattern rules
 apply. For example, pattern string <code>"{1,number,<u>$'#',##</u>}"</code> (<i>SubformatPattern</i> with underline)
 will produce a number format with the pound-sign quoted, with a result such as: {@code
 "$#31,45"}. Refer to each {@code Format} subclass documentation for details.

 <p>
 Any unmatched quote is treated as closed at the end of the given pattern. For example, pattern string {@code "'{0}"}
 is treated as pattern {@code "'{0}'"}.

 <p>
 Any curly braces within an unquoted pattern must be balanced. For example, <code>"ab {0} de"</code> and
 <code>"ab '}' de"</code> are valid patterns, but <code>"ab {0'}' de"</code>, <code>"ab } de"</code> and
 <code>"''{''"</code> are not.

 <dl><dt><b>Warning:</b><dd>The rules for using quotes within message format patterns unfortunately have shown to be
 somewhat confusing. In particular, it isn't always obvious to localizers whether single quotes need to be doubled or
 not. Make sure to inform localizers about the rules, and tell them (for example, by using comments in resource bundle
 source files) which strings will be processed by {@code MessageFormat}. Note that localizers may need to use single
 quotes in translated strings where the original version doesn't have them.
 </dl>
 <p>
 The <i>ArgumentIndex</i> value is a non-negative integer written using the digits {@code '0'} through {@code '9'},
 and represents an index into the {@code arguments} array passed to the {@code format} methods or the result array
 returned by the {@code parse} methods.
 <p>
 The <i>FormatType</i> and <i>FormatStyle</i> values are used to create a {@code Format} instance for the format
 element. The following table shows how the values map to {@code Format} instances. Combinations not shown in the
 table are illegal. A <i>SubformatPattern</i> must be a valid pattern string for the {@code Format} subclass used.

 <table border=1 summary="Shows how FormatType and FormatStyle values map to Format instances">
 <tr>
 <th id="ft" class="TableHeadingColor">FormatType
 <th id="fs" class="TableHeadingColor">FormatStyle
 <th id="sc" class="TableHeadingColor">Subformat Created
 <tr>
 <td headers="ft"><i>(none)</i>
 <td headers="fs"><i>(none)</i>
 <td headers="sc"><code>null</code>
 <tr>
 <td headers="ft" rowspan=5><code>number</code>
 <td headers="fs"><i>(none)</i>
 <td headers="sc">{@link NumberFormat#getInstance(Locale) NumberFormat.getInstance}{@code (getLocale())}
 <tr>
 <td headers="fs"><code>integer</code>
 <td headers="sc">{@link NumberFormat#getIntegerInstance(Locale) NumberFormat.getIntegerInstance}{@code (getLocale())}
 <tr>
 <td headers="fs"><code>currency</code>
 <td headers="sc">{@link NumberFormat#getCurrencyInstance(Locale) NumberFormat.getCurrencyInstance}
 {@code (getLocale())}
 <tr>
 <td headers="fs"><code>percent</code>
 <td headers="sc">{@link NumberFormat#getPercentInstance(Locale) NumberFormat.getPercentInstance}{@code (getLocale())}
 <tr>
 <td headers="fs"><i>SubformatPattern</i>
 <td headers="sc">{@code new}
 {@link DecimalFormat#DecimalFormat(String,DecimalFormatSymbols) DecimalFormat}{@code (subformatPattern,}
 {@link DecimalFormatSymbols#getInstance(Locale) DecimalFormatSymbols.getInstance}{@code (getLocale()))}
 <tr>
 <td headers="ft" rowspan=6><code>date</code>
 <td headers="fs"><i>(none)</i>
 <td headers="sc">{@link DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance}
 {@code (}{@link DateFormat#DEFAULT}{@code , getLocale())}
 <tr>
 <td headers="fs"><code>short</code>
 <td headers="sc">{@link DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance}
 {@code (}{@link DateFormat#SHORT}{@code , getLocale())}
 <tr>
 <td headers="fs"><code>medium</code>
 <td headers="sc">{@link DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance}
 {@code (}{@link DateFormat#DEFAULT}{@code , getLocale())}
 <tr>
 <td headers="fs"><code>long</code>
 <td headers="sc">{@link DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance}
 {@code (}{@link DateFormat#LONG}{@code , getLocale())}
 <tr>
 <td headers="fs"><code>full</code>
 <td headers="sc">{@link DateFormat#getDateInstance(int,Locale) DateFormat.getDateInstance}
 {@code (}{@link DateFormat#FULL}{@code , getLocale())}
 <tr>
 <td headers="fs"><i>SubformatPattern</i>
 <td headers="sc">{@code new}
 {@link SimpleDateFormat#SimpleDateFormat(String,Locale) SimpleDateFormat}{@code (subformatPattern, getLocale())}
 <tr>
 <td headers="ft" rowspan=6><code>time</code>
 <td headers="fs"><i>(none)</i>
 <td headers="sc">{@link DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance}
 {@code (}{@link DateFormat#DEFAULT}{@code , getLocale())}
 <tr>
 <td headers="fs"><code>short</code>
 <td headers="sc">{@link DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance}
 {@code (}{@link DateFormat#SHORT}{@code , getLocale())}
 <tr>
 <td headers="fs"><code>medium</code>
 <td headers="sc">{@link DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance}
 {@code (}{@link DateFormat#DEFAULT}{@code , getLocale())}
 <tr>
 <td headers="fs"><code>long</code>
 <td headers="sc">{@link DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance}
 {@code (}{@link DateFormat#LONG}{@code , getLocale())}
 <tr>
 <td headers="fs"><code>full</code>
 <td headers="sc">{@link DateFormat#getTimeInstance(int,Locale) DateFormat.getTimeInstance}
 {@code (}{@link DateFormat#FULL}{@code , getLocale())}
 <tr>
 <td headers="fs"><i>SubformatPattern</i>
 <td headers="sc">{@code new}
 {@link SimpleDateFormat#SimpleDateFormat(String,Locale) SimpleDateFormat}{@code (subformatPattern, getLocale())}
 <tr>
 <td headers="ft"><code>choice</code>
 <td headers="fs"><i>SubformatPattern</i>
 <td headers="sc">{@code new} {@link ChoiceFormat#ChoiceFormat(String) ChoiceFormat}{@code (subformatPattern)}
 </table>

 <h4>Usage Information</h4>

 <p>
 Here are some examples of usage. In real internationalized programs, the message format pattern and other static
 strings will, of course, be obtained from resource bundles. Other parameters will be dynamically determined at
 runtime.
 <p>
 The first example uses the static method <code>MessageFormat.format</code>, which internally creates a
 <code>MessageFormat</code> for one-time use:
 <blockquote><pre>
 int planet = 7;
 String event = "a disturbance in the Force";

 String result = MessageFormat.format(
     "At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.",
     planet, new Date(), event);
 </pre></blockquote>
 The output is:
 <blockquote><pre>
 At 12:30 PM on Jul 3, 2053, there was a disturbance in the Force on planet 7.
 </pre></blockquote>

 <p>
 The following example creates a <code>MessageFormat</code> instance that can be used repeatedly:
 <blockquote><pre>
 int fileCount = 1273;
 String diskName = "MyDisk";
 Object[] testArgs = {new Long(fileCount), diskName};

 MessageFormat form = new MessageFormat(
     "The disk \"{1}\" contains {0} file(s).");

 System.out.println(form.format(testArgs));
 </pre></blockquote>
 The output with different values for <code>fileCount</code>:
 <blockquote><pre>
 The disk "MyDisk" contains 0 file(s).
 The disk "MyDisk" contains 1 file(s).
 The disk "MyDisk" contains 1,273 file(s).
 </pre></blockquote>

 <p>
 For more sophisticated patterns, you can use a <code>ChoiceFormat</code> to produce correct forms for singular and
 plural:
 <blockquote><pre>
 MessageFormat form = new MessageFormat("The disk \"{1}\" contains {0}.");
 double[] filelimits = {0,1,2};
 String[] filepart = {"no files","one file","{0,number} files"};
 ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);
 form.setFormatByArgumentIndex(0, fileform);

 int fileCount = 1273;
 String diskName = "MyDisk";
 Object[] testArgs = {new Long(fileCount), diskName};

 System.out.println(form.format(testArgs));
 </pre></blockquote>
 The output with different values for <code>fileCount</code>:
 <blockquote><pre>
 The disk "MyDisk" contains no files.
 The disk "MyDisk" contains one file.
 The disk "MyDisk" contains 1,273 files.
 </pre></blockquote>

 <p>
 You can create the <code>ChoiceFormat</code> programmatically, as in the above example, or by using a pattern. See
 {@link ChoiceFormat} for more information.
 <blockquote><pre>{@code
 form.applyPattern(
    "There {0,choice,0#are no files|1#is one file|1<are {0,number,integer} files}.");
 }</pre></blockquote>

 <p>
 <strong>Note:</strong> As we see above, the string produced by a <code>ChoiceFormat</code> in
 <code>MessageFormat</code> is treated as special; occurrences of '{' are used to indicate subformats, and cause
 recursion. If you create both a <code>MessageFormat</code> and <code>ChoiceFormat</code> programmatically (instead of
 using the string patterns), then be careful not to produce a format that recurses on itself, which will cause an
 infinite loop.
 <p>
 When a single argument is parsed more than once in the string, the last match will be the final result of the
 parsing. For example,
 <blockquote><pre>
 MessageFormat mf = new MessageFormat("{0,number,#.##}, {0,number,#.#}");
 Object[] objs = {new Double(3.1415)};
 String result = mf.format( objs );
 // result now equals "3.14, 3.1"
 objs = null;
 objs = mf.parse(result, new ParsePosition(0));
 // objs now equals {new Double(3.1)}
 </pre></blockquote>

 <p>
 Likewise, parsing with a {@code MessageFormat} object using patterns containing multiple occurrences of the same
 argument would return the last match. For example,
 <blockquote><pre>
 MessageFormat mf = new MessageFormat("{0}, {0}, {0}");
 String forParsing = "x, y, z";
 Object[] objs = mf.parse(forParsing, new ParsePosition(0));
 // result now equals {new String("z")}
 </pre></blockquote>

 <h4><a name="synchronization">Synchronization</a></h4>

 <p>
 Message formats are not synchronized. It is recommended to create separate format instances for each thread. If
 multiple threads access a format concurrently, it must be synchronized externally.

 @see java.util.Locale
 @see Format
 @see NumberFormat
 @see DecimalFormat
 @see DecimalFormatSymbols
 @see ChoiceFormat
 @see DateFormat
 @see SimpleDateFormat

 @author Mark Davis]]>
    </doc>
  </class>
  <!-- end class org.spf4j.text.MessageFormat -->
</package>
<package name="org.spf4j.ds">
  <!-- start class org.spf4j.ds.Graphs -->
  <class name="Graphs" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="clone" return="com.google.common.graph.MutableGraph"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="graph" type="com.google.common.graph.MutableGraph"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.ds.Graphs -->
  <!-- start class org.spf4j.ds.IdentityHashSet -->
  <class name="IdentityHashSet" extends="gnu.trove.set.hash.THashSet"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdentityHashSet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="IdentityHashSet" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="IdentityHashSet" type="int, float"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="IdentityHashSet" type="java.util.Collection"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="hash" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="notnull" type="java.lang.Object"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="notnull" type="java.lang.Object"/>
      <param name="two" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class org.spf4j.ds.IdentityHashSet -->
  <!-- start class org.spf4j.ds.SimpleStack -->
  <class name="SimpleStack" extends="org.spf4j.ds.SimpleStackNullSupport"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="SimpleStack" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="SimpleStack"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="peek" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[take a look at the top of stack
 returns null if there is no element.
 @return Object]]>
      </doc>
    </method>
    <method name="peekAndPush" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="pollLast" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="indexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="lastIndexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="pushNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[/**
 A simple stack implementation that does not support null elements.
 @author Zoltan Farkas
 @param <T>]]>
    </doc>
  </class>
  <!-- end class org.spf4j.ds.SimpleStack -->
  <!-- start class org.spf4j.ds.SimpleStackNullSupport -->
  <class name="SimpleStackNullSupport" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.List"/>
    <constructor name="SimpleStackNullSupport" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[construct a stack with specified size]]>
      </doc>
    </constructor>
    <constructor name="SimpleStackNullSupport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a stack, default size is 20]]>
      </doc>
    </constructor>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[check if stack is empty

 @return boolean]]>
      </doc>
    </method>
    <method name="push"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[push object into stack

 @param o Object]]>
      </doc>
    </method>
    <method name="pushNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[pushes a null on top of stack.
 cane be overridden to prohibit operation.]]>
      </doc>
    </method>
    <method name="pushAndGetIdx" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="pushAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Push more objects into the stack

 @param args]]>
      </doc>
    </method>
    <method name="pop" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[pops object out of stack

 @return Object]]>
      </doc>
    </method>
    <method name="remove"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="pop" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
    </method>
    <method name="popTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Object[]"/>
      <param name="n" type="int"/>
    </method>
    <method name="removeFromTop"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
    </method>
    <method name="popUntil" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="until" type="java.lang.Object"/>
    </method>
    <method name="hasElements" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="peek" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[take a look at the top of stack.
 Throws exception if there is no element.

 @return Object]]>
      </doc>
    </method>
    <method name="peekFromTop" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
    </method>
    <method name="replaceFromTop"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="peek" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
    </method>
    <method name="peekUntil" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="until" type="java.lang.Object"/>
    </method>
    <method name="peekElemAfter" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="until" type="java.lang.Object"/>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clear the stack - also makes sure the stack objects are not referenced anymore]]>
      </doc>
    </method>
    <method name="getPtr" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[get the curent stack pos relative to base

 @return]]>
      </doc>
    </method>
    <method name="getFromPtr" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="ptr" type="int"/>
      <doc>
      <![CDATA[get element from stack at index relative to base

 @param ptr
 @return]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="separator" type="char"/>
      <doc>
      <![CDATA[returns a character separated string with the stack elements

 @param separator
 @return String]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[to string representation. can be subclassed.]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[can be overwritten to optimize.]]>
      </doc>
    </method>
    <method name="iterator" return="java.util.Iterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="toArray" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toArray" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="add" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.lang.Object"/>
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Can be overwritten for better implementation.
 @param o element to remove.
 @return]]>
      </doc>
    </method>
    <method name="containsAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.Collection"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="addAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.Collection"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="removeAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.Collection"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="retainAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.util.Collection"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[can be overwritten for better implementation.]]>
      </doc>
    </method>
    <method name="addAll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <param name="c" type="java.util.Collection"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="set" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <param name="element" type="java.lang.Object"/>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <param name="element" type="java.lang.Object"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="remove" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="indexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="lastIndexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="listIterator" return="java.util.ListIterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="listIterator" return="java.util.ListIterator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <method name="subList" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fromIndex" type="int"/>
      <param name="toIndex" type="int"/>
      <doc>
      <![CDATA[Not implemented, can be overwritten.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A simple stack implementation that supports null elements.
 @author Zoltan Farkas
 @param <T>]]>
    </doc>
  </class>
  <!-- end class org.spf4j.ds.SimpleStackNullSupport -->
</package>
<package name="org.spf4j.base.avro">
  <!-- start class org.spf4j.base.avro.AThrowables -->
  <class name="AThrowables" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.spf4j.base.avro.RemoteException"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <param name="prefix" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeMessageString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="t" type="org.spf4j.base.avro.RemoteException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.spf4j.base.avro.Throwable"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <param name="prefix" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeThrowableDetails"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="org.spf4j.base.avro.Throwable"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <param name="prefix" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trace" type="java.util.List"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <param name="prefix" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="org.spf4j.base.avro.StackTraceElement"/>
      <param name="previous" type="org.spf4j.base.avro.StackTraceElement"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="commonFrames" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trace" type="java.util.List"/>
      <param name="enclosingTrace" type="java.util.List"/>
    </method>
    <method name="writeMessageString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="t" type="org.spf4j.base.avro.Throwable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.avro.AThrowables -->
  <!-- start interface org.spf4j.base.avro.AvroCloseableIterable -->
  <interface name="AvroCloseableIterable"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.avro.AvroContainer"/>
    <implements name="org.spf4j.base.CloseableIterable"/>
    <method name="from" return="org.spf4j.base.avro.AvroCloseableIterable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="it" type="java.lang.Iterable"/>
      <param name="toClose" type="java.io.Closeable"/>
      <param name="elementSchema" type="org.apache.avro.Schema"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.avro.AvroCloseableIterable -->
  <!-- start interface org.spf4j.base.avro.AvroContainer -->
  <interface name="AvroContainer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getElementSchema" return="org.apache.avro.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[return the element schema of the container.
 @return null if schema can be inferred from type.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.avro.AvroContainer -->
  <!-- start class org.spf4j.base.avro.Converters -->
  <class name="Converters" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="convert" return="org.spf4j.base.avro.StackTraceElement"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stackTrace" type="java.lang.StackTraceElement"/>
    </method>
    <method name="convert" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stackTraces" type="java.lang.StackTraceElement[]"/>
    </method>
    <method name="convert" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="throwables" type="java.lang.Throwable[]"/>
      <param name="seen" type="java.util.Set"/>
    </method>
    <method name="convert" return="org.spf4j.base.avro.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="throwable" type="java.lang.Throwable"/>
    </method>
    <method name="convert" return="org.spf4j.base.avro.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="throwable" type="java.lang.Throwable"/>
      <param name="seen" type="java.util.Set"/>
    </method>
    <method name="convert" return="org.spf4j.base.avro.RemoteException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <param name="throwable" type="org.spf4j.base.avro.Throwable"/>
    </method>
    <method name="convert" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="origin" type="java.lang.String"/>
      <param name="traceId" type="java.lang.String"/>
      <param name="logRecords" type="java.util.List"/>
    </method>
    <method name="convert" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="org.spf4j.base.avro.Method"/>
      <param name="node" type="org.spf4j.base.StackSamples"/>
      <param name="parentId" type="int"/>
      <param name="id" type="int"/>
      <param name="handler" type="java.util.function.Consumer"/>
    </method>
    <method name="convert" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stackSamples" type="org.spf4j.base.StackSamples"/>
    </method>
    <field name="ROOT" type="org.spf4j.base.avro.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.avro.Converters -->
  <!-- start class org.spf4j.base.avro.MediaTypes -->
  <class name="MediaTypes" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="APPLICATION_JSON" type="org.spf4j.base.avro.MediaType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="APPLICATION_OCTET_STREAM" type="org.spf4j.base.avro.MediaType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="APPLICATION_AVRO" type="org.spf4j.base.avro.MediaType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="APPLICATION_AVRO_JSON" type="org.spf4j.base.avro.MediaType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="APPLICATION_AVRO_XJSON" type="org.spf4j.base.avro.MediaType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[an optimized json format implemented in zolyfarkas/avro]]>
      </doc>
    </field>
    <field name="TEXT_PLAIN" type="org.spf4j.base.avro.MediaType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TEXT_CSV" type="org.spf4j.base.avro.MediaType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.avro.MediaTypes -->
  <!-- start class org.spf4j.base.avro.RemoteException -->
  <class name="RemoteException" extends="org.spf4j.base.RemoteException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RemoteException" type="java.lang.String, org.spf4j.base.avro.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getRemoteCause" return="org.spf4j.base.avro.Throwable"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="fillInStackTrace" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Override to make up the remote stack trace.
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.avro.RemoteException -->
</package>
<package name="org.spf4j.reflect">
  <!-- start interface org.spf4j.reflect.ByTypeSupplier -->
  <interface name="ByTypeSupplier"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="get" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.reflect.ByTypeSupplier -->
  <!-- start class org.spf4j.reflect.CachingTypeMapWrapper -->
  <class name="CachingTypeMapWrapper" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.reflect.TypeMap"/>
    <constructor name="CachingTypeMapWrapper" type="com.google.common.cache.CacheBuilder, org.spf4j.reflect.TypeMap"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CachingTypeMapWrapper" type="org.spf4j.reflect.TypeMap"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAll" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
    </method>
    <method name="putIfNotPresent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="appender" type="java.lang.Object"/>
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
    </method>
    <method name="getExact" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
    </method>
    <method name="replace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
      <param name="f" type="java.util.function.Function"/>
    </method>
    <method name="clearCache"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.reflect.CachingTypeMapWrapper -->
  <!-- start class org.spf4j.reflect.GraphTypeMap -->
  <class name="GraphTypeMap" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.reflect.TypeMap"/>
    <constructor name="GraphTypeMap"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GraphTypeMap" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAll" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
    </method>
    <method name="putIfNotPresent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExact" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.reflect.GraphTypeMap -->
  <!-- start interface org.spf4j.reflect.TypeMap -->
  <interface name="TypeMap"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.reflect.ByTypeSupplier"/>
    <method name="getAll" return="java.util.Set"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Get all Objects associated to all unrelated compatible types.

 for example we have Object O of type T a subtype of T1 and T2.
 if this typemap contains Objects mapped to T1 and T2, those 2 objects
 will be returned if T1 and T2 are not related (subtypes of each other)
 if T1 extends T2 the object mapped to the most specific type is returned.

 @param t
 @return]]>
      </doc>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[get the object associated to a compatible type, only if there is only one.
 @param t
 @return]]>
      </doc>
    </method>
    <method name="getExact" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Get the the Object associated to type.
 @param t
 @return]]>
      </doc>
    </method>
    <method name="putIfNotPresent" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="object" type="java.lang.Object"/>
      <doc>
      <![CDATA[Associate object to type if no existing association present.
 @param type
 @param object
 @return]]>
      </doc>
    </method>
    <method name="safePut" return="org.spf4j.reflect.TypeMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="object" type="java.lang.Object"/>
      <doc>
      <![CDATA[Associate object with type. if there is an existing association a exception will be thrown.
 @param type
 @param object]]>
      </doc>
    </method>
    <method name="remove" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[remove type association.
 @param type
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Type to Object map.
 association is not 1 - 1. if we have  type1 -> object that if type2 is subtype of type1, also type2 -> object
 this is useful for resolving: ITC_INHERITANCE_TYPE_CHECKING

 @author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.reflect.TypeMap -->
</package>

</api>
