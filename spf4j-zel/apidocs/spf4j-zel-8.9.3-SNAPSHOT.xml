<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Thu Nov 11 08:43:11 EST 2021 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="spf4j-zel-8.9.3-SNAPSHOT"
  jdversion="1.0.9">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /Users/zoly/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/Users/zoly/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/Users/zoly/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/Users/zoly/.m2/repository/jdiff/jdiff/1.0.9/jdiff-1.0.9.jar -doclet jdiff.JDiff -docletpath /Users/zoly/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/Users/zoly/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/Users/zoly/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/Users/zoly/.m2/repository/jdiff/jdiff/1.0.9/jdiff-1.0.9.jar -apiname spf4j-zel-8.9.3-SNAPSHOT -apidir /Users/zoly/NetBeansProjects/spf4j/spf4j-zel/target/site/apidocs -classpath /Users/zoly/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/Users/zoly/NetBeansProjects/spf4j/spf4j-core/target/spf4j-core-8.9.3-SNAPSHOT.jar:/Users/zoly/.m2/repository/org/spf4j/avro/core-schema/1.0.7/core-schema-1.0.7.jar:/Users/zoly/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/zoly/.m2/repository/org/threeten/threeten-extra/1.5.0/threeten-extra-1.5.0.jar:/Users/zoly/.m2/repository/org/apache/commons/commons-text/1.9/commons-text-1.9.jar:/Users/zoly/.m2/repository/com/google/guava/guava/30.0-jre/guava-30.0-jre.jar:/Users/zoly/.m2/repository/org/apache/avro/avro/1.10.0.8p/avro-1.10.0.8p.jar:/Users/zoly/.m2/repository/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.jar:/Users/zoly/.m2/repository/org/apache/commons/commons-lang3/3.11/commons-lang3-3.11.jar:/Users/zoly/.m2/repository/args4j/args4j/2.33/args4j-2.33.jar:/Users/zoly/NetBeansProjects/spf4j/spf4j-avro-components/spf4j-avro-adapter-fork/target/spf4j-avro-adapter-fork-8.9.3-SNAPSHOT.jar:/Users/zoly/NetBeansProjects/spf4j/spf4j-avro-components/spf4j-avro-adapter/target/spf4j-avro-adapter-8.9.3-SNAPSHOT.jar:/Users/zoly/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.11.3/jackson-databind-2.11.3.jar:/Users/zoly/.m2/repository/org/spf4j/avro-logical-types-fork/1.1/avro-logical-types-fork-1.1.jar:/Users/zoly/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.11.3/jackson-annotations-2.11.3.jar:/Users/zoly/.m2/repository/com/google/code/findbugs/findbugs-annotations/3.0.1/findbugs-annotations-3.0.1.jar:/Users/zoly/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.4/error_prone_annotations-2.3.4.jar:/Users/zoly/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/Users/zoly/.m2/repository/net/sf/trove4j/trove4j/3.0.3/trove4j-3.0.3.jar:/Users/zoly/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.11.3/jackson-core-2.11.3.jar:/Users/zoly/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/zoly/NetBeansProjects/spf4j/spf4j-zel/target/spf4j-zel-8.9.3-SNAPSHOT.jar:/Users/zoly/.m2/repository/org/checkerframework/checker-qual/3.5.0/checker-qual-3.5.0.jar -sourcepath /var/folders/xj/26t4l20j05740l2k5ng_4v3h0000gp/T/jdiff3054280806926831779/spf4j-zel/8.9.3-SNAPSHOT/sources -->
<package name="org.spf4j.zel.vm.gen">
</package>
<package name="org.spf4j.zel.vm">
  <!-- start class org.spf4j.zel.vm.Address -->
  <class name="Address" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Address" type="int, org.spf4j.zel.vm.Address.Scope"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAddress" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getScope" return="org.spf4j.zel.vm.Address.Scope"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.Address -->
  <!-- start class org.spf4j.zel.vm.Address.Scope -->
  <class name="Address.Scope" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.zel.vm.Address.Scope[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.zel.vm.Address.Scope"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="GLOBAL" type="org.spf4j.zel.vm.Address.Scope"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LOCAL" type="org.spf4j.zel.vm.Address.Scope"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.vm.Address.Scope -->
  <!-- start interface org.spf4j.zel.vm.AssignableValue -->
  <interface name="AssignableValue"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="assign"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.zel.vm.AssignableValue -->
  <!-- start class org.spf4j.zel.vm.CompileContext -->
  <class name="CompileContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.ParsingContext"/>
    <method name="generateCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="locs" type="org.spf4j.zel.vm.ParsingContext.Location[]"/>
      <param name="args" type="org.spf4j.zel.instr.Instruction[]"/>
    </method>
    <method name="generateCodeAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parsingContext" type="org.spf4j.zel.vm.ParsingContext"/>
    </method>
    <method name="getAddress" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProgramBuilder" return="org.spf4j.zel.vm.ProgramBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="createSubContext" return="org.spf4j.zel.vm.CompileContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="staticSymbol"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="staticSymbol"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getLast" return="org.spf4j.zel.instr.Instruction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="generateCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loc" type="org.spf4j.zel.vm.ParsingContext.Location"/>
      <param name="instr" type="org.spf4j.zel.instr.Instruction"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.vm.CompileContext -->
  <!-- start class org.spf4j.zel.vm.CompileException -->
  <class name="CompileException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CompileException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CompileException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CompileException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.CompileException -->
  <!-- start class org.spf4j.zel.vm.ExecAbortException -->
  <class name="ExecAbortException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExecAbortException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="fillInStackTrace" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.ExecAbortException"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.ExecAbortException -->
  <!-- start class org.spf4j.zel.vm.ExecutionContext -->
  <class name="ExecutionContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.VMExecutor.Suspendable"/>
    <constructor name="ExecutionContext" type="org.spf4j.zel.vm.Program, java.lang.Object[], java.lang.Object[], org.spf4j.zel.vm.ProcessIO, org.spf4j.zel.vm.VMExecutor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getIo" return="org.spf4j.zel.vm.ProcessIO"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="newJavaCall" return="org.spf4j.zel.vm.JavaMethodCall"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <param name="method" type="java.lang.String"/>
    </method>
    <method name="getMem" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="globalPoke"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="addr" type="int"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="localPoke"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="addr" type="int"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="localPeek" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="addr" type="int"/>
    </method>
    <method name="globalPeek" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="addr" type="int"/>
    </method>
    <method name="getProgram" return="org.spf4j.zel.vm.Program"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="incrementInstructionPointer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="terminate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="executeSyncOrAsync" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="executeAsync" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="suspend"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="future" type="org.spf4j.zel.vm.VMFuture"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="suspend"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="futures" type="java.util.List"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="call" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="getSuspendedAt" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="popSyncStackVal" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <doc>
      <![CDATA[pops object out of stack

 @return Object]]>
      </doc>
    </method>
    <method name="peekSyncStackVal" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="syncStackVal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="syncStackVals"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="popStackVals" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nvals" type="int"/>
    </method>
    <method name="popStackVals"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Object[]"/>
      <param name="nvals" type="int"/>
    </method>
    <method name="popStackVal" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNrStackVals" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="popSyncStackVals" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nvals" type="int"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="tuple" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="popSyncStackVals"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="vals" type="java.lang.Object[]"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="popSyncStackVals"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="vals" type="java.lang.Object[]"/>
      <param name="l" type="int"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="popFirstAvail" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nr" type="int"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="pop" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="push"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="pushNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isStackEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="peek" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="peekFromTop" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="n" type="int"/>
    </method>
    <method name="getSubProgramContext" return="org.spf4j.zel.vm.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="program" type="org.spf4j.zel.vm.Program"/>
      <param name="nrParams" type="int"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="getSyncSubProgramContext" return="org.spf4j.zel.vm.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="program" type="org.spf4j.zel.vm.Program"/>
      <param name="nrParams" type="int"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="getSyncSubProgramContext" return="org.spf4j.zel.vm.ExecutionContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="program" type="org.spf4j.zel.vm.Program"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isChildContext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMathContext" return="java.math.MathContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the mathContext]]>
      </doc>
    </method>
    <method name="setMathContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mathContext" type="java.math.MathContext"/>
      <doc>
      <![CDATA[@param mathContext the mathContext to set]]>
      </doc>
    </method>
    <method name="getExecService" return="org.spf4j.zel.vm.VMExecutor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the execService]]>
      </doc>
    </method>
    <method name="getResultCache" return="org.spf4j.zel.vm.ResultCache"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the resultCache]]>
      </doc>
    </method>
    <field name="VOID" type="java.lang.Object"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Virtual Machine Execution Context

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.ExecutionContext -->
  <!-- start class org.spf4j.zel.vm.JavaCharStream -->
  <class name="JavaCharStream" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JavaCharStream" type="java.io.Reader, int, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="JavaCharStream" type="java.io.Reader, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="JavaCharStream" type="java.io.Reader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="JavaCharStream" type="java.io.InputStream, java.lang.String, int, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="JavaCharStream" type="java.io.InputStream, int, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="JavaCharStream" type="java.io.InputStream, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="JavaCharStream" type="java.io.InputStream, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="JavaCharStream" type="java.io.InputStream, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="JavaCharStream" type="java.io.InputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <method name="setTabSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
    </method>
    <method name="getTabSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="ExpandBuff"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="wrapAround" type="boolean"/>
    </method>
    <method name="FillBuff"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="ReadByte" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="BeginToken" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[@return starting character for token.]]>
      </doc>
    </method>
    <method name="AdjustBuffSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="UpdateLineColumn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="c" type="char"/>
    </method>
    <method name="readChar" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Read a character.]]>
      </doc>
    </method>
    <method name="getColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLine" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getEndColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get end column.]]>
      </doc>
    </method>
    <method name="getEndLine" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get end line.]]>
      </doc>
    </method>
    <method name="getBeginColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return column of token start]]>
      </doc>
    </method>
    <method name="getBeginLine" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return line number of token start]]>
      </doc>
    </method>
    <method name="backup"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="amount" type="int"/>
      <doc>
      <![CDATA[Retreat.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.Reader"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <param name="buffersize" type="int"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.Reader"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.Reader"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <param name="encoding" type="java.lang.String"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <param name="buffersize" type="int"/>
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <param name="buffersize" type="int"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <param name="encoding" type="java.lang.String"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <param name="startline" type="int"/>
      <param name="startcolumn" type="int"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <param name="encoding" type="java.lang.String"/>
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dstream" type="java.io.InputStream"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="GetImage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return token image as String]]>
      </doc>
    </method>
    <method name="GetSuffix" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="len" type="int"/>
      <doc>
      <![CDATA[@return suffix]]>
      </doc>
    </method>
    <method name="Done"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Set buffers back to null when finished.]]>
      </doc>
    </method>
    <method name="adjustBeginLineColumn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newLine" type="int"/>
      <param name="newCol" type="int"/>
      <doc>
      <![CDATA[Method to adjust line and column numbers for the start of a token.]]>
      </doc>
    </method>
    <field name="staticFlag" type="boolean"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Whether parser is static.]]>
      </doc>
    </field>
    <field name="bufpos" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Position in buffer.]]>
      </doc>
    </field>
    <field name="bufline" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="bufcolumn" type="int[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="column" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="line" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="prevCharIsCR" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="prevCharIsLF" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="inputStream" type="java.io.Reader"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="nextCharBuf" type="char[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="buffer" type="char[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="maxNextCharInd" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="nextCharInd" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="inBuf" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="tabSize" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="trackLineColumn" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[An implementation of interface CharStream, where the stream is assumed to
 contain only ASCII characters (with java-like unicode escape processing).]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.JavaCharStream -->
  <!-- start class org.spf4j.zel.vm.JavaMethodCall -->
  <class name="JavaMethodCall" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <constructor name="JavaMethodCall" type="java.lang.Class, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="JavaMethodCall" type="java.lang.Object, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.JavaMethodCall -->
  <!-- start class org.spf4j.zel.vm.MemoryBuilder -->
  <class name="MemoryBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MemoryBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="addSymbol"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="symbol" type="java.lang.String"/>
    </method>
    <method name="addSymbol"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="symbol" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="build" return="org.spf4j.base.Pair"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="copy" return="org.spf4j.zel.vm.MemoryBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.vm.MemoryBuilder -->
  <!-- start interface org.spf4j.zel.vm.Method -->
  <interface name="Method"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="invoke" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.zel.vm.Method -->
  <!-- start class org.spf4j.zel.vm.NullParsingContext -->
  <class name="NullParsingContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.ParsingContext"/>
    <method name="getAddress" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[return the current code address

 @return]]>
      </doc>
    </method>
    <method name="getProgramBuilder" return="org.spf4j.zel.vm.ProgramBuilder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="generateCodeAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parsingContext" type="org.spf4j.zel.vm.ParsingContext"/>
    </method>
    <method name="createSubContext" return="org.spf4j.zel.vm.NullParsingContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="staticSymbol"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="staticSymbol"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="getLast" return="org.spf4j.zel.instr.Instruction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="generateCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loc" type="org.spf4j.zel.vm.ParsingContext.Location[]"/>
      <param name="args" type="org.spf4j.zel.instr.Instruction[]"/>
    </method>
    <method name="generateCode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loc" type="org.spf4j.zel.vm.ParsingContext.Location"/>
      <param name="instr" type="org.spf4j.zel.instr.Instruction"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.NullParsingContext"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.NullParsingContext -->
  <!-- start class org.spf4j.zel.vm.ParseException -->
  <class name="ParseException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ParseException" type="org.spf4j.zel.vm.Token, int[][], java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This constructor is used by the method "generateParseException"
 in the generated parser.  Calling this constructor generates
 a new object of this type with the fields "currentToken",
 "expectedTokenSequences", and "tokenImage" set.]]>
      </doc>
    </constructor>
    <constructor name="ParseException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The following constructors are for use by you for whatever
 purpose you can think of.  Constructing the exception in this
 manner makes the exception behave in the normal way - i.e., as
 documented in the class "Throwable".  The fields "errorToken",
 "expectedTokenSequences", and "tokenImage" do not contain
 relevant information.  The JavaCC generated code does not use
 these constructors.]]>
      </doc>
    </constructor>
    <constructor name="ParseException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with message.]]>
      </doc>
    </constructor>
    <field name="EOL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The end of line string for this machine.]]>
      </doc>
    </field>
    <field name="currentToken" type="org.spf4j.zel.vm.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This is the last token that has been consumed successfully.  If
 this object has been created due to a parse error, the token
 followng this token will (therefore) be the first error token.]]>
      </doc>
    </field>
    <field name="expectedTokenSequences" type="int[][]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Each entry in this array is an array of integers.  Each array
 of integers represents a sequence of tokens (by their ordinal
 values) that is expected at this point of the parse.]]>
      </doc>
    </field>
    <field name="tokenImage" type="java.lang.String[]"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This is a reference to the "tokenImage" array of the generated
 parser within which the parse error occurred.  This array is
 defined in the generated ...Constants interface.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This exception is thrown when parse errors are encountered.
 You can explicitly create objects of this exception type by
 calling the method generateParseException in the generated
 parser.

 You can modify this class to customize your error reporting
 mechanisms so long as you retain the public fields.]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.ParseException -->
  <!-- start interface org.spf4j.zel.vm.ParsingContext -->
  <interface name="ParsingContext"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="generateCode"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loc" type="org.spf4j.zel.vm.ParsingContext.Location[]"/>
      <param name="args" type="org.spf4j.zel.instr.Instruction[]"/>
      <doc>
      <![CDATA[generate instruction code with argument

 @param instr Instruction
 @param arg Object]]>
      </doc>
    </method>
    <method name="generateCode"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loc" type="org.spf4j.zel.vm.ParsingContext.Location"/>
      <param name="instr" type="org.spf4j.zel.instr.Instruction"/>
    </method>
    <method name="staticSymbol"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="staticSymbol"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="generateCodeAll"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parsingContext" type="org.spf4j.zel.vm.ParsingContext"/>
      <doc>
      <![CDATA[Add code to this context

 @param code Object[]]]>
      </doc>
    </method>
    <method name="getAddress" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[return the current code address

 @return]]>
      </doc>
    </method>
    <method name="getLast" return="org.spf4j.zel.instr.Instruction"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProgramBuilder" return="org.spf4j.zel.vm.ProgramBuilder"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[get the code generated in this context

 @return Object[]]]>
      </doc>
    </method>
    <method name="createSubContext" return="org.spf4j.zel.vm.ParsingContext"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[clone this context

 @return]]>
      </doc>
    </method>
  </interface>
  <!-- end interface org.spf4j.zel.vm.ParsingContext -->
  <!-- start class org.spf4j.zel.vm.ParsingContext.Location -->
  <class name="ParsingContext.Location" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Location" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRow" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.vm.ParsingContext.Location -->
  <!-- start interface org.spf4j.zel.vm.ProcessIO -->
  <interface name="ProcessIO"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getErr" return="java.io.OutputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIn" return="java.io.InputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOut" return="java.io.OutputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.zel.vm.ProcessIO -->
  <!-- start class org.spf4j.zel.vm.ProcessIOStreams -->
  <class name="ProcessIOStreams" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.ProcessIO"/>
    <constructor name="ProcessIOStreams" type="java.io.InputStream, java.io.OutputStream, java.io.OutputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getIn" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOut" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getErr" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="DEFAULT" type="org.spf4j.zel.vm.ProcessIO"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.ProcessIOStreams -->
  <!-- start class org.spf4j.zel.vm.Program -->
  <class name="Program" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <method name="async" return="org.spf4j.zel.vm.Program"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getGlobalMemoryBuilder" return="org.spf4j.zel.vm.MemoryBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParameterNames" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getGlobalSymbolTable" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLocalSymbolTable" return="java.util.Map"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLocalMemSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getGlobalMem" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasDeterministicFunctions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="org.spf4j.zel.instr.Instruction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="i" type="int"/>
      <doc>
      <![CDATA[@param i - inst address.
 @return the instruction.]]>
      </doc>
    </method>
    <method name="getCode" return="org.spf4j.zel.instr.Instruction[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDebugInfo" return="org.spf4j.zel.vm.ParsingContext.Location[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExecType" return="org.spf4j.zel.vm.Program.ExecutionType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="compile" return="org.spf4j.zel.vm.Program"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="zExpr" type="java.lang.String"/>
      <param name="varNames" type="java.lang.String[]"/>
      <exception name="CompileException" type="org.spf4j.zel.vm.CompileException"/>
    </method>
    <method name="compile" return="org.spf4j.zel.vm.Program"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <param name="zExpr" type="java.io.Reader"/>
      <param name="varNames" type="java.lang.String[]"/>
      <exception name="CompileException" type="org.spf4j.zel.vm.CompileException"/>
    </method>
    <method name="compilePredicate" return="org.spf4j.zel.vm.ZelPredicate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="zExpr" type="java.lang.CharSequence"/>
      <param name="varName" type="java.lang.String"/>
      <exception name="CompileException" type="org.spf4j.zel.vm.CompileException"/>
    </method>
    <method name="compile" return="org.spf4j.zel.vm.Program"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="zExpr" type="java.lang.String"/>
      <param name="localTable" type="java.util.Map"/>
      <param name="globalMem" type="java.lang.Object[]"/>
      <param name="globalTable" type="java.util.Map"/>
      <param name="varNames" type="java.lang.String[]"/>
      <exception name="CompileException" type="org.spf4j.zel.vm.CompileException"/>
    </method>
    <method name="compile" return="org.spf4j.zel.vm.Program"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <param name="zExpr" type="java.io.Reader"/>
      <param name="localTable" type="java.util.Map"/>
      <param name="globalMem" type="java.lang.Object[]"/>
      <param name="globalTable" type="java.util.Map"/>
      <param name="varNames" type="java.lang.String[]"/>
      <exception name="CompileException" type="org.spf4j.zel.vm.CompileException"/>
    </method>
    <method name="execute" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="execute" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.Object[]"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="toPredicate" return="org.spf4j.zel.vm.ZelPredicate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="toString" type="java.lang.String"/>
    </method>
    <method name="execute" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="execService" type="java.util.concurrent.ExecutorService"/>
      <param name="args" type="java.lang.Object[]"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="executeSingleThreaded" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.Object[]"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="execute" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="execService" type="org.spf4j.zel.vm.VMExecutor"/>
      <param name="io" type="org.spf4j.zel.vm.ProcessIO"/>
      <param name="args" type="java.lang.Object[]"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="execute" return="org.spf4j.base.Pair"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="execService" type="org.spf4j.zel.vm.VMExecutor"/>
      <param name="io" type="org.spf4j.zel.vm.ProcessIO"/>
      <param name="resultCache" type="org.spf4j.zel.vm.ResultCache"/>
      <param name="args" type="java.lang.Object[]"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="executeSync" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ectx" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="execute" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ectx" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="execute" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="io" type="org.spf4j.zel.vm.ProcessIO"/>
      <param name="args" type="java.lang.Object[]"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <doc>
      <![CDATA[This allows to run ZEL in an interactive mode

 @param args]]>
      </doc>
    </method>
    <method name="toAssemblyString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="org.spf4j.zel.vm.Program.Type"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the type]]>
      </doc>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="instr" type="java.lang.Class"/>
    </method>
    <method name="itterate" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="func" type="java.util.function.Function"/>
    </method>
    <doc>
    <![CDATA[<p>
 A ZEL program (function)</p>

 This is a Turing machine a Program will always be pretty much an array of operations (instructions).

 @author zoly
 @version 1.0]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.Program -->
  <!-- start class org.spf4j.zel.vm.Program.ExecutionType -->
  <class name="Program.ExecutionType" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.zel.vm.Program.ExecutionType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.zel.vm.Program.ExecutionType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="SYNC" type="org.spf4j.zel.vm.Program.ExecutionType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ASYNC" type="org.spf4j.zel.vm.Program.ExecutionType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.vm.Program.ExecutionType -->
  <!-- start class org.spf4j.zel.vm.Program.Type -->
  <class name="Program.Type" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.zel.vm.Program.Type[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.zel.vm.Program.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="DETERMINISTIC" type="org.spf4j.zel.vm.Program.Type"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NONDETERMINISTIC" type="org.spf4j.zel.vm.Program.Type"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.vm.Program.Type -->
  <!-- start class org.spf4j.zel.vm.RefOptimizer -->
  <class name="RefOptimizer" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.function.Function"/>
    <method name="apply" return="org.spf4j.zel.vm.Program"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="org.spf4j.zel.vm.Program"/>
    </method>
    <field name="INSTANCE" type="java.util.function.Function"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Changes reference by name instructions to reference by index.
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.RefOptimizer -->
  <!-- start interface org.spf4j.zel.vm.ResultCache -->
  <interface name="ResultCache"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="putPermanentResult"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="program" type="org.spf4j.zel.vm.Program"/>
      <param name="params" type="java.util.List"/>
      <param name="result" type="java.lang.Object"/>
    </method>
    <method name="putTransientResult"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="program" type="org.spf4j.zel.vm.Program"/>
      <param name="params" type="java.util.List"/>
      <param name="result" type="java.lang.Object"/>
    </method>
    <method name="getResult" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="program" type="org.spf4j.zel.vm.Program"/>
      <param name="params" type="java.util.List"/>
      <param name="compute" type="java.util.concurrent.Callable"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <doc>
    <![CDATA[result cache for storing.

 @author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.zel.vm.ResultCache -->
  <!-- start class org.spf4j.zel.vm.SimpleResultCache -->
  <class name="SimpleResultCache" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.ResultCache"/>
    <constructor name="SimpleResultCache"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="SimpleResultCache" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="putPermanentResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="program" type="org.spf4j.zel.vm.Program"/>
      <param name="params" type="java.util.List"/>
      <param name="result" type="java.lang.Object"/>
    </method>
    <method name="putTransientResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="program" type="org.spf4j.zel.vm.Program"/>
      <param name="params" type="java.util.List"/>
      <param name="result" type="java.lang.Object"/>
    </method>
    <method name="getResult" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="program" type="org.spf4j.zel.vm.Program"/>
      <param name="params" type="java.util.List"/>
      <param name="compute" type="java.util.concurrent.Callable"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[simple implementation for resultcache.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.SimpleResultCache -->
  <!-- start class org.spf4j.zel.vm.SuspendedException -->
  <class name="SuspendedException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="fillInStackTrace" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.SuspendedException"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.vm.SuspendedException -->
  <!-- start class org.spf4j.zel.vm.Token -->
  <class name="Token" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Token"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[No-argument constructor]]>
      </doc>
    </constructor>
    <constructor name="Token" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new token for the specified Image.]]>
      </doc>
    </constructor>
    <constructor name="Token" type="int, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new token for the specified Image and Kind.]]>
      </doc>
    </constructor>
    <method name="getValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An optional attribute value of the Token.
 Tokens which are not used as syntactic sugar will often contain
 meaningful values that will be used later on by the compiler or
 interpreter. This attribute value is often different from the image.
 Any subclass of Token that actually wants to return a non-null value can
 override this method as appropriate.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the image.]]>
      </doc>
    </method>
    <method name="newToken" return="org.spf4j.zel.vm.Token"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ofKind" type="int"/>
      <param name="image" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a new Token object, by default. However, if you want, you
 can create and return subclass objects based on the value of ofKind.
 Simply add the cases to the switch for all those special cases.
 For example, if you have a subclass of Token called IDToken that
 you want to create if ofKind is ID, simply add something like :

    case MyParserConstants.ID : return new IDToken(ofKind, image);

 to the following switch statement. Then you can cast matchedToken
 variable to the appropriate type and use sit in your lexical actions.]]>
      </doc>
    </method>
    <method name="newToken" return="org.spf4j.zel.vm.Token"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ofKind" type="int"/>
    </method>
    <field name="kind" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An integer that describes the kind of this token.  This numbering
 system is determined by JavaCCParser, and a table of these numbers is
 stored in the file ...Constants.java.]]>
      </doc>
    </field>
    <field name="beginLine" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The line number of the first character of this Token.]]>
      </doc>
    </field>
    <field name="beginColumn" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The column number of the first character of this Token.]]>
      </doc>
    </field>
    <field name="endLine" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The line number of the last character of this Token.]]>
      </doc>
    </field>
    <field name="endColumn" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The column number of the last character of this Token.]]>
      </doc>
    </field>
    <field name="image" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The string image of the token.]]>
      </doc>
    </field>
    <field name="next" type="org.spf4j.zel.vm.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A reference to the next regular (non-special) token from the input
 stream.  If this is the last token from the input stream, or if the
 token manager has not read tokens beyond this one, this field is
 set to null.  This is true only if this token is also a regular
 token.  Otherwise, see below for a description of the contents of
 this field.]]>
      </doc>
    </field>
    <field name="specialToken" type="org.spf4j.zel.vm.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This field is used to access special tokens that occur prior to this
 token, but after the immediately preceding regular (non-special) token.
 If there are no such special tokens, this field is set to null.
 When there are more than one such special token, this field refers
 to the last of these special tokens, which in turn refers to the next
 previous special token through its specialToken field, and so on
 until the first special token (whose specialToken field is null).
 The next fields of special tokens refer to other special tokens that
 immediately follow it (without an intervening regular token).  If there
 is no such token, this field is null.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Describes the input token stream.]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.Token -->
  <!-- start class org.spf4j.zel.vm.TokenMgrError -->
  <class name="TokenMgrError" extends="java.lang.Error"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TokenMgrError"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[No arg constructor.]]>
      </doc>
    </constructor>
    <constructor name="TokenMgrError" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with message and reason.]]>
      </doc>
    </constructor>
    <constructor name="TokenMgrError" type="boolean, int, int, int, java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Full Constructor.]]>
      </doc>
    </constructor>
    <method name="addEscapes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <doc>
      <![CDATA[Replaces unprintable characters by their escaped (or unicode escaped)
 equivalents in the given string]]>
      </doc>
    </method>
    <method name="LexicalErr" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="EOFSeen" type="boolean"/>
      <param name="lexState" type="int"/>
      <param name="errorLine" type="int"/>
      <param name="errorColumn" type="int"/>
      <param name="errorAfter" type="java.lang.String"/>
      <param name="curChar" type="int"/>
      <doc>
      <![CDATA[Returns a detailed message for the Error when it is thrown by the
 token manager to indicate a lexical error.
 Parameters :
    EOFSeen     : indicates if EOF caused the lexical error
    curLexState : lexical state in which this error occurred
    errorLine   : line number when the error occurred
    errorColumn : column number when the error occurred
    errorAfter  : prefix that was seen before this error occurred
    curchar     : the offending character
 Note: You can customize the lexical error message by modifying this method.]]>
      </doc>
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[You can also modify the body of this method to customize your error messages.
 For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
 of end-users concern, so you can return something like :

     "Internal Error : Please file a bug report .... "

 from this method for such cases in the release version of your parser.]]>
      </doc>
    </method>
    <field name="LEXICAL_ERROR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Lexical error occurred.]]>
      </doc>
    </field>
    <field name="STATIC_LEXER_ERROR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[An attempt was made to create a second instance of a static token manager.]]>
      </doc>
    </field>
    <field name="INVALID_LEXICAL_STATE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Tried to change to an invalid lexical state.]]>
      </doc>
    </field>
    <field name="LOOP_DETECTED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Detected (and bailed out of) an infinite loop in the token manager.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Token Manager Error.]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.TokenMgrError -->
  <!-- start class org.spf4j.zel.vm.VMASyncFuture -->
  <class name="VMASyncFuture" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.VMFuture"/>
    <constructor name="VMASyncFuture"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="cancel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="mayInterruptIfRunning" type="boolean"/>
    </method>
    <method name="isCancelled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isDone" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getResult" return="org.spf4j.base.Either"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="timeout" type="long"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
    </method>
    <method name="setResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="presult" type="java.lang.Object"/>
    </method>
    <method name="setExceptionResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="eresult" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[bean like implementation of a future
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.VMASyncFuture -->
  <!-- start class org.spf4j.zel.vm.VMExecutor -->
  <class name="VMExecutor" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="VMExecutor" type="java.util.concurrent.Executor"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="synchronize" return="org.spf4j.zel.vm.VMExecutor.Suspendable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="what" type="org.spf4j.zel.vm.VMExecutor.Suspendable"/>
    </method>
    <method name="submitNonSuspendable" return="java.util.concurrent.Future"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="java.util.concurrent.Callable"/>
    </method>
    <method name="submit" return="java.util.concurrent.Future"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="org.spf4j.zel.vm.VMExecutor.Suspendable"/>
    </method>
    <method name="submitInternal" return="java.util.concurrent.Future"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="callable" type="org.spf4j.zel.vm.VMExecutor.Suspendable"/>
      <doc>
      <![CDATA[Returns a future that will not get notified when callable completes.

 @param <T>
 @param callable
 @return]]>
      </doc>
    </method>
    <method name="resumeSuspendables" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="future" type="org.spf4j.zel.vm.VMFuture"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.VMExecutor -->
  <!-- start class org.spf4j.zel.vm.VMExecutor.Lazy -->
  <class name="VMExecutor.Lazy" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Lazy"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="DEFAULT" type="org.spf4j.zel.vm.VMExecutor"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.vm.VMExecutor.Lazy -->
  <!-- start interface org.spf4j.zel.vm.VMExecutor.Suspendable -->
  <interface name="VMExecutor.Suspendable"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.concurrent.Callable"/>
    <method name="call" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="getSuspendedAt" return="java.util.List"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </interface>
  <!-- end interface org.spf4j.zel.vm.VMExecutor.Suspendable -->
  <!-- start interface org.spf4j.zel.vm.VMFuture -->
  <interface name="VMFuture"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.concurrent.Future"/>
    <method name="getResult" return="org.spf4j.base.Either"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setResult"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="result" type="java.lang.Object"/>
    </method>
    <method name="setExceptionResult"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="result" type="java.util.concurrent.ExecutionException"/>
    </method>
    <doc>
    <![CDATA[bean like implementation of a future
 @author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.zel.vm.VMFuture -->
  <!-- start class org.spf4j.zel.vm.VMSyncFuture -->
  <class name="VMSyncFuture" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.VMFuture"/>
    <constructor name="VMSyncFuture"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="cancel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="mayInterruptIfRunning" type="boolean"/>
    </method>
    <method name="isCancelled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isDone" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getResult" return="org.spf4j.base.Either"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="timeout" type="long"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <method name="setResult"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="presult" type="java.lang.Object"/>
    </method>
    <method name="setExceptionResult"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="eresult" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[bean like implementation of a future
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.VMSyncFuture -->
  <!-- start class org.spf4j.zel.vm.ZCompiler -->
  <class name="ZCompiler" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.ZCompilerConstants"/>
    <constructor name="ZCompiler" type="java.io.InputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with InputStream.]]>
      </doc>
    </constructor>
    <constructor name="ZCompiler" type="java.io.InputStream, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with InputStream and supplied encoding]]>
      </doc>
    </constructor>
    <constructor name="ZCompiler" type="java.io.Reader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="ZCompiler" type="org.spf4j.zel.vm.ZCompilerTokenManager"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with generated Token Manager.]]>
      </doc>
    </constructor>
    <method name="compile"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <param name="xpr" type="java.lang.String"/>
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[Compile a ZEL expression from String.]]>
      </doc>
    </method>
    <method name="compile"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <param name="is" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[Compile a ZEL expression from Stream.]]>
      </doc>
    </method>
    <method name="compile"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <param name="reader" type="java.io.Reader"/>
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[Compile a ZEL expression from Stream.]]>
      </doc>
    </method>
    <method name="compilePredicate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <param name="reader" type="java.io.Reader"/>
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[Compile a ZEL expression predicate from Stream.]]>
      </doc>
    </method>
    <method name="mainprogram"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="program"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="statement"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="forStmt"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[The ZEL for statement, (similar with for from GO):
   for i = 0, result = 0; i < breakup; i = i + 1 {
    result = result + part[i] 
   };]]>
      </doc>
    </method>
    <method name="ifStmt"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[The IF statment. (Similar as in GO):
     if v > ma {
        ma = v
     } else if v < mi {
        mi = v
     }]]>
      </doc>
    </method>
    <method name="programBlockStatic"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="programBlock" return="org.spf4j.zel.vm.ParsingContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[A zel program block:
 {
  .....
 }]]>
      </doc>
    </method>
    <method name="zreturn"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="operations"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[The ZEL operations:

 Assignements: x, y, z = {1, 2, 3}; f(x) = 4;
 Increment: x++
 Decrement: x--
 Swap: x <-> y]]>
      </doc>
    </method>
    <method name="assignement"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="swap"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="assignableExpression"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="expression"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="ternary"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[The ternary operator:
 a < 0 ? 1 : 2]]>
      </doc>
    </method>
    <method name="logical"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[Logical operators: AND OR XOR]]>
      </doc>
    </method>
    <method name="compare"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[Commparison operatiors: < > <= >= == !=]]>
      </doc>
    </method>
    <method name="sum"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[+ - operators.]]>
      </doc>
    </method>
    <method name="term"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[* / % operators]]>
      </doc>
    </method>
    <method name="exponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[the exponent operator: ^]]>
      </doc>
    </method>
    <method name="unaryPost"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
      <doc>
      <![CDATA[Method invocation + dereferencing.]]>
      </doc>
    </method>
    <method name="unary"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <param name="left" type="boolean"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="element"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <param name="left" type="boolean"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="params" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="constant"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="sysFunction"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ParsingContext"/>
      <exception name="ParseException" type="org.spf4j.zel.vm.ParseException"/>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.InputStream"/>
      <param name="encoding" type="java.lang.String"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.Reader"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tm" type="org.spf4j.zel.vm.ZCompilerTokenManager"/>
      <doc>
      <![CDATA[Reinitialise.]]>
      </doc>
    </method>
    <method name="getNextToken" return="org.spf4j.zel.vm.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the next Token.]]>
      </doc>
    </method>
    <method name="getToken" return="org.spf4j.zel.vm.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Get the specific Token.]]>
      </doc>
    </method>
    <method name="generateParseException" return="org.spf4j.zel.vm.ParseException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Generate ParseException.]]>
      </doc>
    </method>
    <method name="trace_enabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Trace enabled.]]>
      </doc>
    </method>
    <method name="enable_tracing"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Enable tracing.]]>
      </doc>
    </method>
    <method name="disable_tracing"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Disable tracing.]]>
      </doc>
    </method>
    <field name="token_source" type="org.spf4j.zel.vm.ZCompilerTokenManager"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Generated Token Manager.]]>
      </doc>
    </field>
    <field name="token" type="org.spf4j.zel.vm.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Current token.]]>
      </doc>
    </field>
    <field name="jj_nt" type="org.spf4j.zel.vm.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Next token.]]>
      </doc>
    </field>
  </class>
  <!-- end class org.spf4j.zel.vm.ZCompiler -->
  <!-- start interface org.spf4j.zel.vm.ZCompilerConstants -->
  <interface name="ZCompilerConstants"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="EOF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[End of File.]]>
      </doc>
    </field>
    <field name="SINGLE_LINE_COMMENT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="COMMENT_END" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="COMMENT_START" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="PLUS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="INC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DEC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="MINUS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="MULTIPLY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DIVIDE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="MOD" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="POW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="AND" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="CASE_INS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="MULTI_LINE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="SAND" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="OR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="LIKE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="PIPE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="GT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="LT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="LE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="GE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="EQ" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="NEQ" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="XOR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="NOT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="CONDITION" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="CLM" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="EQUAL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="SCL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="LPAREN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="RPAREN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="LBRACE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="RBRACE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="CLBRACKET" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="LBRACKET" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="RBRACKET" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="COMMA" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DOT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="CDOT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="CONTEXT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="RETURN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="MEMORY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="SLEEP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="THROW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="FOR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="FUNCTION" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DETERMINISTIC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="SYNC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="ASYNC" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="ARG" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="TRUE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="FALSE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="NULL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="E" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="PI" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="FIRST" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="IF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="ELSE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="SWAP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="USE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DECIMAL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="INTEGER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DECIMAL_LITERAL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="HEX_LITERAL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="OCTAL_LITERAL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="FLOATING_POINT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="EXPONENT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="CHARACTER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="STRING" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="MATCHEXP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="ID" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="LETTER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DIGIT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RegularExpression Id.]]>
      </doc>
    </field>
    <field name="DEFAULT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Lexical state.]]>
      </doc>
    </field>
    <field name="tokenImage" type="java.lang.String[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Literal token values.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Token literal values and constants.
 Generated by org.javacc.parser.OtherFilesGen#start()]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.zel.vm.ZCompilerConstants -->
  <!-- start class org.spf4j.zel.vm.ZCompilerTokenManager -->
  <class name="ZCompilerTokenManager" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.ZCompilerConstants"/>
    <constructor name="ZCompilerTokenManager" type="org.spf4j.zel.vm.JavaCharStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <constructor name="ZCompilerTokenManager" type="org.spf4j.zel.vm.JavaCharStream, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor.]]>
      </doc>
    </constructor>
    <method name="setDebugStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ds" type="java.io.PrintStream"/>
      <doc>
      <![CDATA[Set debug output.]]>
      </doc>
    </method>
    <method name="jjFillToken" return="org.spf4j.zel.vm.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="getNextToken" return="org.spf4j.zel.vm.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the next Token.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="org.spf4j.zel.vm.JavaCharStream"/>
      <doc>
      <![CDATA[Reinitialise parser.]]>
      </doc>
    </method>
    <method name="ReInit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="org.spf4j.zel.vm.JavaCharStream"/>
      <param name="lexState" type="int"/>
      <doc>
      <![CDATA[Reinitialise parser.]]>
      </doc>
    </method>
    <method name="SwitchTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lexState" type="int"/>
      <doc>
      <![CDATA[Switch to specified lex state.]]>
      </doc>
    </method>
    <field name="debugStream" type="java.io.PrintStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Debug output.]]>
      </doc>
    </field>
    <field name="jjstrLiteralImages" type="java.lang.String[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Token literal values.]]>
      </doc>
    </field>
    <field name="lexStateNames" type="java.lang.String[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Lexer state names.]]>
      </doc>
    </field>
    <field name="jjnewLexState" type="int[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Lex State array.]]>
      </doc>
    </field>
    <field name="input_stream" type="org.spf4j.zel.vm.JavaCharStream"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="curChar" type="int"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Token Manager.]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.ZCompilerTokenManager -->
  <!-- start class org.spf4j.zel.vm.ZelFrame -->
  <class name="ZelFrame" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="ZelFrame" type="java.lang.String, java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getProgramName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.vm.ZelFrame -->
  <!-- start interface org.spf4j.zel.vm.ZelPredicate -->
  <interface name="ZelPredicate"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.function.Predicate"/>
    <method name="getZelExpression" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParameterId" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.zel.vm.ZelPredicate -->
  <!-- start class org.spf4j.zel.vm.ZExecutionException -->
  <class name="ZExecutionException" extends="java.util.concurrent.ExecutionException"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ZExecutionException" type="java.lang.String, java.lang.Exception"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ZExecutionException" type="java.lang.Exception"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ZExecutionException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ZExecutionException" type="java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getPayload" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="addZelFrame"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="frame" type="org.spf4j.zel.vm.ZelFrame"/>
    </method>
    <method name="getZelframes" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.vm.ZExecutionException -->
</package>
<package name="org.spf4j.zel.instr.var">
  <!-- start class org.spf4j.zel.instr.var.ARRAY -->
  <class name="ARRAY" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.var.ARRAY -->
  <!-- start class org.spf4j.zel.instr.var.DECODE -->
  <class name="DECODE" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.var.DECODE -->
  <!-- start class org.spf4j.zel.instr.var.INT -->
  <class name="INT" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.var.INT -->
  <!-- start class org.spf4j.zel.instr.var.LIST -->
  <class name="LIST" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.var.LIST -->
  <!-- start class org.spf4j.zel.instr.var.LOG -->
  <class name="LOG" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.var.LOG -->
  <!-- start class org.spf4j.zel.instr.var.LOG10 -->
  <class name="LOG10" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.var.LOG10 -->
  <!-- start class org.spf4j.zel.instr.var.MAP -->
  <class name="MAP" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.var.MAP -->
  <!-- start class org.spf4j.zel.instr.var.MAX -->
  <class name="MAX" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.var.MAX -->
  <!-- start class org.spf4j.zel.instr.var.MIN -->
  <class name="MIN" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.var.MIN -->
  <!-- start class org.spf4j.zel.instr.var.NVL -->
  <class name="NVL" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.var.NVL -->
  <!-- start class org.spf4j.zel.instr.var.OUT -->
  <class name="OUT" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.var.OUT -->
  <!-- start class org.spf4j.zel.instr.var.RANDOM -->
  <class name="RANDOM" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.var.RANDOM -->
  <!-- start class org.spf4j.zel.instr.var.SQRT -->
  <class name="SQRT" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.vm.Method"/>
    <method name="invoke" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="parameters" type="java.lang.Object[]"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.vm.Method"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.var.SQRT -->
</package>
<package name="org.spf4j.zel.operators">
  <!-- start class org.spf4j.zel.operators.BigDecimalOperators -->
  <class name="BigDecimalOperators" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
  </class>
  <!-- end class org.spf4j.zel.operators.BigDecimalOperators -->
  <!-- start class org.spf4j.zel.operators.BigDecimalOperators.Add -->
  <class name="BigDecimalOperators.Add" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Add"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigDecimalOperators.Add -->
  <!-- start class org.spf4j.zel.operators.BigDecimalOperators.Div -->
  <class name="BigDecimalOperators.Div" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Div"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigDecimalOperators.Div -->
  <!-- start class org.spf4j.zel.operators.BigDecimalOperators.Mod -->
  <class name="BigDecimalOperators.Mod" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mod"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigDecimalOperators.Mod -->
  <!-- start class org.spf4j.zel.operators.BigDecimalOperators.Mul -->
  <class name="BigDecimalOperators.Mul" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mul"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigDecimalOperators.Mul -->
  <!-- start class org.spf4j.zel.operators.BigDecimalOperators.Pow -->
  <class name="BigDecimalOperators.Pow" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Pow"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigDecimalOperators.Pow -->
  <!-- start class org.spf4j.zel.operators.BigDecimalOperators.Sub -->
  <class name="BigDecimalOperators.Sub" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Sub"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigDecimalOperators.Sub -->
  <!-- start class org.spf4j.zel.operators.BigIntegerOperators -->
  <class name="BigIntegerOperators" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
  </class>
  <!-- end class org.spf4j.zel.operators.BigIntegerOperators -->
  <!-- start class org.spf4j.zel.operators.BigIntegerOperators.Add -->
  <class name="BigIntegerOperators.Add" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Add"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigIntegerOperators.Add -->
  <!-- start class org.spf4j.zel.operators.BigIntegerOperators.Div -->
  <class name="BigIntegerOperators.Div" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Div"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigIntegerOperators.Div -->
  <!-- start class org.spf4j.zel.operators.BigIntegerOperators.Mod -->
  <class name="BigIntegerOperators.Mod" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mod"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigIntegerOperators.Mod -->
  <!-- start class org.spf4j.zel.operators.BigIntegerOperators.Mul -->
  <class name="BigIntegerOperators.Mul" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mul"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigIntegerOperators.Mul -->
  <!-- start class org.spf4j.zel.operators.BigIntegerOperators.Pow -->
  <class name="BigIntegerOperators.Pow" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Pow"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigIntegerOperators.Pow -->
  <!-- start class org.spf4j.zel.operators.BigIntegerOperators.Sub -->
  <class name="BigIntegerOperators.Sub" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Sub"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.BigIntegerOperators.Sub -->
  <!-- start class org.spf4j.zel.operators.DoubleOperators -->
  <class name="DoubleOperators" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
  </class>
  <!-- end class org.spf4j.zel.operators.DoubleOperators -->
  <!-- start class org.spf4j.zel.operators.DoubleOperators.Add -->
  <class name="DoubleOperators.Add" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Add"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.DoubleOperators.Add -->
  <!-- start class org.spf4j.zel.operators.DoubleOperators.Div -->
  <class name="DoubleOperators.Div" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Div"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.DoubleOperators.Div -->
  <!-- start class org.spf4j.zel.operators.DoubleOperators.Mod -->
  <class name="DoubleOperators.Mod" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mod"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.DoubleOperators.Mod -->
  <!-- start class org.spf4j.zel.operators.DoubleOperators.Mul -->
  <class name="DoubleOperators.Mul" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mul"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.DoubleOperators.Mul -->
  <!-- start class org.spf4j.zel.operators.DoubleOperators.Pow -->
  <class name="DoubleOperators.Pow" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Pow"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="op" return="java.lang.Number"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a" type="java.lang.Double"/>
      <param name="b" type="java.lang.Number"/>
    </method>
  </class>
  <!-- end class org.spf4j.zel.operators.DoubleOperators.Pow -->
  <!-- start class org.spf4j.zel.operators.DoubleOperators.Sub -->
  <class name="DoubleOperators.Sub" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Sub"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.DoubleOperators.Sub -->
  <!-- start class org.spf4j.zel.operators.IntegerOperators -->
  <class name="IntegerOperators" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
  </class>
  <!-- end class org.spf4j.zel.operators.IntegerOperators -->
  <!-- start class org.spf4j.zel.operators.IntegerOperators.Add -->
  <class name="IntegerOperators.Add" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Add"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.IntegerOperators.Add -->
  <!-- start class org.spf4j.zel.operators.IntegerOperators.Div -->
  <class name="IntegerOperators.Div" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Div"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.IntegerOperators.Div -->
  <!-- start class org.spf4j.zel.operators.IntegerOperators.Mod -->
  <class name="IntegerOperators.Mod" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mod"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.IntegerOperators.Mod -->
  <!-- start class org.spf4j.zel.operators.IntegerOperators.Mul -->
  <class name="IntegerOperators.Mul" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mul"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.IntegerOperators.Mul -->
  <!-- start class org.spf4j.zel.operators.IntegerOperators.Pow -->
  <class name="IntegerOperators.Pow" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Pow"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.IntegerOperators.Pow -->
  <!-- start class org.spf4j.zel.operators.IntegerOperators.Sub -->
  <class name="IntegerOperators.Sub" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Sub"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.IntegerOperators.Sub -->
  <!-- start class org.spf4j.zel.operators.LongOperators -->
  <class name="LongOperators" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
  </class>
  <!-- end class org.spf4j.zel.operators.LongOperators -->
  <!-- start class org.spf4j.zel.operators.LongOperators.Add -->
  <class name="LongOperators.Add" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Add"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.LongOperators.Add -->
  <!-- start class org.spf4j.zel.operators.LongOperators.Div -->
  <class name="LongOperators.Div" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Div"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.LongOperators.Div -->
  <!-- start class org.spf4j.zel.operators.LongOperators.Mod -->
  <class name="LongOperators.Mod" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mod"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.LongOperators.Mod -->
  <!-- start class org.spf4j.zel.operators.LongOperators.Mul -->
  <class name="LongOperators.Mul" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Mul"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.LongOperators.Mul -->
  <!-- start class org.spf4j.zel.operators.LongOperators.Pow -->
  <class name="LongOperators.Pow" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Pow"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.LongOperators.Pow -->
  <!-- start class org.spf4j.zel.operators.LongOperators.Sub -->
  <class name="LongOperators.Sub" extends="org.spf4j.zel.operators.AbstractOps"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Sub"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class org.spf4j.zel.operators.LongOperators.Sub -->
  <!-- start interface org.spf4j.zel.operators.Operator -->
  <interface name="Operator"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="op" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a" type="java.lang.Object"/>
      <param name="b" type="java.lang.Object"/>
    </method>
    <field name="MATH_CONTEXT" type="java.lang.ThreadLocal"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.zel.operators.Operator -->
  <!-- start class org.spf4j.zel.operators.Operator.Enum -->
  <class name="Operator.Enum" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.zel.operators.Operator.Enum[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.zel.operators.Operator.Enum"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="Add" type="org.spf4j.zel.operators.Operator.Enum"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="Sub" type="org.spf4j.zel.operators.Operator.Enum"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="Div" type="org.spf4j.zel.operators.Operator.Enum"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="Mul" type="org.spf4j.zel.operators.Operator.Enum"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="Mod" type="org.spf4j.zel.operators.Operator.Enum"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="Pow" type="org.spf4j.zel.operators.Operator.Enum"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.operators.Operator.Enum -->
  <!-- start class org.spf4j.zel.operators.Operators -->
  <class name="Operators" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="op" type="org.spf4j.zel.operators.Operator.Enum"/>
      <param name="a" type="java.lang.Object"/>
      <param name="b" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.operators.Operators -->
</package>
<package name="org.spf4j.zel.instr">
  <!-- start class org.spf4j.zel.instr.ABS -->
  <class name="ABS" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.ABS -->
  <!-- start class org.spf4j.zel.instr.ADD -->
  <class name="ADD" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.ADD -->
  <!-- start class org.spf4j.zel.instr.AND -->
  <class name="AND" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.AND -->
  <!-- start class org.spf4j.zel.instr.ARR -->
  <class name="ARR" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ARR" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.ARR -->
  <!-- start class org.spf4j.zel.instr.CALL -->
  <class name="CALL" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="CALL" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="getParameters" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nctx" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="nrParameters" type="int"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.CALL -->
  <!-- start class org.spf4j.zel.instr.CALLA -->
  <class name="CALLA" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="CALLA" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.CALLA -->
  <!-- start class org.spf4j.zel.instr.CALLREF -->
  <class name="CALLREF" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="CALLREF" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.CALLREF -->
  <!-- start class org.spf4j.zel.instr.CDEREFX -->
  <class name="CDEREFX" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="CDEREFX" type="java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.CDEREFX -->
  <!-- start class org.spf4j.zel.instr.DEC -->
  <class name="DEC" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.DEC -->
  <!-- start class org.spf4j.zel.instr.DEREF -->
  <class name="DEREF" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="registerTypeDerefHandler"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="refHandler" type="org.spf4j.zel.instr.DEREF.ReferenceHandler"/>
    </method>
    <method name="replaceTypeDerefHandler"
      abstract="false" native="false" synchronized="true"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="refHandler" type="org.spf4j.zel.instr.DEREF.ReferenceHandler"/>
    </method>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.DEREF -->
  <!-- start class org.spf4j.zel.instr.DEREFX -->
  <class name="DEREFX" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="DEREFX" type="java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.DEREFX -->
  <!-- start class org.spf4j.zel.instr.DIV -->
  <class name="DIV" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.DIV -->
  <!-- start class org.spf4j.zel.instr.DUP -->
  <class name="DUP" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.DUP -->
  <!-- start class org.spf4j.zel.instr.EQ -->
  <class name="EQ" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.EQ -->
  <!-- start class org.spf4j.zel.instr.FIRST -->
  <class name="FIRST" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="FIRST" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.FIRST -->
  <!-- start class org.spf4j.zel.instr.FJMP -->
  <class name="FJMP" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="FJMP" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.FJMP -->
  <!-- start class org.spf4j.zel.instr.GE -->
  <class name="GE" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.GE -->
  <!-- start class org.spf4j.zel.instr.GT -->
  <class name="GT" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.GT -->
  <!-- start class org.spf4j.zel.instr.HALT -->
  <class name="HALT" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly
 @version 1.0]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.HALT -->
  <!-- start class org.spf4j.zel.instr.INC -->
  <class name="INC" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.INC -->
  <!-- start class org.spf4j.zel.instr.Instruction -->
  <class name="Instruction" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="Instruction"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <doc>
      <![CDATA[Instruction execution

 @param context ExecutionContext
 @throws java.lang.InterruptedException
 @returns relative instruction pointer for next instruction.]]>
      </doc>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Outputs Instruction Name - use for debug purposes ...

 @return String]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 Title: VM Instruction</p>
 <p>
 Description: Abstract Instruction Implementation</p>

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.Instruction -->
  <!-- start class org.spf4j.zel.instr.JMP -->
  <class name="JMP" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JMP" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.JMP -->
  <!-- start class org.spf4j.zel.instr.LE -->
  <class name="LE" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.LE -->
  <!-- start class org.spf4j.zel.instr.LODAX -->
  <class name="LODAX" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.instr.SymbolRef"/>
    <constructor name="LODAX" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="symbol" type="java.lang.String"/>
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <param name="what" type="java.lang.Object"/>
      <exception name="ZExecutionException" type="org.spf4j.zel.vm.ZExecutionException"/>
    </method>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
    </method>
    <method name="getSymbol" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.LODAX -->
  <!-- start class org.spf4j.zel.instr.LODAXF -->
  <class name="LODAXF" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="LODAXF" type="org.spf4j.zel.vm.Address"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.LODAXF -->
  <!-- start class org.spf4j.zel.instr.LODX -->
  <class name="LODX" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.zel.instr.SymbolRef"/>
    <constructor name="LODX" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="readFrom" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="symbol" type="java.lang.String"/>
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ZExecutionException" type="org.spf4j.zel.vm.ZExecutionException"/>
    </method>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ZExecutionException" type="org.spf4j.zel.vm.ZExecutionException"/>
    </method>
    <method name="getSymbol" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.LODX -->
  <!-- start class org.spf4j.zel.instr.LODXF -->
  <class name="LODXF" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="LODXF" type="org.spf4j.zel.vm.Address"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.LODXF -->
  <!-- start class org.spf4j.zel.instr.LT -->
  <class name="LT" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.LT -->
  <!-- start class org.spf4j.zel.instr.MCTX -->
  <class name="MCTX" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MCTX" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.MCTX -->
  <!-- start class org.spf4j.zel.instr.MOD -->
  <class name="MOD" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.MOD -->
  <!-- start class org.spf4j.zel.instr.MOV -->
  <class name="MOV" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.MOV -->
  <!-- start class org.spf4j.zel.instr.MOVN -->
  <class name="MOVN" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MOVN" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.MOVN -->
  <!-- start class org.spf4j.zel.instr.MUL -->
  <class name="MUL" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.MUL -->
  <!-- start class org.spf4j.zel.instr.NEQ -->
  <class name="NEQ" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.NEQ -->
  <!-- start class org.spf4j.zel.instr.NJMP -->
  <class name="NJMP" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="NJMP" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Jump to a address is top of the stack is null. (Null jump)

 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.NJMP -->
  <!-- start class org.spf4j.zel.instr.NOP -->
  <class name="NOP" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <doc>
      <![CDATA[does nothing, my favorite instruction]]>
      </doc>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.NOP -->
  <!-- start class org.spf4j.zel.instr.NOT -->
  <class name="NOT" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.NOT -->
  <!-- start class org.spf4j.zel.instr.OR -->
  <class name="OR" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.OR -->
  <!-- start class org.spf4j.zel.instr.POW -->
  <class name="POW" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.POW -->
  <!-- start class org.spf4j.zel.instr.PUSH -->
  <class name="PUSH" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="PUSH" type="java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.zel.instr.PUSH -->
  <!-- start class org.spf4j.zel.instr.PUSHM -->
  <class name="PUSHM" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.PUSHM -->
  <!-- start class org.spf4j.zel.instr.REF -->
  <class name="REF" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.REF -->
  <!-- start class org.spf4j.zel.instr.RLIKE -->
  <class name="RLIKE" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="RLIKE" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[regexp match.
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.RLIKE -->
  <!-- start class org.spf4j.zel.instr.SLEEP -->
  <class name="SLEEP" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.SLEEP -->
  <!-- start class org.spf4j.zel.instr.SUB -->
  <class name="SUB" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.SUB -->
  <!-- start class org.spf4j.zel.instr.SWAP -->
  <class name="SWAP" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.zel.instr.SWAP -->
  <!-- start interface org.spf4j.zel.instr.SymbolRef -->
  <interface name="SymbolRef"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getSymbol" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.zel.instr.SymbolRef -->
  <!-- start class org.spf4j.zel.instr.SYNC -->
  <class name="SYNC" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly
 @version 1.0]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.SYNC -->
  <!-- start class org.spf4j.zel.instr.THROW -->
  <class name="THROW" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="ZExecutionException" type="org.spf4j.zel.vm.ZExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.THROW -->
  <!-- start class org.spf4j.zel.instr.XOR -->
  <class name="XOR" extends="org.spf4j.zel.instr.Instruction"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="execute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="org.spf4j.zel.vm.ExecutionContext"/>
      <exception name="SuspendedException" type="org.spf4j.zel.vm.SuspendedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getParameters" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="INSTANCE" type="org.spf4j.zel.instr.Instruction"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.zel.instr.XOR -->
</package>

</api>
